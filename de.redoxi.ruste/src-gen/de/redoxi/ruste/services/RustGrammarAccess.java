/*
* generated by Xtext
*/
package de.redoxi.ruste.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class RustGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CrateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Crate");
		private final Assignment cItemsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cItemsItemAndAttrsParserRuleCall_0 = (RuleCall)cItemsAssignment.eContents().get(0);
		
		//// Top level crate and its implicit module
		//Crate:
		//	items+=ItemAndAttrs*;
		public ParserRule getRule() { return rule; }

		//items+=ItemAndAttrs*
		public Assignment getItemsAssignment() { return cItemsAssignment; }

		//ItemAndAttrs
		public RuleCall getItemsItemAndAttrsParserRuleCall_0() { return cItemsItemAndAttrsParserRuleCall_0; }
	}

	public class ItemAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ItemAttr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttrsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttrsAttrParserRuleCall_1_0 = (RuleCall)cAttrsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttrsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttrsAttrParserRuleCall_2_1_0 = (RuleCall)cAttrsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Attribute for an item
		//ItemAttr:
		//	"#[" attrs+=Attr ("," attrs+=Attr)* "]";
		public ParserRule getRule() { return rule; }

		//"#[" attrs+=Attr ("," attrs+=Attr)* "]"
		public Group getGroup() { return cGroup; }

		//"#["
		public Keyword getNumberSignLeftSquareBracketKeyword_0() { return cNumberSignLeftSquareBracketKeyword_0; }

		//attrs+=Attr
		public Assignment getAttrsAssignment_1() { return cAttrsAssignment_1; }

		//Attr
		public RuleCall getAttrsAttrParserRuleCall_1_0() { return cAttrsAttrParserRuleCall_1_0; }

		//("," attrs+=Attr)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//attrs+=Attr
		public Assignment getAttrsAssignment_2_1() { return cAttrsAssignment_2_1; }

		//Attr
		public RuleCall getAttrsAttrParserRuleCall_2_1_0() { return cAttrsAttrParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class AttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralAttrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttrWithListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Individual attribute within an item
		//Attr:
		//	LiteralAttr | AttrWithList;
		public ParserRule getRule() { return rule; }

		//LiteralAttr | AttrWithList
		public Alternatives getAlternatives() { return cAlternatives; }

		//LiteralAttr
		public RuleCall getLiteralAttrParserRuleCall_0() { return cLiteralAttrParserRuleCall_0; }

		//AttrWithList
		public RuleCall getAttrWithListParserRuleCall_1() { return cAttrWithListParserRuleCall_1; }
	}

	public class AttrWithListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttrWithList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttrsAttrParserRuleCall_2_0 = (RuleCall)cAttrsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttrsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttrsAttrParserRuleCall_3_1_0 = (RuleCall)cAttrsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Attribute with a list of other attributes
		//AttrWithList:
		//	ident=IDENT "(" attrs+=Attr ("," attrs+=Attr)* ")";
		public ParserRule getRule() { return rule; }

		//ident=IDENT "(" attrs+=Attr ("," attrs+=Attr)* ")"
		public Group getGroup() { return cGroup; }

		//ident=IDENT
		public Assignment getIdentAssignment_0() { return cIdentAssignment_0; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0_0() { return cIdentIDENTTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//attrs+=Attr
		public Assignment getAttrsAssignment_2() { return cAttrsAssignment_2; }

		//Attr
		public RuleCall getAttrsAttrParserRuleCall_2_0() { return cAttrsAttrParserRuleCall_2_0; }

		//("," attrs+=Attr)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//attrs+=Attr
		public Assignment getAttrsAssignment_3_1() { return cAttrsAssignment_3_1; }

		//Attr
		public RuleCall getAttrsAttrParserRuleCall_3_1_0() { return cAttrsAttrParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class LiteralAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralAttr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueLiteralParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// An attribute with a literal value
		//LiteralAttr:
		//	ident=IDENT "=" value=Literal;
		public ParserRule getRule() { return rule; }

		//ident=IDENT "=" value=Literal
		public Group getGroup() { return cGroup; }

		//ident=IDENT
		public Assignment getIdentAssignment_0() { return cIdentAssignment_0; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0_0() { return cIdentIDENTTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Literal
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_2_0() { return cValueLiteralParserRuleCall_2_0; }
	}

	public class ItemAndAttrsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ItemAndAttrs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttrsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttrsItemAttrParserRuleCall_0_0 = (RuleCall)cAttrsAssignment_0.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemItemParserRuleCall_1_0 = (RuleCall)cItemAssignment_1.eContents().get(0);
		
		//// An item and any associated attributes
		//ItemAndAttrs:
		//	attrs+=ItemAttr* item=Item;
		public ParserRule getRule() { return rule; }

		//attrs+=ItemAttr* item=Item
		public Group getGroup() { return cGroup; }

		//attrs+=ItemAttr*
		public Assignment getAttrsAssignment_0() { return cAttrsAssignment_0; }

		//ItemAttr
		public RuleCall getAttrsItemAttrParserRuleCall_0_0() { return cAttrsItemAttrParserRuleCall_0_0; }

		//item=Item
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }

		//Item
		public RuleCall getItemItemParserRuleCall_1_0() { return cItemItemParserRuleCall_1_0; }
	}

	public class ItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Item");
		private final RuleCall cModItemParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Items within a module or crate
		//Item: // | FnItem | TypeItem | StructItem | EnumItem | StaticItem | TraitItem | ImplItem | ExternBlock
		//	ModItem;
		public ParserRule getRule() { return rule; }

		//// | FnItem | TypeItem | StructItem | EnumItem | StaticItem | TraitItem | ImplItem | ExternBlock
		//ModItem
		public RuleCall getModItemParserRuleCall() { return cModItemParserRuleCall; }
	}

	public class ModItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_1_0 = (RuleCall)cIdentAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		
		//// A module declaration item
		//ModItem:
		//	"mod" ident=IDENT (";" | "{" / * body = Mod * / "}");
		public ParserRule getRule() { return rule; }

		//"mod" ident=IDENT (";" | "{" / * body = Mod * / "}")
		public Group getGroup() { return cGroup; }

		//"mod"
		public Keyword getModKeyword_0() { return cModKeyword_0; }

		//ident=IDENT
		public Assignment getIdentAssignment_1() { return cIdentAssignment_1; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_1_0() { return cIdentIDENTTerminalRuleCall_1_0; }

		//";" | "{" / * body = Mod * / "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//"{" / * body = Mod * / "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		/// * body = Mod * / "}"
		public Keyword getRightCurlyBracketKeyword_2_1_1() { return cRightCurlyBracketKeyword_2_1_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharLitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Literal value
		//Literal:
		//	CharLit | // TODO | StringLit | NumberLit
		//	NumberLit;
		public ParserRule getRule() { return rule; }

		//CharLit | // TODO | StringLit | NumberLit
		//NumberLit
		public Alternatives getAlternatives() { return cAlternatives; }

		//CharLit
		public RuleCall getCharLitParserRuleCall_0() { return cCharLitParserRuleCall_0; }

		//// TODO | StringLit | NumberLit
		//NumberLit
		public RuleCall getNumberLitParserRuleCall_1() { return cNumberLitParserRuleCall_1; }
	}

	public class CharLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CharLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cCharAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cCharNON_SINGLE_QUOTETerminalRuleCall_1_0_0 = (RuleCall)cCharAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Assignment cCharAssignment_1_1_1_0 = (Assignment)cAlternatives_1_1_1.eContents().get(0);
		private final Keyword cCharApostropheKeyword_1_1_1_0_0 = (Keyword)cCharAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cEscapedCharAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final RuleCall cEscapedCharEscapedCharParserRuleCall_1_1_1_1_0 = (RuleCall)cEscapedCharAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// Single character literal
		//CharLit:
		//	"\'" (char=NON_SINGLE_QUOTE | "\\" (char="\'" | escapedChar=EscapedChar)) "\'";
		public ParserRule getRule() { return rule; }

		//"\'" (char=NON_SINGLE_QUOTE | "\\" (char="\'" | escapedChar=EscapedChar)) "\'"
		public Group getGroup() { return cGroup; }

		//"\'"
		public Keyword getApostropheKeyword_0() { return cApostropheKeyword_0; }

		//char=NON_SINGLE_QUOTE | "\\" (char="\'" | escapedChar=EscapedChar)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//char=NON_SINGLE_QUOTE
		public Assignment getCharAssignment_1_0() { return cCharAssignment_1_0; }

		//NON_SINGLE_QUOTE
		public RuleCall getCharNON_SINGLE_QUOTETerminalRuleCall_1_0_0() { return cCharNON_SINGLE_QUOTETerminalRuleCall_1_0_0; }

		//"\\" (char="\'" | escapedChar=EscapedChar)
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"\\"
		public Keyword getReverseSolidusKeyword_1_1_0() { return cReverseSolidusKeyword_1_1_0; }

		//char="\'" | escapedChar=EscapedChar
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//char="\'"
		public Assignment getCharAssignment_1_1_1_0() { return cCharAssignment_1_1_1_0; }

		//"\'"
		public Keyword getCharApostropheKeyword_1_1_1_0_0() { return cCharApostropheKeyword_1_1_1_0_0; }

		//escapedChar=EscapedChar
		public Assignment getEscapedCharAssignment_1_1_1_1() { return cEscapedCharAssignment_1_1_1_1; }

		//EscapedChar
		public RuleCall getEscapedCharEscapedCharParserRuleCall_1_1_1_1_0() { return cEscapedCharEscapedCharParserRuleCall_1_1_1_1_0; }

		//"\'"
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
	}

	public class EscapedCharElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EscapedChar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEscapedCharAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cCharAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cCharAlternatives_0_1_0 = (Alternatives)cCharAssignment_0_1.eContents().get(0);
		private final Keyword cCharReverseSolidusKeyword_0_1_0_0 = (Keyword)cCharAlternatives_0_1_0.eContents().get(0);
		private final Keyword cCharNKeyword_0_1_0_1 = (Keyword)cCharAlternatives_0_1_0.eContents().get(1);
		private final Keyword cCharRKeyword_0_1_0_2 = (Keyword)cCharAlternatives_0_1_0.eContents().get(2);
		private final Keyword cCharTKeyword_0_1_0_3 = (Keyword)cCharAlternatives_0_1_0.eContents().get(3);
		private final Keyword cChar0Keyword_0_1_0_4 = (Keyword)cCharAlternatives_0_1_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnicodeCharAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cXKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDigitsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDigitsHEX_DIGITTerminalRuleCall_1_2_0 = (RuleCall)cDigitsAssignment_1_2.eContents().get(0);
		private final Assignment cDigitsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cDigitsHEX_DIGITTerminalRuleCall_1_3_0 = (RuleCall)cDigitsAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cUnicodeCharAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cUKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cDigitsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cDigitsHEX_DIGITTerminalRuleCall_2_2_0 = (RuleCall)cDigitsAssignment_2_2.eContents().get(0);
		private final Assignment cDigitsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cDigitsHEX_DIGITTerminalRuleCall_2_3_0 = (RuleCall)cDigitsAssignment_2_3.eContents().get(0);
		private final Assignment cDigitsAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cDigitsHEX_DIGITTerminalRuleCall_2_4_0 = (RuleCall)cDigitsAssignment_2_4.eContents().get(0);
		private final Assignment cDigitsAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cDigitsHEX_DIGITTerminalRuleCall_2_5_0 = (RuleCall)cDigitsAssignment_2_5.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cUnicodeCharAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cUKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cDigitsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cDigitsHEX_DIGITTerminalRuleCall_3_2_0 = (RuleCall)cDigitsAssignment_3_2.eContents().get(0);
		private final Assignment cDigitsAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cDigitsHEX_DIGITTerminalRuleCall_3_3_0 = (RuleCall)cDigitsAssignment_3_3.eContents().get(0);
		private final Assignment cDigitsAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cDigitsHEX_DIGITTerminalRuleCall_3_4_0 = (RuleCall)cDigitsAssignment_3_4.eContents().get(0);
		private final Assignment cDigitsAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cDigitsHEX_DIGITTerminalRuleCall_3_5_0 = (RuleCall)cDigitsAssignment_3_5.eContents().get(0);
		private final Assignment cDigitsAssignment_3_6 = (Assignment)cGroup_3.eContents().get(6);
		private final RuleCall cDigitsHEX_DIGITTerminalRuleCall_3_6_0 = (RuleCall)cDigitsAssignment_3_6.eContents().get(0);
		private final Assignment cDigitsAssignment_3_7 = (Assignment)cGroup_3.eContents().get(7);
		private final RuleCall cDigitsHEX_DIGITTerminalRuleCall_3_7_0 = (RuleCall)cDigitsAssignment_3_7.eContents().get(0);
		private final Assignment cDigitsAssignment_3_8 = (Assignment)cGroup_3.eContents().get(8);
		private final RuleCall cDigitsHEX_DIGITTerminalRuleCall_3_8_0 = (RuleCall)cDigitsAssignment_3_8.eContents().get(0);
		private final Assignment cDigitsAssignment_3_9 = (Assignment)cGroup_3.eContents().get(9);
		private final RuleCall cDigitsHEX_DIGITTerminalRuleCall_3_9_0 = (RuleCall)cDigitsAssignment_3_9.eContents().get(0);
		
		//EscapedChar:
		//	{EscapedChar} char=("\\" | "n" | "r" | "t" | "0") | {UnicodeChar} "x" digits+=HEX_DIGIT digits+=HEX_DIGIT |
		//	{UnicodeChar} "u" digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT | {UnicodeChar} "U"
		//	digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT
		//	digits+=HEX_DIGIT digits+=HEX_DIGIT;
		public ParserRule getRule() { return rule; }

		//{EscapedChar} char=("\\" | "n" | "r" | "t" | "0") | {UnicodeChar} "x" digits+=HEX_DIGIT digits+=HEX_DIGIT |
		//{UnicodeChar} "u" digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT | {UnicodeChar} "U"
		//digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT
		//digits+=HEX_DIGIT digits+=HEX_DIGIT
		public Alternatives getAlternatives() { return cAlternatives; }

		//{EscapedChar} char=("\\" | "n" | "r" | "t" | "0")
		public Group getGroup_0() { return cGroup_0; }

		//{EscapedChar}
		public Action getEscapedCharAction_0_0() { return cEscapedCharAction_0_0; }

		//char=("\\" | "n" | "r" | "t" | "0")
		public Assignment getCharAssignment_0_1() { return cCharAssignment_0_1; }

		//"\\" | "n" | "r" | "t" | "0"
		public Alternatives getCharAlternatives_0_1_0() { return cCharAlternatives_0_1_0; }

		//"\\"
		public Keyword getCharReverseSolidusKeyword_0_1_0_0() { return cCharReverseSolidusKeyword_0_1_0_0; }

		//"n"
		public Keyword getCharNKeyword_0_1_0_1() { return cCharNKeyword_0_1_0_1; }

		//"r"
		public Keyword getCharRKeyword_0_1_0_2() { return cCharRKeyword_0_1_0_2; }

		//"t"
		public Keyword getCharTKeyword_0_1_0_3() { return cCharTKeyword_0_1_0_3; }

		//"0"
		public Keyword getChar0Keyword_0_1_0_4() { return cChar0Keyword_0_1_0_4; }

		//{UnicodeChar} "x" digits+=HEX_DIGIT digits+=HEX_DIGIT
		public Group getGroup_1() { return cGroup_1; }

		//{UnicodeChar}
		public Action getUnicodeCharAction_1_0() { return cUnicodeCharAction_1_0; }

		//"x"
		public Keyword getXKeyword_1_1() { return cXKeyword_1_1; }

		//digits+=HEX_DIGIT
		public Assignment getDigitsAssignment_1_2() { return cDigitsAssignment_1_2; }

		//HEX_DIGIT
		public RuleCall getDigitsHEX_DIGITTerminalRuleCall_1_2_0() { return cDigitsHEX_DIGITTerminalRuleCall_1_2_0; }

		//digits+=HEX_DIGIT
		public Assignment getDigitsAssignment_1_3() { return cDigitsAssignment_1_3; }

		//HEX_DIGIT
		public RuleCall getDigitsHEX_DIGITTerminalRuleCall_1_3_0() { return cDigitsHEX_DIGITTerminalRuleCall_1_3_0; }

		//{UnicodeChar} "u" digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT
		public Group getGroup_2() { return cGroup_2; }

		//{UnicodeChar}
		public Action getUnicodeCharAction_2_0() { return cUnicodeCharAction_2_0; }

		//"u"
		public Keyword getUKeyword_2_1() { return cUKeyword_2_1; }

		//digits+=HEX_DIGIT
		public Assignment getDigitsAssignment_2_2() { return cDigitsAssignment_2_2; }

		//HEX_DIGIT
		public RuleCall getDigitsHEX_DIGITTerminalRuleCall_2_2_0() { return cDigitsHEX_DIGITTerminalRuleCall_2_2_0; }

		//digits+=HEX_DIGIT
		public Assignment getDigitsAssignment_2_3() { return cDigitsAssignment_2_3; }

		//HEX_DIGIT
		public RuleCall getDigitsHEX_DIGITTerminalRuleCall_2_3_0() { return cDigitsHEX_DIGITTerminalRuleCall_2_3_0; }

		//digits+=HEX_DIGIT
		public Assignment getDigitsAssignment_2_4() { return cDigitsAssignment_2_4; }

		//HEX_DIGIT
		public RuleCall getDigitsHEX_DIGITTerminalRuleCall_2_4_0() { return cDigitsHEX_DIGITTerminalRuleCall_2_4_0; }

		//digits+=HEX_DIGIT
		public Assignment getDigitsAssignment_2_5() { return cDigitsAssignment_2_5; }

		//HEX_DIGIT
		public RuleCall getDigitsHEX_DIGITTerminalRuleCall_2_5_0() { return cDigitsHEX_DIGITTerminalRuleCall_2_5_0; }

		//{UnicodeChar} "U" digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT
		//digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT
		public Group getGroup_3() { return cGroup_3; }

		//{UnicodeChar}
		public Action getUnicodeCharAction_3_0() { return cUnicodeCharAction_3_0; }

		//"U"
		public Keyword getUKeyword_3_1() { return cUKeyword_3_1; }

		//digits+=HEX_DIGIT
		public Assignment getDigitsAssignment_3_2() { return cDigitsAssignment_3_2; }

		//HEX_DIGIT
		public RuleCall getDigitsHEX_DIGITTerminalRuleCall_3_2_0() { return cDigitsHEX_DIGITTerminalRuleCall_3_2_0; }

		//digits+=HEX_DIGIT
		public Assignment getDigitsAssignment_3_3() { return cDigitsAssignment_3_3; }

		//HEX_DIGIT
		public RuleCall getDigitsHEX_DIGITTerminalRuleCall_3_3_0() { return cDigitsHEX_DIGITTerminalRuleCall_3_3_0; }

		//digits+=HEX_DIGIT
		public Assignment getDigitsAssignment_3_4() { return cDigitsAssignment_3_4; }

		//HEX_DIGIT
		public RuleCall getDigitsHEX_DIGITTerminalRuleCall_3_4_0() { return cDigitsHEX_DIGITTerminalRuleCall_3_4_0; }

		//digits+=HEX_DIGIT
		public Assignment getDigitsAssignment_3_5() { return cDigitsAssignment_3_5; }

		//HEX_DIGIT
		public RuleCall getDigitsHEX_DIGITTerminalRuleCall_3_5_0() { return cDigitsHEX_DIGITTerminalRuleCall_3_5_0; }

		//digits+=HEX_DIGIT
		public Assignment getDigitsAssignment_3_6() { return cDigitsAssignment_3_6; }

		//HEX_DIGIT
		public RuleCall getDigitsHEX_DIGITTerminalRuleCall_3_6_0() { return cDigitsHEX_DIGITTerminalRuleCall_3_6_0; }

		//digits+=HEX_DIGIT
		public Assignment getDigitsAssignment_3_7() { return cDigitsAssignment_3_7; }

		//HEX_DIGIT
		public RuleCall getDigitsHEX_DIGITTerminalRuleCall_3_7_0() { return cDigitsHEX_DIGITTerminalRuleCall_3_7_0; }

		//digits+=HEX_DIGIT
		public Assignment getDigitsAssignment_3_8() { return cDigitsAssignment_3_8; }

		//HEX_DIGIT
		public RuleCall getDigitsHEX_DIGITTerminalRuleCall_3_8_0() { return cDigitsHEX_DIGITTerminalRuleCall_3_8_0; }

		//digits+=HEX_DIGIT
		public Assignment getDigitsAssignment_3_9() { return cDigitsAssignment_3_9; }

		//HEX_DIGIT
		public RuleCall getDigitsHEX_DIGITTerminalRuleCall_3_9_0() { return cDigitsHEX_DIGITTerminalRuleCall_3_9_0; }
	}

	public class NumberLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFloatLitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Numeric literal
		//// TODO Represent negatives here?
		//NumberLit:
		//	FloatLit | IntLit;
		public ParserRule getRule() { return rule; }

		//FloatLit | IntLit
		public Alternatives getAlternatives() { return cAlternatives; }

		//FloatLit
		public RuleCall getFloatLitParserRuleCall_0() { return cFloatLitParserRuleCall_0; }

		//IntLit
		public RuleCall getIntLitParserRuleCall_1() { return cIntLitParserRuleCall_1; }
	}

	public class FloatLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDigitsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDigitsDEC_DIGITTerminalRuleCall_0_0 = (RuleCall)cDigitsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDigitsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDigitsDEC_DIGITTerminalRuleCall_1_0_0 = (RuleCall)cDigitsAssignment_1_0.eContents().get(0);
		private final Keyword c_Keyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cDigitsAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cDigitsDEC_DIGITTerminalRuleCall_2_1_0_0 = (RuleCall)cDigitsAssignment_2_1_0.eContents().get(0);
		private final Keyword c_Keyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cEKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cEKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cPlusSignKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Assignment cNegativeExpAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final Keyword cNegativeExpHyphenMinusKeyword_3_1_1_0 = (Keyword)cNegativeExpAssignment_3_1_1.eContents().get(0);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cGroup_3.eContents().get(2);
		private final Assignment cDigitsAssignment_3_2_0 = (Assignment)cAlternatives_3_2.eContents().get(0);
		private final RuleCall cDigitsDEC_DIGITTerminalRuleCall_3_2_0_0 = (RuleCall)cDigitsAssignment_3_2_0.eContents().get(0);
		private final Keyword c_Keyword_3_2_1 = (Keyword)cAlternatives_3_2.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSizeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSizeFloatSizeEnumRuleCall_4_1_0 = (RuleCall)cSizeAssignment_4_1.eContents().get(0);
		
		//// Floating point literal
		//FloatLit:
		//	digits+=DEC_DIGIT (digits+=DEC_DIGIT | "_")* ("." (digits+=DEC_DIGIT | "_")+) (("E" | "e") ("+" | negativeExp?="-")?
		//	(digits+=DEC_DIGIT | "_")+)? ("f" size=FloatSize)?;
		public ParserRule getRule() { return rule; }

		//digits+=DEC_DIGIT (digits+=DEC_DIGIT | "_")* ("." (digits+=DEC_DIGIT | "_")+) (("E" | "e") ("+" | negativeExp?="-")?
		//(digits+=DEC_DIGIT | "_")+)? ("f" size=FloatSize)?
		public Group getGroup() { return cGroup; }

		//digits+=DEC_DIGIT
		public Assignment getDigitsAssignment_0() { return cDigitsAssignment_0; }

		//DEC_DIGIT
		public RuleCall getDigitsDEC_DIGITTerminalRuleCall_0_0() { return cDigitsDEC_DIGITTerminalRuleCall_0_0; }

		//(digits+=DEC_DIGIT | "_")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//digits+=DEC_DIGIT
		public Assignment getDigitsAssignment_1_0() { return cDigitsAssignment_1_0; }

		//DEC_DIGIT
		public RuleCall getDigitsDEC_DIGITTerminalRuleCall_1_0_0() { return cDigitsDEC_DIGITTerminalRuleCall_1_0_0; }

		//"_"
		public Keyword get_Keyword_1_1() { return c_Keyword_1_1; }

		//"." (digits+=DEC_DIGIT | "_")+
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//(digits+=DEC_DIGIT | "_")+
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//digits+=DEC_DIGIT
		public Assignment getDigitsAssignment_2_1_0() { return cDigitsAssignment_2_1_0; }

		//DEC_DIGIT
		public RuleCall getDigitsDEC_DIGITTerminalRuleCall_2_1_0_0() { return cDigitsDEC_DIGITTerminalRuleCall_2_1_0_0; }

		//"_"
		public Keyword get_Keyword_2_1_1() { return c_Keyword_2_1_1; }

		//(("E" | "e") ("+" | negativeExp?="-")? (digits+=DEC_DIGIT | "_")+)?
		public Group getGroup_3() { return cGroup_3; }

		//"E" | "e"
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//"E"
		public Keyword getEKeyword_3_0_0() { return cEKeyword_3_0_0; }

		//"e"
		public Keyword getEKeyword_3_0_1() { return cEKeyword_3_0_1; }

		//("+" | negativeExp?="-")?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//"+"
		public Keyword getPlusSignKeyword_3_1_0() { return cPlusSignKeyword_3_1_0; }

		//negativeExp?="-"
		public Assignment getNegativeExpAssignment_3_1_1() { return cNegativeExpAssignment_3_1_1; }

		//"-"
		public Keyword getNegativeExpHyphenMinusKeyword_3_1_1_0() { return cNegativeExpHyphenMinusKeyword_3_1_1_0; }

		//(digits+=DEC_DIGIT | "_")+
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }

		//digits+=DEC_DIGIT
		public Assignment getDigitsAssignment_3_2_0() { return cDigitsAssignment_3_2_0; }

		//DEC_DIGIT
		public RuleCall getDigitsDEC_DIGITTerminalRuleCall_3_2_0_0() { return cDigitsDEC_DIGITTerminalRuleCall_3_2_0_0; }

		//"_"
		public Keyword get_Keyword_3_2_1() { return c_Keyword_3_2_1; }

		//("f" size=FloatSize)?
		public Group getGroup_4() { return cGroup_4; }

		//"f"
		public Keyword getFKeyword_4_0() { return cFKeyword_4_0; }

		//size=FloatSize
		public Assignment getSizeAssignment_4_1() { return cSizeAssignment_4_1; }

		//FloatSize
		public RuleCall getSizeFloatSizeEnumRuleCall_4_1_0() { return cSizeFloatSizeEnumRuleCall_4_1_0; }
	}

	public class IntLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntLit");
		private final RuleCall cDecIntLitParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Integer literal
		//IntLit: // | BinIntLit | OctIntLit | HexIntLit
		//	DecIntLit;
		public ParserRule getRule() { return rule; }

		//// | BinIntLit | OctIntLit | HexIntLit
		//DecIntLit
		public RuleCall getDecIntLitParserRuleCall() { return cDecIntLitParserRuleCall; }
	}

	public class DecIntLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecIntLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDigitsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDigitsDEC_DIGITTerminalRuleCall_0_0 = (RuleCall)cDigitsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDigitsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDigitsDEC_DIGITTerminalRuleCall_1_0_0 = (RuleCall)cDigitsAssignment_1_0.eContents().get(0);
		private final Keyword c_Keyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cIKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Assignment cUnsignedAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final Keyword cUnsignedUKeyword_2_0_1_0 = (Keyword)cUnsignedAssignment_2_0_1.eContents().get(0);
		private final Assignment cSizeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSizeIntSizeEnumRuleCall_2_1_0 = (RuleCall)cSizeAssignment_2_1.eContents().get(0);
		
		//DecIntLit:
		//	digits+=DEC_DIGIT (digits+=DEC_DIGIT | "_")* (("i" | unsigned?="u") size=IntSize)?;
		public ParserRule getRule() { return rule; }

		//digits+=DEC_DIGIT (digits+=DEC_DIGIT | "_")* (("i" | unsigned?="u") size=IntSize)?
		public Group getGroup() { return cGroup; }

		//digits+=DEC_DIGIT
		public Assignment getDigitsAssignment_0() { return cDigitsAssignment_0; }

		//DEC_DIGIT
		public RuleCall getDigitsDEC_DIGITTerminalRuleCall_0_0() { return cDigitsDEC_DIGITTerminalRuleCall_0_0; }

		//(digits+=DEC_DIGIT | "_")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//digits+=DEC_DIGIT
		public Assignment getDigitsAssignment_1_0() { return cDigitsAssignment_1_0; }

		//DEC_DIGIT
		public RuleCall getDigitsDEC_DIGITTerminalRuleCall_1_0_0() { return cDigitsDEC_DIGITTerminalRuleCall_1_0_0; }

		//"_"
		public Keyword get_Keyword_1_1() { return c_Keyword_1_1; }

		//(("i" | unsigned?="u") size=IntSize)?
		public Group getGroup_2() { return cGroup_2; }

		//"i" | unsigned?="u"
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//"i"
		public Keyword getIKeyword_2_0_0() { return cIKeyword_2_0_0; }

		//unsigned?="u"
		public Assignment getUnsignedAssignment_2_0_1() { return cUnsignedAssignment_2_0_1; }

		//"u"
		public Keyword getUnsignedUKeyword_2_0_1_0() { return cUnsignedUKeyword_2_0_1_0; }

		//size=IntSize
		public Assignment getSizeAssignment_2_1() { return cSizeAssignment_2_1; }

		//IntSize
		public RuleCall getSizeIntSizeEnumRuleCall_2_1_0() { return cSizeIntSizeEnumRuleCall_2_1_0; }
	}
	
	
	public class FloatSizeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FloatSize");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFLOAT32Keyword_0_0 = (Keyword)cFLOATEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDOUBLE64Keyword_1_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_1.eContents().get(0);
		
		//// Valid sizes for floats
		//enum FloatSize:
		//	FLOAT="32" | DOUBLE="64";
		public EnumRule getRule() { return rule; }

		//FLOAT="32" | DOUBLE="64"
		public Alternatives getAlternatives() { return cAlternatives; }

		//FLOAT="32"
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_0() { return cFLOATEnumLiteralDeclaration_0; }

		//"32"
		public Keyword getFLOAT32Keyword_0_0() { return cFLOAT32Keyword_0_0; }

		//DOUBLE="64"
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_1() { return cDOUBLEEnumLiteralDeclaration_1; }

		//"64"
		public Keyword getDOUBLE64Keyword_1_0() { return cDOUBLE64Keyword_1_0; }
	}

	public class IntSizeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "IntSize");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBYTEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBYTE8Keyword_0_0 = (Keyword)cBYTEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSHORTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSHORT16Keyword_1_0 = (Keyword)cSHORTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINT32Keyword_2_0 = (Keyword)cINTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLONG64Keyword_3_0 = (Keyword)cLONGEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum IntSize:
		//	BYTE="8" | SHORT="16" | INT="32" | LONG="64";
		public EnumRule getRule() { return rule; }

		//BYTE="8" | SHORT="16" | INT="32" | LONG="64"
		public Alternatives getAlternatives() { return cAlternatives; }

		//BYTE="8"
		public EnumLiteralDeclaration getBYTEEnumLiteralDeclaration_0() { return cBYTEEnumLiteralDeclaration_0; }

		//"8"
		public Keyword getBYTE8Keyword_0_0() { return cBYTE8Keyword_0_0; }

		//SHORT="16"
		public EnumLiteralDeclaration getSHORTEnumLiteralDeclaration_1() { return cSHORTEnumLiteralDeclaration_1; }

		//"16"
		public Keyword getSHORT16Keyword_1_0() { return cSHORT16Keyword_1_0; }

		//INT="32"
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_2() { return cINTEnumLiteralDeclaration_2; }

		//"32"
		public Keyword getINT32Keyword_2_0() { return cINT32Keyword_2_0; }

		//LONG="64"
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_3() { return cLONGEnumLiteralDeclaration_3; }

		//"64"
		public Keyword getLONG64Keyword_3_0() { return cLONG64Keyword_3_0; }
	}
	
	private CrateElements pCrate;
	private ItemAttrElements pItemAttr;
	private AttrElements pAttr;
	private AttrWithListElements pAttrWithList;
	private LiteralAttrElements pLiteralAttr;
	private ItemAndAttrsElements pItemAndAttrs;
	private ItemElements pItem;
	private ModItemElements pModItem;
	private LiteralElements pLiteral;
	private CharLitElements pCharLit;
	private EscapedCharElements pEscapedChar;
	private NumberLitElements pNumberLit;
	private FloatLitElements pFloatLit;
	private FloatSizeElements unknownRuleFloatSize;
	private IntLitElements pIntLit;
	private DecIntLitElements pDecIntLit;
	private IntSizeElements unknownRuleIntSize;
	private TerminalRule tDEC_DIGIT;
	private TerminalRule tHEX_DIGIT;
	private TerminalRule tXID_START;
	private TerminalRule tXID_CONTINUE;
	private TerminalRule tIDENT;
	private TerminalRule tNON_SINGLE_QUOTE;
	
	private final Grammar grammar;

	@Inject
	public RustGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.redoxi.ruste.Rust".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//// Top level crate and its implicit module
	//Crate:
	//	items+=ItemAndAttrs*;
	public CrateElements getCrateAccess() {
		return (pCrate != null) ? pCrate : (pCrate = new CrateElements());
	}
	
	public ParserRule getCrateRule() {
		return getCrateAccess().getRule();
	}

	//// Attribute for an item
	//ItemAttr:
	//	"#[" attrs+=Attr ("," attrs+=Attr)* "]";
	public ItemAttrElements getItemAttrAccess() {
		return (pItemAttr != null) ? pItemAttr : (pItemAttr = new ItemAttrElements());
	}
	
	public ParserRule getItemAttrRule() {
		return getItemAttrAccess().getRule();
	}

	//// Individual attribute within an item
	//Attr:
	//	LiteralAttr | AttrWithList;
	public AttrElements getAttrAccess() {
		return (pAttr != null) ? pAttr : (pAttr = new AttrElements());
	}
	
	public ParserRule getAttrRule() {
		return getAttrAccess().getRule();
	}

	//// Attribute with a list of other attributes
	//AttrWithList:
	//	ident=IDENT "(" attrs+=Attr ("," attrs+=Attr)* ")";
	public AttrWithListElements getAttrWithListAccess() {
		return (pAttrWithList != null) ? pAttrWithList : (pAttrWithList = new AttrWithListElements());
	}
	
	public ParserRule getAttrWithListRule() {
		return getAttrWithListAccess().getRule();
	}

	//// An attribute with a literal value
	//LiteralAttr:
	//	ident=IDENT "=" value=Literal;
	public LiteralAttrElements getLiteralAttrAccess() {
		return (pLiteralAttr != null) ? pLiteralAttr : (pLiteralAttr = new LiteralAttrElements());
	}
	
	public ParserRule getLiteralAttrRule() {
		return getLiteralAttrAccess().getRule();
	}

	//// An item and any associated attributes
	//ItemAndAttrs:
	//	attrs+=ItemAttr* item=Item;
	public ItemAndAttrsElements getItemAndAttrsAccess() {
		return (pItemAndAttrs != null) ? pItemAndAttrs : (pItemAndAttrs = new ItemAndAttrsElements());
	}
	
	public ParserRule getItemAndAttrsRule() {
		return getItemAndAttrsAccess().getRule();
	}

	//// Items within a module or crate
	//Item: // | FnItem | TypeItem | StructItem | EnumItem | StaticItem | TraitItem | ImplItem | ExternBlock
	//	ModItem;
	public ItemElements getItemAccess() {
		return (pItem != null) ? pItem : (pItem = new ItemElements());
	}
	
	public ParserRule getItemRule() {
		return getItemAccess().getRule();
	}

	//// A module declaration item
	//ModItem:
	//	"mod" ident=IDENT (";" | "{" / * body = Mod * / "}");
	public ModItemElements getModItemAccess() {
		return (pModItem != null) ? pModItem : (pModItem = new ModItemElements());
	}
	
	public ParserRule getModItemRule() {
		return getModItemAccess().getRule();
	}

	//// Literal value
	//Literal:
	//	CharLit | // TODO | StringLit | NumberLit
	//	NumberLit;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//// Single character literal
	//CharLit:
	//	"\'" (char=NON_SINGLE_QUOTE | "\\" (char="\'" | escapedChar=EscapedChar)) "\'";
	public CharLitElements getCharLitAccess() {
		return (pCharLit != null) ? pCharLit : (pCharLit = new CharLitElements());
	}
	
	public ParserRule getCharLitRule() {
		return getCharLitAccess().getRule();
	}

	//EscapedChar:
	//	{EscapedChar} char=("\\" | "n" | "r" | "t" | "0") | {UnicodeChar} "x" digits+=HEX_DIGIT digits+=HEX_DIGIT |
	//	{UnicodeChar} "u" digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT | {UnicodeChar} "U"
	//	digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT digits+=HEX_DIGIT
	//	digits+=HEX_DIGIT digits+=HEX_DIGIT;
	public EscapedCharElements getEscapedCharAccess() {
		return (pEscapedChar != null) ? pEscapedChar : (pEscapedChar = new EscapedCharElements());
	}
	
	public ParserRule getEscapedCharRule() {
		return getEscapedCharAccess().getRule();
	}

	//// Numeric literal
	//// TODO Represent negatives here?
	//NumberLit:
	//	FloatLit | IntLit;
	public NumberLitElements getNumberLitAccess() {
		return (pNumberLit != null) ? pNumberLit : (pNumberLit = new NumberLitElements());
	}
	
	public ParserRule getNumberLitRule() {
		return getNumberLitAccess().getRule();
	}

	//// Floating point literal
	//FloatLit:
	//	digits+=DEC_DIGIT (digits+=DEC_DIGIT | "_")* ("." (digits+=DEC_DIGIT | "_")+) (("E" | "e") ("+" | negativeExp?="-")?
	//	(digits+=DEC_DIGIT | "_")+)? ("f" size=FloatSize)?;
	public FloatLitElements getFloatLitAccess() {
		return (pFloatLit != null) ? pFloatLit : (pFloatLit = new FloatLitElements());
	}
	
	public ParserRule getFloatLitRule() {
		return getFloatLitAccess().getRule();
	}

	//// Valid sizes for floats
	//enum FloatSize:
	//	FLOAT="32" | DOUBLE="64";
	public FloatSizeElements getFloatSizeAccess() {
		return (unknownRuleFloatSize != null) ? unknownRuleFloatSize : (unknownRuleFloatSize = new FloatSizeElements());
	}
	
	public EnumRule getFloatSizeRule() {
		return getFloatSizeAccess().getRule();
	}

	//// Integer literal
	//IntLit: // | BinIntLit | OctIntLit | HexIntLit
	//	DecIntLit;
	public IntLitElements getIntLitAccess() {
		return (pIntLit != null) ? pIntLit : (pIntLit = new IntLitElements());
	}
	
	public ParserRule getIntLitRule() {
		return getIntLitAccess().getRule();
	}

	//DecIntLit:
	//	digits+=DEC_DIGIT (digits+=DEC_DIGIT | "_")* (("i" | unsigned?="u") size=IntSize)?;
	public DecIntLitElements getDecIntLitAccess() {
		return (pDecIntLit != null) ? pDecIntLit : (pDecIntLit = new DecIntLitElements());
	}
	
	public ParserRule getDecIntLitRule() {
		return getDecIntLitAccess().getRule();
	}

	//enum IntSize:
	//	BYTE="8" | SHORT="16" | INT="32" | LONG="64";
	public IntSizeElements getIntSizeAccess() {
		return (unknownRuleIntSize != null) ? unknownRuleIntSize : (unknownRuleIntSize = new IntSizeElements());
	}
	
	public EnumRule getIntSizeRule() {
		return getIntSizeAccess().getRule();
	}

	/// *NumberLit:
	//	digits += NON_ZERO_DEC (digits += DEC_DIGIT | '_')* suffix = NumSuffix? |
	//	digits += '0' ( (digits += DEC_DIGIT | '_')* suffix = NumSuffix? |
	//				radix = 'b' (digits += '0' | digits += '1' | '_')+ suffix = IntSuffix? |
	//				radix = 'o' (digits += OCT_DIGIT | '_')+ suffix = IntSuffix? |
	//				radix = 'x' (digits+=HEX_DIGIT | '_')+ suffix = IntSuffix?
	//			)
	//;* / terminal DEC_DIGIT:
	//	"0".."9";
	public TerminalRule getDEC_DIGITRule() {
		return (tDEC_DIGIT != null) ? tDEC_DIGIT : (tDEC_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DEC_DIGIT"));
	} 

	//terminal HEX_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getHEX_DIGITRule() {
		return (tHEX_DIGIT != null) ? tHEX_DIGIT : (tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_DIGIT"));
	} 

	//// TODO Expand
	//terminal fragment XID_START:
	//	"a".."z";
	public TerminalRule getXID_STARTRule() {
		return (tXID_START != null) ? tXID_START : (tXID_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XID_START"));
	} 

	//// TODO Expand
	//terminal fragment XID_CONTINUE:
	//	"a".."z" | "_";
	public TerminalRule getXID_CONTINUERule() {
		return (tXID_CONTINUE != null) ? tXID_CONTINUE : (tXID_CONTINUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XID_CONTINUE"));
	} 

	//terminal IDENT:
	//	XID_START XID_CONTINUE*;
	public TerminalRule getIDENTRule() {
		return (tIDENT != null) ? tIDENT : (tIDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENT"));
	} 

	//terminal NON_SINGLE_QUOTE:
	//	!"\'";
	public TerminalRule getNON_SINGLE_QUOTERule() {
		return (tNON_SINGLE_QUOTE != null) ? tNON_SINGLE_QUOTE : (tNON_SINGLE_QUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NON_SINGLE_QUOTE"));
	} 
}

/*
* generated by Xtext
*/
package de.redoxi.ruste.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class RustGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CrateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Crate");
		private final Assignment cItemsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cItemsItemAndAttrsParserRuleCall_0 = (RuleCall)cItemsAssignment.eContents().get(0);
		
		//// Top level crate and its implicit module
		//Crate:
		//	items+=ItemAndAttrs*;
		public ParserRule getRule() { return rule; }

		//items+=ItemAndAttrs*
		public Assignment getItemsAssignment() { return cItemsAssignment; }

		//ItemAndAttrs
		public RuleCall getItemsItemAndAttrsParserRuleCall_0() { return cItemsItemAndAttrsParserRuleCall_0; }
	}

	public class ItemAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ItemAttr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttrsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttrsAttrParserRuleCall_1_0 = (RuleCall)cAttrsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttrsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttrsAttrParserRuleCall_2_1_0 = (RuleCall)cAttrsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Attribute for an item
		//ItemAttr:
		//	"#[" attrs+=Attr ("," attrs+=Attr)* "]";
		public ParserRule getRule() { return rule; }

		//"#[" attrs+=Attr ("," attrs+=Attr)* "]"
		public Group getGroup() { return cGroup; }

		//"#["
		public Keyword getNumberSignLeftSquareBracketKeyword_0() { return cNumberSignLeftSquareBracketKeyword_0; }

		//attrs+=Attr
		public Assignment getAttrsAssignment_1() { return cAttrsAssignment_1; }

		//Attr
		public RuleCall getAttrsAttrParserRuleCall_1_0() { return cAttrsAttrParserRuleCall_1_0; }

		//("," attrs+=Attr)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//attrs+=Attr
		public Assignment getAttrsAssignment_2_1() { return cAttrsAssignment_2_1; }

		//Attr
		public RuleCall getAttrsAttrParserRuleCall_2_1_0() { return cAttrsAttrParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class AttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralAttrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttrWithListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Individual attribute within an item
		//Attr:
		//	LiteralAttr | AttrWithList;
		public ParserRule getRule() { return rule; }

		//LiteralAttr | AttrWithList
		public Alternatives getAlternatives() { return cAlternatives; }

		//LiteralAttr
		public RuleCall getLiteralAttrParserRuleCall_0() { return cLiteralAttrParserRuleCall_0; }

		//AttrWithList
		public RuleCall getAttrWithListParserRuleCall_1() { return cAttrWithListParserRuleCall_1; }
	}

	public class AttrWithListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttrWithList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttrsAttrParserRuleCall_2_0 = (RuleCall)cAttrsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttrsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttrsAttrParserRuleCall_3_1_0 = (RuleCall)cAttrsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Attribute with a list of other attributes
		//AttrWithList:
		//	ident=IDENT "(" attrs+=Attr ("," attrs+=Attr)* ")";
		public ParserRule getRule() { return rule; }

		//ident=IDENT "(" attrs+=Attr ("," attrs+=Attr)* ")"
		public Group getGroup() { return cGroup; }

		//ident=IDENT
		public Assignment getIdentAssignment_0() { return cIdentAssignment_0; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0_0() { return cIdentIDENTTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//attrs+=Attr
		public Assignment getAttrsAssignment_2() { return cAttrsAssignment_2; }

		//Attr
		public RuleCall getAttrsAttrParserRuleCall_2_0() { return cAttrsAttrParserRuleCall_2_0; }

		//("," attrs+=Attr)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//attrs+=Attr
		public Assignment getAttrsAssignment_3_1() { return cAttrsAssignment_3_1; }

		//Attr
		public RuleCall getAttrsAttrParserRuleCall_3_1_0() { return cAttrsAttrParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class LiteralAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralAttr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueLiteralParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// An attribute with a literal value
		//LiteralAttr:
		//	ident=IDENT "=" value=Literal;
		public ParserRule getRule() { return rule; }

		//ident=IDENT "=" value=Literal
		public Group getGroup() { return cGroup; }

		//ident=IDENT
		public Assignment getIdentAssignment_0() { return cIdentAssignment_0; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0_0() { return cIdentIDENTTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Literal
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_2_0() { return cValueLiteralParserRuleCall_2_0; }
	}

	public class ItemAndAttrsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ItemAndAttrs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttrsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttrsItemAttrParserRuleCall_0_0 = (RuleCall)cAttrsAssignment_0.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemItemParserRuleCall_1_0 = (RuleCall)cItemAssignment_1.eContents().get(0);
		
		//// An item and any associated attributes
		//ItemAndAttrs:
		//	attrs+=ItemAttr* item=Item;
		public ParserRule getRule() { return rule; }

		//attrs+=ItemAttr* item=Item
		public Group getGroup() { return cGroup; }

		//attrs+=ItemAttr*
		public Assignment getAttrsAssignment_0() { return cAttrsAssignment_0; }

		//ItemAttr
		public RuleCall getAttrsItemAttrParserRuleCall_0_0() { return cAttrsItemAttrParserRuleCall_0_0; }

		//item=Item
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }

		//Item
		public RuleCall getItemItemParserRuleCall_1_0() { return cItemItemParserRuleCall_1_0; }
	}

	public class ItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Item");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModItemParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFnItemParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Items within a module or crate
		//Item:
		//	ModItem | // | TypeItem | StructItem | EnumItem | StaticItem | TraitItem | ImplItem | ExternBlock
		//	FnItem;
		public ParserRule getRule() { return rule; }

		//ModItem | // | TypeItem | StructItem | EnumItem | StaticItem | TraitItem | ImplItem | ExternBlock
		//FnItem
		public Alternatives getAlternatives() { return cAlternatives; }

		//ModItem
		public RuleCall getModItemParserRuleCall_0() { return cModItemParserRuleCall_0; }

		//// | TypeItem | StructItem | EnumItem | StaticItem | TraitItem | ImplItem | ExternBlock
		//FnItem
		public RuleCall getFnItemParserRuleCall_1() { return cFnItemParserRuleCall_1; }
	}

	public class ModItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_1_0 = (RuleCall)cIdentAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExternalBodyAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cExternalBodySemicolonKeyword_2_0_0 = (Keyword)cExternalBodyAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cItemsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cItemsItemAndAttrsParserRuleCall_2_1_1_0 = (RuleCall)cItemsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//// A module declaration item
		//ModItem:
		//	"mod" ident=IDENT (externalBody?=";" | "{" items+=ItemAndAttrs* "}");
		public ParserRule getRule() { return rule; }

		//"mod" ident=IDENT (externalBody?=";" | "{" items+=ItemAndAttrs* "}")
		public Group getGroup() { return cGroup; }

		//"mod"
		public Keyword getModKeyword_0() { return cModKeyword_0; }

		//ident=IDENT
		public Assignment getIdentAssignment_1() { return cIdentAssignment_1; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_1_0() { return cIdentIDENTTerminalRuleCall_1_0; }

		//externalBody?=";" | "{" items+=ItemAndAttrs* "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//externalBody?=";"
		public Assignment getExternalBodyAssignment_2_0() { return cExternalBodyAssignment_2_0; }

		//";"
		public Keyword getExternalBodySemicolonKeyword_2_0_0() { return cExternalBodySemicolonKeyword_2_0_0; }

		//"{" items+=ItemAndAttrs* "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//items+=ItemAndAttrs*
		public Assignment getItemsAssignment_2_1_1() { return cItemsAssignment_2_1_1; }

		//ItemAndAttrs
		public RuleCall getItemsItemAndAttrsParserRuleCall_2_1_1_0() { return cItemsItemAndAttrsParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}

	public class FnItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FnItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_1_0 = (RuleCall)cIdentAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cArgsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cArgsArgParserRuleCall_4_0_0 = (RuleCall)cArgsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cArgsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_4_1_1_0 = (RuleCall)cArgsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cReturnTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cReturnTypeTypeParserRuleCall_6_1_0 = (RuleCall)cReturnTypeAssignment_6_1.eContents().get(0);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyBlockParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//// Function item
		//FnItem:
		//	"fn" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "(" (args+=Arg ("," args+=Arg)*)?
		//	")" ("->" returnType=Type)? body=Block;
		public ParserRule getRule() { return rule; }

		//"fn" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "(" (args+=Arg ("," args+=Arg)*)?
		//")" ("->" returnType=Type)? body=Block
		public Group getGroup() { return cGroup; }

		//"fn"
		public Keyword getFnKeyword_0() { return cFnKeyword_0; }

		//ident=IDENT
		public Assignment getIdentAssignment_1() { return cIdentAssignment_1; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_1_0() { return cIdentIDENTTerminalRuleCall_1_0; }

		//("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_2_1_0() { return cParamsGenericParamDeclParserRuleCall_2_1_0; }

		//("," params+=GenericParamDecl)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_2_2_1_0() { return cParamsGenericParamDeclParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(args+=Arg ("," args+=Arg)*)?
		public Group getGroup_4() { return cGroup_4; }

		//args+=Arg
		public Assignment getArgsAssignment_4_0() { return cArgsAssignment_4_0; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_4_0_0() { return cArgsArgParserRuleCall_4_0_0; }

		//("," args+=Arg)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//args+=Arg
		public Assignment getArgsAssignment_4_1_1() { return cArgsAssignment_4_1_1; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_4_1_1_0() { return cArgsArgParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//("->" returnType=Type)?
		public Group getGroup_6() { return cGroup_6; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_6_0() { return cHyphenMinusGreaterThanSignKeyword_6_0; }

		//returnType=Type
		public Assignment getReturnTypeAssignment_6_1() { return cReturnTypeAssignment_6_1; }

		//Type
		public RuleCall getReturnTypeTypeParserRuleCall_6_1_0() { return cReturnTypeTypeParserRuleCall_6_1_0; }

		//body=Block
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_7_0() { return cBodyBlockParserRuleCall_7_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Block:
		//	"{" / * TODO Statements, expression * / "}";
		public ParserRule getRule() { return rule; }

		//"{" / * TODO Statements, expression * / "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		/// * TODO Statements, expression * / "}"
		public Keyword getRightCurlyBracketKeyword_1() { return cRightCurlyBracketKeyword_1; }
	}

	public class GenericParamDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenericParamDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBoundsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBoundsIDENTTerminalRuleCall_1_1_0 = (RuleCall)cBoundsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cPlusSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cBoundsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cBoundsIDENTTerminalRuleCall_1_2_1_0 = (RuleCall)cBoundsAssignment_1_2_1.eContents().get(0);
		
		//// TODO Crossreference Trait?
		//GenericParamDecl:
		//	ident=IDENT (":" bounds+=IDENT ("+" bounds+=IDENT))?;
		public ParserRule getRule() { return rule; }

		//ident=IDENT (":" bounds+=IDENT ("+" bounds+=IDENT))?
		public Group getGroup() { return cGroup; }

		//ident=IDENT
		public Assignment getIdentAssignment_0() { return cIdentAssignment_0; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0_0() { return cIdentIDENTTerminalRuleCall_0_0; }

		//(":" bounds+=IDENT ("+" bounds+=IDENT))?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//bounds+=IDENT
		public Assignment getBoundsAssignment_1_1() { return cBoundsAssignment_1_1; }

		//IDENT
		public RuleCall getBoundsIDENTTerminalRuleCall_1_1_0() { return cBoundsIDENTTerminalRuleCall_1_1_0; }

		//"+" bounds+=IDENT
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"+"
		public Keyword getPlusSignKeyword_1_2_0() { return cPlusSignKeyword_1_2_0; }

		//bounds+=IDENT
		public Assignment getBoundsAssignment_1_2_1() { return cBoundsAssignment_1_2_1; }

		//IDENT
		public RuleCall getBoundsIDENTTerminalRuleCall_1_2_1_0() { return cBoundsIDENTTerminalRuleCall_1_2_1_0; }
	}

	public class ArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPatPatParserRuleCall_0_0 = (RuleCall)cPatAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Arg:
		//	pat=Pat ":" type=Type;
		public ParserRule getRule() { return rule; }

		//pat=Pat ":" type=Type
		public Group getGroup() { return cGroup; }

		//pat=Pat
		public Assignment getPatAssignment_0() { return cPatAssignment_0; }

		//Pat
		public RuleCall getPatPatParserRuleCall_0_0() { return cPatPatParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}

	public class PatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pat");
		private final Assignment cIdentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_0 = (RuleCall)cIdentAssignment.eContents().get(0);
		
		//// TODO Expand
		//Pat:
		//	ident=IDENT;
		public ParserRule getRule() { return rule; }

		//ident=IDENT
		public Assignment getIdentAssignment() { return cIdentAssignment; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0() { return cIdentIDENTTerminalRuleCall_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTupleTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStructTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Type:
		//	PrimitiveType | TupleType | StructType | EnumType;
		public ParserRule getRule() { return rule; }

		//PrimitiveType | TupleType | StructType | EnumType
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }

		//TupleType
		public RuleCall getTupleTypeParserRuleCall_1() { return cTupleTypeParserRuleCall_1; }

		//StructType
		public RuleCall getStructTypeParserRuleCall_2() { return cStructTypeParserRuleCall_2; }

		//EnumType
		public RuleCall getEnumTypeParserRuleCall_3() { return cEnumTypeParserRuleCall_3; }
	}

	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cINT_TYPETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFloatTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cFLOAT_TYPETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cBOOLEAN_TYPETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cMachineTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cMACHINE_TYPETerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cUnitTypeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cUNIT_TYPETerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//PrimitiveType:
		//	{IntType} INT_TYPE | {FloatType} FLOAT_TYPE | {BoolType} BOOLEAN_TYPE | {MachineType} MACHINE_TYPE | {UnitType}
		//	UNIT_TYPE;
		public ParserRule getRule() { return rule; }

		//{IntType} INT_TYPE | {FloatType} FLOAT_TYPE | {BoolType} BOOLEAN_TYPE | {MachineType} MACHINE_TYPE | {UnitType}
		//UNIT_TYPE
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntType} INT_TYPE
		public Group getGroup_0() { return cGroup_0; }

		//{IntType}
		public Action getIntTypeAction_0_0() { return cIntTypeAction_0_0; }

		//INT_TYPE
		public RuleCall getINT_TYPETerminalRuleCall_0_1() { return cINT_TYPETerminalRuleCall_0_1; }

		//{FloatType} FLOAT_TYPE
		public Group getGroup_1() { return cGroup_1; }

		//{FloatType}
		public Action getFloatTypeAction_1_0() { return cFloatTypeAction_1_0; }

		//FLOAT_TYPE
		public RuleCall getFLOAT_TYPETerminalRuleCall_1_1() { return cFLOAT_TYPETerminalRuleCall_1_1; }

		//{BoolType} BOOLEAN_TYPE
		public Group getGroup_2() { return cGroup_2; }

		//{BoolType}
		public Action getBoolTypeAction_2_0() { return cBoolTypeAction_2_0; }

		//BOOLEAN_TYPE
		public RuleCall getBOOLEAN_TYPETerminalRuleCall_2_1() { return cBOOLEAN_TYPETerminalRuleCall_2_1; }

		//{MachineType} MACHINE_TYPE
		public Group getGroup_3() { return cGroup_3; }

		//{MachineType}
		public Action getMachineTypeAction_3_0() { return cMachineTypeAction_3_0; }

		//MACHINE_TYPE
		public RuleCall getMACHINE_TYPETerminalRuleCall_3_1() { return cMACHINE_TYPETerminalRuleCall_3_1; }

		//{UnitType} UNIT_TYPE
		public Group getGroup_4() { return cGroup_4; }

		//{UnitType}
		public Action getUnitTypeAction_4_0() { return cUnitTypeAction_4_0; }

		//UNIT_TYPE
		public RuleCall getUNIT_TYPETerminalRuleCall_4_1() { return cUNIT_TYPETerminalRuleCall_4_1; }
	}

	public class TupleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TupleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_2_1_0 = (RuleCall)cTypesAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TupleType:
		//	"(" types+=Type ("," types+=Type)* ")";
		public ParserRule getRule() { return rule; }

		//"(" types+=Type ("," types+=Type)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//types+=Type
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_1_0() { return cTypesTypeParserRuleCall_1_0; }

		//("," types+=Type)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//types+=Type
		public Assignment getTypesAssignment_2_1() { return cTypesAssignment_2_1; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_2_1_0() { return cTypesTypeParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class StructTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_1_0 = (RuleCall)cIdentAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFieldsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFieldsStructFieldParserRuleCall_4_0 = (RuleCall)cFieldsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFieldsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFieldsStructFieldParserRuleCall_5_1_0 = (RuleCall)cFieldsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// TODO Move generics to own rule, but attach here
		//StructType:
		//	"struct" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" fields+=StructField (","
		//	fields+=StructField)* "}";
		public ParserRule getRule() { return rule; }

		//"struct" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" fields+=StructField (","
		//fields+=StructField)* "}"
		public Group getGroup() { return cGroup; }

		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }

		//ident=IDENT
		public Assignment getIdentAssignment_1() { return cIdentAssignment_1; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_1_0() { return cIdentIDENTTerminalRuleCall_1_0; }

		//("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_2_1_0() { return cParamsGenericParamDeclParserRuleCall_2_1_0; }

		//("," params+=GenericParamDecl)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_2_2_1_0() { return cParamsGenericParamDeclParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//fields+=StructField
		public Assignment getFieldsAssignment_4() { return cFieldsAssignment_4; }

		//StructField
		public RuleCall getFieldsStructFieldParserRuleCall_4_0() { return cFieldsStructFieldParserRuleCall_4_0; }

		//("," fields+=StructField)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//fields+=StructField
		public Assignment getFieldsAssignment_5_1() { return cFieldsAssignment_5_1; }

		//StructField
		public RuleCall getFieldsStructFieldParserRuleCall_5_1_0() { return cFieldsStructFieldParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class StructFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisVisibilityEnumRuleCall_0_0 = (RuleCall)cVisAssignment_0.eContents().get(0);
		private final Assignment cIdentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_1_0 = (RuleCall)cIdentAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//StructField:
		//	vis=Visibility? ident=IDENT ":" type=Type;
		public ParserRule getRule() { return rule; }

		//vis=Visibility? ident=IDENT ":" type=Type
		public Group getGroup() { return cGroup; }

		//vis=Visibility?
		public Assignment getVisAssignment_0() { return cVisAssignment_0; }

		//Visibility
		public RuleCall getVisVisibilityEnumRuleCall_0_0() { return cVisVisibilityEnumRuleCall_0_0; }

		//ident=IDENT
		public Assignment getIdentAssignment_1() { return cIdentAssignment_1; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_1_0() { return cIdentIDENTTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}

	public class EnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_1_0 = (RuleCall)cIdentAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVariantsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariantsVariantParserRuleCall_4_0 = (RuleCall)cVariantsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVariantsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVariantsVariantParserRuleCall_5_1_0 = (RuleCall)cVariantsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EnumType:
		//	"enum" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" variants+=Variant (","
		//	variants+=Variant)* "}";
		public ParserRule getRule() { return rule; }

		//"enum" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" variants+=Variant (","
		//variants+=Variant)* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//ident=IDENT
		public Assignment getIdentAssignment_1() { return cIdentAssignment_1; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_1_0() { return cIdentIDENTTerminalRuleCall_1_0; }

		//("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_2_1_0() { return cParamsGenericParamDeclParserRuleCall_2_1_0; }

		//("," params+=GenericParamDecl)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_2_2_1_0() { return cParamsGenericParamDeclParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//variants+=Variant
		public Assignment getVariantsAssignment_4() { return cVariantsAssignment_4; }

		//Variant
		public RuleCall getVariantsVariantParserRuleCall_4_0() { return cVariantsVariantParserRuleCall_4_0; }

		//("," variants+=Variant)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//variants+=Variant
		public Assignment getVariantsAssignment_5_1() { return cVariantsAssignment_5_1; }

		//Variant
		public RuleCall getVariantsVariantParserRuleCall_5_1_0() { return cVariantsVariantParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class VariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructVariantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTupleVariantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnitVariantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Variant:
		//	StructVariant | TupleVariant | UnitVariant;
		public ParserRule getRule() { return rule; }

		//StructVariant | TupleVariant | UnitVariant
		public Alternatives getAlternatives() { return cAlternatives; }

		//StructVariant
		public RuleCall getStructVariantParserRuleCall_0() { return cStructVariantParserRuleCall_0; }

		//TupleVariant
		public RuleCall getTupleVariantParserRuleCall_1() { return cTupleVariantParserRuleCall_1; }

		//UnitVariant
		public RuleCall getUnitVariantParserRuleCall_2() { return cUnitVariantParserRuleCall_2; }
	}

	public class StructVariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructVariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParamsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_1_2_1_0 = (RuleCall)cParamsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsStructFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFieldsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFieldsStructFieldParserRuleCall_4_1_0 = (RuleCall)cFieldsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StructVariant:
		//	ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" fields+=StructField (","
		//	fields+=StructField)* "}";
		public ParserRule getRule() { return rule; }

		//ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" fields+=StructField (","
		//fields+=StructField)* "}"
		public Group getGroup() { return cGroup; }

		//ident=IDENT
		public Assignment getIdentAssignment_0() { return cIdentAssignment_0; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0_0() { return cIdentIDENTTerminalRuleCall_0_0; }

		//("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_1_1_0() { return cParamsGenericParamDeclParserRuleCall_1_1_0; }

		//("," params+=GenericParamDecl)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_1_2_1() { return cParamsAssignment_1_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_1_2_1_0() { return cParamsGenericParamDeclParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//fields+=StructField
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }

		//StructField
		public RuleCall getFieldsStructFieldParserRuleCall_3_0() { return cFieldsStructFieldParserRuleCall_3_0; }

		//("," fields+=StructField)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//fields+=StructField
		public Assignment getFieldsAssignment_4_1() { return cFieldsAssignment_4_1; }

		//StructField
		public RuleCall getFieldsStructFieldParserRuleCall_4_1_0() { return cFieldsStructFieldParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TupleVariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TupleVariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypesTypeParserRuleCall_2_0 = (RuleCall)cTypesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_3_1_0 = (RuleCall)cTypesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TupleVariant:
		//	ident=IDENT "(" types+=Type ("," types+=Type)* ")";
		public ParserRule getRule() { return rule; }

		//ident=IDENT "(" types+=Type ("," types+=Type)* ")"
		public Group getGroup() { return cGroup; }

		//ident=IDENT
		public Assignment getIdentAssignment_0() { return cIdentAssignment_0; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0_0() { return cIdentIDENTTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//types+=Type
		public Assignment getTypesAssignment_2() { return cTypesAssignment_2; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_2_0() { return cTypesTypeParserRuleCall_2_0; }

		//("," types+=Type)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//types+=Type
		public Assignment getTypesAssignment_3_1() { return cTypesAssignment_3_1; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_3_1_0() { return cTypesTypeParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class UnitVariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitVariant");
		private final Assignment cIdentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_0 = (RuleCall)cIdentAssignment.eContents().get(0);
		
		//UnitVariant:
		//	ident=IDENT;
		public ParserRule getRule() { return rule; }

		//ident=IDENT
		public Assignment getIdentAssignment() { return cIdentAssignment; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0() { return cIdentIDENTTerminalRuleCall_0; }
	}

	public class StringLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLit");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRING_LITTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//// | {RawStringLit} 'r' '#' body = RawString? '#'
		//StringLit:
		//	value=STRING_LIT;
		public ParserRule getRule() { return rule; }

		//value=STRING_LIT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING_LIT
		public RuleCall getValueSTRING_LITTerminalRuleCall_0() { return cValueSTRING_LITTerminalRuleCall_0; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Literal value
		//Literal:
		//	NumberLit | CharLit | StringLit;
		public ParserRule getRule() { return rule; }

		//NumberLit | CharLit | StringLit
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberLit
		public RuleCall getNumberLitParserRuleCall_0() { return cNumberLitParserRuleCall_0; }

		//CharLit
		public RuleCall getCharLitParserRuleCall_1() { return cCharLitParserRuleCall_1; }

		//StringLit
		public RuleCall getStringLitParserRuleCall_2() { return cStringLitParserRuleCall_2; }
	}

	public class NumberLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLit");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueFLOAT_LITTerminalRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueINT_LITTerminalRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		
		//NumberLit:
		//	value=(FLOAT_LIT | INT_LIT);
		public ParserRule getRule() { return rule; }

		//value=(FLOAT_LIT | INT_LIT)
		public Assignment getValueAssignment() { return cValueAssignment; }

		//FLOAT_LIT | INT_LIT
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//FLOAT_LIT
		public RuleCall getValueFLOAT_LITTerminalRuleCall_0_0() { return cValueFLOAT_LITTerminalRuleCall_0_0; }

		//INT_LIT
		public RuleCall getValueINT_LITTerminalRuleCall_0_1() { return cValueINT_LITTerminalRuleCall_0_1; }
	}

	public class CharLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CharLit");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueCHAR_LITTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//// Single character literal
		//CharLit:
		//	value=CHAR_LIT;
		public ParserRule getRule() { return rule; }

		//value=CHAR_LIT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//CHAR_LIT
		public RuleCall getValueCHAR_LITTerminalRuleCall_0() { return cValueCHAR_LITTerminalRuleCall_0; }
	}
	
	
	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPRIVATEPrivKeyword_0_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPUBLICPubKeyword_1_0 = (Keyword)cPUBLICEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Visibility:
		//	PRIVATE="priv" | PUBLIC="pub";
		public EnumRule getRule() { return rule; }

		//PRIVATE="priv" | PUBLIC="pub"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PRIVATE="priv"
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_0() { return cPRIVATEEnumLiteralDeclaration_0; }

		//"priv"
		public Keyword getPRIVATEPrivKeyword_0_0() { return cPRIVATEPrivKeyword_0_0; }

		//PUBLIC="pub"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_1() { return cPUBLICEnumLiteralDeclaration_1; }

		//"pub"
		public Keyword getPUBLICPubKeyword_1_0() { return cPUBLICPubKeyword_1_0; }
	}
	
	private CrateElements pCrate;
	private ItemAttrElements pItemAttr;
	private AttrElements pAttr;
	private AttrWithListElements pAttrWithList;
	private LiteralAttrElements pLiteralAttr;
	private ItemAndAttrsElements pItemAndAttrs;
	private ItemElements pItem;
	private ModItemElements pModItem;
	private FnItemElements pFnItem;
	private BlockElements pBlock;
	private GenericParamDeclElements pGenericParamDecl;
	private ArgElements pArg;
	private PatElements pPat;
	private TypeElements pType;
	private PrimitiveTypeElements pPrimitiveType;
	private TupleTypeElements pTupleType;
	private StructTypeElements pStructType;
	private StructFieldElements pStructField;
	private EnumTypeElements pEnumType;
	private VariantElements pVariant;
	private StructVariantElements pStructVariant;
	private TupleVariantElements pTupleVariant;
	private UnitVariantElements pUnitVariant;
	private VisibilityElements unknownRuleVisibility;
	private TerminalRule tINT_TYPE;
	private TerminalRule tINT_SIZE;
	private TerminalRule tSIGNED_INT_TYPE;
	private TerminalRule tI8;
	private TerminalRule tI16;
	private TerminalRule tI32;
	private TerminalRule tI64;
	private TerminalRule tUNSIGNED_INT_TYPE;
	private TerminalRule tU8;
	private TerminalRule tU16;
	private TerminalRule tU32;
	private TerminalRule tU64;
	private TerminalRule tFLOAT_TYPE;
	private TerminalRule tFLOAT_SIZE;
	private TerminalRule tF32;
	private TerminalRule tF64;
	private TerminalRule tBOOLEAN_TYPE;
	private TerminalRule tMACHINE_TYPE;
	private TerminalRule tMACHINE_INT_TYPE;
	private TerminalRule tMACHINE_UINT_TYPE;
	private TerminalRule tUNIT_TYPE;
	private StringLitElements pStringLit;
	private LiteralElements pLiteral;
	private NumberLitElements pNumberLit;
	private CharLitElements pCharLit;
	private TerminalRule tCHAR_LIT;
	private TerminalRule tSTRING_LIT;
	private TerminalRule tUNICODE_CHAR;
	private TerminalRule tUTF8_CHAR;
	private TerminalRule tUTF16_CHAR;
	private TerminalRule tUTF32_CHAR;
	private TerminalRule tFLOAT_LIT;
	private TerminalRule tINT_LIT;
	private TerminalRule tDEC_INT_LIT;
	private TerminalRule tBIN_INT_LIT;
	private TerminalRule tOCT_INT_LIT;
	private TerminalRule tHEX_INT_LIT;
	private TerminalRule tOCT_DIGIT;
	private TerminalRule tDEC_DIGIT;
	private TerminalRule tHEX_DIGIT;
	private TerminalRule tXID_START;
	private TerminalRule tXID_CONTINUE;
	private TerminalRule tIDENT;
	
	private final Grammar grammar;

	@Inject
	public RustGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.redoxi.ruste.Rust".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//// Top level crate and its implicit module
	//Crate:
	//	items+=ItemAndAttrs*;
	public CrateElements getCrateAccess() {
		return (pCrate != null) ? pCrate : (pCrate = new CrateElements());
	}
	
	public ParserRule getCrateRule() {
		return getCrateAccess().getRule();
	}

	//// Attribute for an item
	//ItemAttr:
	//	"#[" attrs+=Attr ("," attrs+=Attr)* "]";
	public ItemAttrElements getItemAttrAccess() {
		return (pItemAttr != null) ? pItemAttr : (pItemAttr = new ItemAttrElements());
	}
	
	public ParserRule getItemAttrRule() {
		return getItemAttrAccess().getRule();
	}

	//// Individual attribute within an item
	//Attr:
	//	LiteralAttr | AttrWithList;
	public AttrElements getAttrAccess() {
		return (pAttr != null) ? pAttr : (pAttr = new AttrElements());
	}
	
	public ParserRule getAttrRule() {
		return getAttrAccess().getRule();
	}

	//// Attribute with a list of other attributes
	//AttrWithList:
	//	ident=IDENT "(" attrs+=Attr ("," attrs+=Attr)* ")";
	public AttrWithListElements getAttrWithListAccess() {
		return (pAttrWithList != null) ? pAttrWithList : (pAttrWithList = new AttrWithListElements());
	}
	
	public ParserRule getAttrWithListRule() {
		return getAttrWithListAccess().getRule();
	}

	//// An attribute with a literal value
	//LiteralAttr:
	//	ident=IDENT "=" value=Literal;
	public LiteralAttrElements getLiteralAttrAccess() {
		return (pLiteralAttr != null) ? pLiteralAttr : (pLiteralAttr = new LiteralAttrElements());
	}
	
	public ParserRule getLiteralAttrRule() {
		return getLiteralAttrAccess().getRule();
	}

	//// An item and any associated attributes
	//ItemAndAttrs:
	//	attrs+=ItemAttr* item=Item;
	public ItemAndAttrsElements getItemAndAttrsAccess() {
		return (pItemAndAttrs != null) ? pItemAndAttrs : (pItemAndAttrs = new ItemAndAttrsElements());
	}
	
	public ParserRule getItemAndAttrsRule() {
		return getItemAndAttrsAccess().getRule();
	}

	//// Items within a module or crate
	//Item:
	//	ModItem | // | TypeItem | StructItem | EnumItem | StaticItem | TraitItem | ImplItem | ExternBlock
	//	FnItem;
	public ItemElements getItemAccess() {
		return (pItem != null) ? pItem : (pItem = new ItemElements());
	}
	
	public ParserRule getItemRule() {
		return getItemAccess().getRule();
	}

	//// A module declaration item
	//ModItem:
	//	"mod" ident=IDENT (externalBody?=";" | "{" items+=ItemAndAttrs* "}");
	public ModItemElements getModItemAccess() {
		return (pModItem != null) ? pModItem : (pModItem = new ModItemElements());
	}
	
	public ParserRule getModItemRule() {
		return getModItemAccess().getRule();
	}

	//// Function item
	//FnItem:
	//	"fn" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "(" (args+=Arg ("," args+=Arg)*)?
	//	")" ("->" returnType=Type)? body=Block;
	public FnItemElements getFnItemAccess() {
		return (pFnItem != null) ? pFnItem : (pFnItem = new FnItemElements());
	}
	
	public ParserRule getFnItemRule() {
		return getFnItemAccess().getRule();
	}

	//Block:
	//	"{" / * TODO Statements, expression * / "}";
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//// TODO Crossreference Trait?
	//GenericParamDecl:
	//	ident=IDENT (":" bounds+=IDENT ("+" bounds+=IDENT))?;
	public GenericParamDeclElements getGenericParamDeclAccess() {
		return (pGenericParamDecl != null) ? pGenericParamDecl : (pGenericParamDecl = new GenericParamDeclElements());
	}
	
	public ParserRule getGenericParamDeclRule() {
		return getGenericParamDeclAccess().getRule();
	}

	//Arg:
	//	pat=Pat ":" type=Type;
	public ArgElements getArgAccess() {
		return (pArg != null) ? pArg : (pArg = new ArgElements());
	}
	
	public ParserRule getArgRule() {
		return getArgAccess().getRule();
	}

	//// TODO Expand
	//Pat:
	//	ident=IDENT;
	public PatElements getPatAccess() {
		return (pPat != null) ? pPat : (pPat = new PatElements());
	}
	
	public ParserRule getPatRule() {
		return getPatAccess().getRule();
	}

	//Type:
	//	PrimitiveType | TupleType | StructType | EnumType;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//PrimitiveType:
	//	{IntType} INT_TYPE | {FloatType} FLOAT_TYPE | {BoolType} BOOLEAN_TYPE | {MachineType} MACHINE_TYPE | {UnitType}
	//	UNIT_TYPE;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return (pPrimitiveType != null) ? pPrimitiveType : (pPrimitiveType = new PrimitiveTypeElements());
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//TupleType:
	//	"(" types+=Type ("," types+=Type)* ")";
	public TupleTypeElements getTupleTypeAccess() {
		return (pTupleType != null) ? pTupleType : (pTupleType = new TupleTypeElements());
	}
	
	public ParserRule getTupleTypeRule() {
		return getTupleTypeAccess().getRule();
	}

	//// TODO Move generics to own rule, but attach here
	//StructType:
	//	"struct" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" fields+=StructField (","
	//	fields+=StructField)* "}";
	public StructTypeElements getStructTypeAccess() {
		return (pStructType != null) ? pStructType : (pStructType = new StructTypeElements());
	}
	
	public ParserRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}

	//StructField:
	//	vis=Visibility? ident=IDENT ":" type=Type;
	public StructFieldElements getStructFieldAccess() {
		return (pStructField != null) ? pStructField : (pStructField = new StructFieldElements());
	}
	
	public ParserRule getStructFieldRule() {
		return getStructFieldAccess().getRule();
	}

	//EnumType:
	//	"enum" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" variants+=Variant (","
	//	variants+=Variant)* "}";
	public EnumTypeElements getEnumTypeAccess() {
		return (pEnumType != null) ? pEnumType : (pEnumType = new EnumTypeElements());
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}

	//Variant:
	//	StructVariant | TupleVariant | UnitVariant;
	public VariantElements getVariantAccess() {
		return (pVariant != null) ? pVariant : (pVariant = new VariantElements());
	}
	
	public ParserRule getVariantRule() {
		return getVariantAccess().getRule();
	}

	//StructVariant:
	//	ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" fields+=StructField (","
	//	fields+=StructField)* "}";
	public StructVariantElements getStructVariantAccess() {
		return (pStructVariant != null) ? pStructVariant : (pStructVariant = new StructVariantElements());
	}
	
	public ParserRule getStructVariantRule() {
		return getStructVariantAccess().getRule();
	}

	//TupleVariant:
	//	ident=IDENT "(" types+=Type ("," types+=Type)* ")";
	public TupleVariantElements getTupleVariantAccess() {
		return (pTupleVariant != null) ? pTupleVariant : (pTupleVariant = new TupleVariantElements());
	}
	
	public ParserRule getTupleVariantRule() {
		return getTupleVariantAccess().getRule();
	}

	//UnitVariant:
	//	ident=IDENT;
	public UnitVariantElements getUnitVariantAccess() {
		return (pUnitVariant != null) ? pUnitVariant : (pUnitVariant = new UnitVariantElements());
	}
	
	public ParserRule getUnitVariantRule() {
		return getUnitVariantAccess().getRule();
	}

	//enum Visibility:
	//	PRIVATE="priv" | PUBLIC="pub";
	public VisibilityElements getVisibilityAccess() {
		return (unknownRuleVisibility != null) ? unknownRuleVisibility : (unknownRuleVisibility = new VisibilityElements());
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//terminal INT_TYPE:
	//	INT_SIZE;
	public TerminalRule getINT_TYPERule() {
		return (tINT_TYPE != null) ? tINT_TYPE : (tINT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT_TYPE"));
	} 

	//terminal fragment INT_SIZE:
	//	SIGNED_INT_TYPE | UNSIGNED_INT_TYPE;
	public TerminalRule getINT_SIZERule() {
		return (tINT_SIZE != null) ? tINT_SIZE : (tINT_SIZE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT_SIZE"));
	} 

	//terminal fragment SIGNED_INT_TYPE:
	//	I8 | I16 | I32 | I64;
	public TerminalRule getSIGNED_INT_TYPERule() {
		return (tSIGNED_INT_TYPE != null) ? tSIGNED_INT_TYPE : (tSIGNED_INT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SIGNED_INT_TYPE"));
	} 

	//terminal fragment I8:
	//	"i8";
	public TerminalRule getI8Rule() {
		return (tI8 != null) ? tI8 : (tI8 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "I8"));
	} 

	//terminal fragment I16:
	//	"i16";
	public TerminalRule getI16Rule() {
		return (tI16 != null) ? tI16 : (tI16 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "I16"));
	} 

	//terminal fragment I32:
	//	"i32";
	public TerminalRule getI32Rule() {
		return (tI32 != null) ? tI32 : (tI32 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "I32"));
	} 

	//terminal fragment I64:
	//	"i64";
	public TerminalRule getI64Rule() {
		return (tI64 != null) ? tI64 : (tI64 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "I64"));
	} 

	//terminal fragment UNSIGNED_INT_TYPE:
	//	U8 | U16 | U32 | U64;
	public TerminalRule getUNSIGNED_INT_TYPERule() {
		return (tUNSIGNED_INT_TYPE != null) ? tUNSIGNED_INT_TYPE : (tUNSIGNED_INT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNSIGNED_INT_TYPE"));
	} 

	//terminal fragment U8:
	//	"u8";
	public TerminalRule getU8Rule() {
		return (tU8 != null) ? tU8 : (tU8 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "U8"));
	} 

	//terminal fragment U16:
	//	"u16";
	public TerminalRule getU16Rule() {
		return (tU16 != null) ? tU16 : (tU16 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "U16"));
	} 

	//terminal fragment U32:
	//	"u32";
	public TerminalRule getU32Rule() {
		return (tU32 != null) ? tU32 : (tU32 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "U32"));
	} 

	//terminal fragment U64:
	//	"u64";
	public TerminalRule getU64Rule() {
		return (tU64 != null) ? tU64 : (tU64 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "U64"));
	} 

	//terminal FLOAT_TYPE:
	//	FLOAT_SIZE;
	public TerminalRule getFLOAT_TYPERule() {
		return (tFLOAT_TYPE != null) ? tFLOAT_TYPE : (tFLOAT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT_TYPE"));
	} 

	//terminal fragment FLOAT_SIZE:
	//	F32 | F64;
	public TerminalRule getFLOAT_SIZERule() {
		return (tFLOAT_SIZE != null) ? tFLOAT_SIZE : (tFLOAT_SIZE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT_SIZE"));
	} 

	//terminal fragment F32:
	//	"f32";
	public TerminalRule getF32Rule() {
		return (tF32 != null) ? tF32 : (tF32 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "F32"));
	} 

	//terminal fragment F64:
	//	"f64";
	public TerminalRule getF64Rule() {
		return (tF64 != null) ? tF64 : (tF64 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "F64"));
	} 

	//terminal BOOLEAN_TYPE:
	//	"bool";
	public TerminalRule getBOOLEAN_TYPERule() {
		return (tBOOLEAN_TYPE != null) ? tBOOLEAN_TYPE : (tBOOLEAN_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN_TYPE"));
	} 

	//terminal MACHINE_TYPE:
	//	MACHINE_INT_TYPE | MACHINE_UINT_TYPE;
	public TerminalRule getMACHINE_TYPERule() {
		return (tMACHINE_TYPE != null) ? tMACHINE_TYPE : (tMACHINE_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MACHINE_TYPE"));
	} 

	//terminal fragment MACHINE_INT_TYPE:
	//	"int";
	public TerminalRule getMACHINE_INT_TYPERule() {
		return (tMACHINE_INT_TYPE != null) ? tMACHINE_INT_TYPE : (tMACHINE_INT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MACHINE_INT_TYPE"));
	} 

	//terminal fragment MACHINE_UINT_TYPE:
	//	"uint";
	public TerminalRule getMACHINE_UINT_TYPERule() {
		return (tMACHINE_UINT_TYPE != null) ? tMACHINE_UINT_TYPE : (tMACHINE_UINT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MACHINE_UINT_TYPE"));
	} 

	//terminal UNIT_TYPE:
	//	"()";
	public TerminalRule getUNIT_TYPERule() {
		return (tUNIT_TYPE != null) ? tUNIT_TYPE : (tUNIT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNIT_TYPE"));
	} 

	//// | {RawStringLit} 'r' '#' body = RawString? '#'
	//StringLit:
	//	value=STRING_LIT;
	public StringLitElements getStringLitAccess() {
		return (pStringLit != null) ? pStringLit : (pStringLit = new StringLitElements());
	}
	
	public ParserRule getStringLitRule() {
		return getStringLitAccess().getRule();
	}

	//// Literal value
	//Literal:
	//	NumberLit | CharLit | StringLit;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//NumberLit:
	//	value=(FLOAT_LIT | INT_LIT);
	public NumberLitElements getNumberLitAccess() {
		return (pNumberLit != null) ? pNumberLit : (pNumberLit = new NumberLitElements());
	}
	
	public ParserRule getNumberLitRule() {
		return getNumberLitAccess().getRule();
	}

	//// Single character literal
	//CharLit:
	//	value=CHAR_LIT;
	public CharLitElements getCharLitAccess() {
		return (pCharLit != null) ? pCharLit : (pCharLit = new CharLitElements());
	}
	
	public ParserRule getCharLitRule() {
		return getCharLitAccess().getRule();
	}

	//terminal CHAR_LIT:
	//	"\'" ("\\" ("\\" | "n" | "r" | "t" | "0") | UNICODE_CHAR | !("\\" | "\'"))* "\'";
	public TerminalRule getCHAR_LITRule() {
		return (tCHAR_LIT != null) ? tCHAR_LIT : (tCHAR_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHAR_LIT"));
	} 

	//terminal STRING_LIT:
	//	"\"" ("\\" ("\\" | "n" | "r" | "t" | "0") | UNICODE_CHAR | !("\\" | "\""))* "\"";
	public TerminalRule getSTRING_LITRule() {
		return (tSTRING_LIT != null) ? tSTRING_LIT : (tSTRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING_LIT"));
	} 

	//terminal fragment UNICODE_CHAR:
	//	UTF8_CHAR | UTF16_CHAR | UTF32_CHAR;
	public TerminalRule getUNICODE_CHARRule() {
		return (tUNICODE_CHAR != null) ? tUNICODE_CHAR : (tUNICODE_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNICODE_CHAR"));
	} 

	//terminal fragment UTF8_CHAR:
	//	"\\x" HEX_DIGIT HEX_DIGIT;
	public TerminalRule getUTF8_CHARRule() {
		return (tUTF8_CHAR != null) ? tUTF8_CHAR : (tUTF8_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UTF8_CHAR"));
	} 

	//terminal fragment UTF16_CHAR:
	//	"\\u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getUTF16_CHARRule() {
		return (tUTF16_CHAR != null) ? tUTF16_CHAR : (tUTF16_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UTF16_CHAR"));
	} 

	//terminal fragment UTF32_CHAR:
	//	"\\U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getUTF32_CHARRule() {
		return (tUTF32_CHAR != null) ? tUTF32_CHAR : (tUTF32_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UTF32_CHAR"));
	} 

	//// Floating point literal
	//terminal FLOAT_LIT:
	//	DEC_DIGIT (DEC_DIGIT | "_")* ("." (DEC_DIGIT | "_")+) (("E" | "e") ("+" | "-")? (DEC_DIGIT | "_")+)? FLOAT_SIZE?;
	public TerminalRule getFLOAT_LITRule() {
		return (tFLOAT_LIT != null) ? tFLOAT_LIT : (tFLOAT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT_LIT"));
	} 

	//// Integer literal
	//terminal INT_LIT:
	//	(DEC_INT_LIT | BIN_INT_LIT | OCT_INT_LIT | HEX_INT_LIT) INT_SIZE?;
	public TerminalRule getINT_LITRule() {
		return (tINT_LIT != null) ? tINT_LIT : (tINT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT_LIT"));
	} 

	//// Decimal (base 10) integer
	//terminal fragment DEC_INT_LIT:
	//	DEC_DIGIT (DEC_DIGIT | "_")*;
	public TerminalRule getDEC_INT_LITRule() {
		return (tDEC_INT_LIT != null) ? tDEC_INT_LIT : (tDEC_INT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DEC_INT_LIT"));
	} 

	//// Binary (base 2) integer
	//terminal fragment BIN_INT_LIT:
	//	"0b" ("0" | "1" | "_")+;
	public TerminalRule getBIN_INT_LITRule() {
		return (tBIN_INT_LIT != null) ? tBIN_INT_LIT : (tBIN_INT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BIN_INT_LIT"));
	} 

	//// Octal (base 8) integer
	//terminal fragment OCT_INT_LIT:
	//	"0o" (OCT_DIGIT | "_")+;
	public TerminalRule getOCT_INT_LITRule() {
		return (tOCT_INT_LIT != null) ? tOCT_INT_LIT : (tOCT_INT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCT_INT_LIT"));
	} 

	//// Hex (base 16) integer
	//terminal fragment HEX_INT_LIT:
	//	"0x" (HEX_DIGIT | "_")+;
	public TerminalRule getHEX_INT_LITRule() {
		return (tHEX_INT_LIT != null) ? tHEX_INT_LIT : (tHEX_INT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_INT_LIT"));
	} 

	//terminal fragment OCT_DIGIT:
	//	"0".."7";
	public TerminalRule getOCT_DIGITRule() {
		return (tOCT_DIGIT != null) ? tOCT_DIGIT : (tOCT_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCT_DIGIT"));
	} 

	//terminal fragment DEC_DIGIT:
	//	"0".."9";
	public TerminalRule getDEC_DIGITRule() {
		return (tDEC_DIGIT != null) ? tDEC_DIGIT : (tDEC_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DEC_DIGIT"));
	} 

	//terminal fragment HEX_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getHEX_DIGITRule() {
		return (tHEX_DIGIT != null) ? tHEX_DIGIT : (tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_DIGIT"));
	} 

	//// terminal fragment NON_SPECIAL_CHAR: !('"' | '\'' | '\\' | 'n' | 'r' | 't' | '0');
	//// TODO Expand
	//terminal fragment XID_START:
	//	"a".."z";
	public TerminalRule getXID_STARTRule() {
		return (tXID_START != null) ? tXID_START : (tXID_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XID_START"));
	} 

	//// TODO Expand
	//terminal fragment XID_CONTINUE:
	//	"a".."z" | "_";
	public TerminalRule getXID_CONTINUERule() {
		return (tXID_CONTINUE != null) ? tXID_CONTINUE : (tXID_CONTINUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XID_CONTINUE"));
	} 

	//terminal IDENT:
	//	XID_START XID_CONTINUE*;
	public TerminalRule getIDENTRule() {
		return (tIDENT != null) ? tIDENT : (tIDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENT"));
	} 
}

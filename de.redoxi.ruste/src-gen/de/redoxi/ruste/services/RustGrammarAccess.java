/*
* generated by Xtext
*/
package de.redoxi.ruste.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class RustGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CrateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Crate");
		private final Assignment cItemsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cItemsItemAndAttrsParserRuleCall_0 = (RuleCall)cItemsAssignment.eContents().get(0);
		
		//// Top level crate and its implicit module
		//Crate:
		//	items+=ItemAndAttrs*;
		public ParserRule getRule() { return rule; }

		//items+=ItemAndAttrs*
		public Assignment getItemsAssignment() { return cItemsAssignment; }

		//ItemAndAttrs
		public RuleCall getItemsItemAndAttrsParserRuleCall_0() { return cItemsItemAndAttrsParserRuleCall_0; }
	}

	public class ItemAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ItemAttr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttrsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttrsAttrParserRuleCall_1_0 = (RuleCall)cAttrsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttrsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttrsAttrParserRuleCall_2_1_0 = (RuleCall)cAttrsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Attribute for an item
		//ItemAttr:
		//	"#[" attrs+=Attr ("," attrs+=Attr)* "]";
		public ParserRule getRule() { return rule; }

		//"#[" attrs+=Attr ("," attrs+=Attr)* "]"
		public Group getGroup() { return cGroup; }

		//"#["
		public Keyword getNumberSignLeftSquareBracketKeyword_0() { return cNumberSignLeftSquareBracketKeyword_0; }

		//attrs+=Attr
		public Assignment getAttrsAssignment_1() { return cAttrsAssignment_1; }

		//Attr
		public RuleCall getAttrsAttrParserRuleCall_1_0() { return cAttrsAttrParserRuleCall_1_0; }

		//("," attrs+=Attr)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//attrs+=Attr
		public Assignment getAttrsAssignment_2_1() { return cAttrsAssignment_2_1; }

		//Attr
		public RuleCall getAttrsAttrParserRuleCall_2_1_0() { return cAttrsAttrParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class AttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralAttrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttrWithListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Individual attribute within an item
		//Attr:
		//	LiteralAttr | AttrWithList;
		public ParserRule getRule() { return rule; }

		//LiteralAttr | AttrWithList
		public Alternatives getAlternatives() { return cAlternatives; }

		//LiteralAttr
		public RuleCall getLiteralAttrParserRuleCall_0() { return cLiteralAttrParserRuleCall_0; }

		//AttrWithList
		public RuleCall getAttrWithListParserRuleCall_1() { return cAttrWithListParserRuleCall_1; }
	}

	public class AttrWithListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttrWithList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttrsAttrParserRuleCall_2_0 = (RuleCall)cAttrsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttrsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttrsAttrParserRuleCall_3_1_0 = (RuleCall)cAttrsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Attribute with a list of other attributes
		//AttrWithList:
		//	ident=IDENT "(" attrs+=Attr ("," attrs+=Attr)* ")";
		public ParserRule getRule() { return rule; }

		//ident=IDENT "(" attrs+=Attr ("," attrs+=Attr)* ")"
		public Group getGroup() { return cGroup; }

		//ident=IDENT
		public Assignment getIdentAssignment_0() { return cIdentAssignment_0; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0_0() { return cIdentIDENTTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//attrs+=Attr
		public Assignment getAttrsAssignment_2() { return cAttrsAssignment_2; }

		//Attr
		public RuleCall getAttrsAttrParserRuleCall_2_0() { return cAttrsAttrParserRuleCall_2_0; }

		//("," attrs+=Attr)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//attrs+=Attr
		public Assignment getAttrsAssignment_3_1() { return cAttrsAssignment_3_1; }

		//Attr
		public RuleCall getAttrsAttrParserRuleCall_3_1_0() { return cAttrsAttrParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class LiteralAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralAttr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueLiteralParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// An attribute with a literal value
		//LiteralAttr:
		//	ident=IDENT "=" value=Literal;
		public ParserRule getRule() { return rule; }

		//ident=IDENT "=" value=Literal
		public Group getGroup() { return cGroup; }

		//ident=IDENT
		public Assignment getIdentAssignment_0() { return cIdentAssignment_0; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0_0() { return cIdentIDENTTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Literal
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_2_0() { return cValueLiteralParserRuleCall_2_0; }
	}

	public class ItemAndAttrsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ItemAndAttrs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttrsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttrsItemAttrParserRuleCall_0_0 = (RuleCall)cAttrsAssignment_0.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemItemParserRuleCall_1_0 = (RuleCall)cItemAssignment_1.eContents().get(0);
		
		//// An item and any associated attributes
		//ItemAndAttrs:
		//	attrs+=ItemAttr* item=Item;
		public ParserRule getRule() { return rule; }

		//attrs+=ItemAttr* item=Item
		public Group getGroup() { return cGroup; }

		//attrs+=ItemAttr*
		public Assignment getAttrsAssignment_0() { return cAttrsAssignment_0; }

		//ItemAttr
		public RuleCall getAttrsItemAttrParserRuleCall_0_0() { return cAttrsItemAttrParserRuleCall_0_0; }

		//item=Item
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }

		//Item
		public RuleCall getItemItemParserRuleCall_1_0() { return cItemItemParserRuleCall_1_0; }
	}

	public class ItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Item");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModItemParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFnItemParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeItemParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStructItemParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumItemParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTraitItemParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cImplItemParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cExternBlockParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cStaticItemParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//// Items within a module or crate
		//Item:
		//	ModItem | FnItem | TypeItem | StructItem | EnumItem | TraitItem | ImplItem | ExternBlock | StaticItem;
		public ParserRule getRule() { return rule; }

		//ModItem | FnItem | TypeItem | StructItem | EnumItem | TraitItem | ImplItem | ExternBlock | StaticItem
		public Alternatives getAlternatives() { return cAlternatives; }

		//ModItem
		public RuleCall getModItemParserRuleCall_0() { return cModItemParserRuleCall_0; }

		//FnItem
		public RuleCall getFnItemParserRuleCall_1() { return cFnItemParserRuleCall_1; }

		//TypeItem
		public RuleCall getTypeItemParserRuleCall_2() { return cTypeItemParserRuleCall_2; }

		//StructItem
		public RuleCall getStructItemParserRuleCall_3() { return cStructItemParserRuleCall_3; }

		//EnumItem
		public RuleCall getEnumItemParserRuleCall_4() { return cEnumItemParserRuleCall_4; }

		//TraitItem
		public RuleCall getTraitItemParserRuleCall_5() { return cTraitItemParserRuleCall_5; }

		//ImplItem
		public RuleCall getImplItemParserRuleCall_6() { return cImplItemParserRuleCall_6; }

		//ExternBlock
		public RuleCall getExternBlockParserRuleCall_7() { return cExternBlockParserRuleCall_7; }

		//StaticItem
		public RuleCall getStaticItemParserRuleCall_8() { return cStaticItemParserRuleCall_8; }
	}

	public class ModItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_1_0 = (RuleCall)cIdentAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExternalBodyAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cExternalBodySemicolonKeyword_2_0_0 = (Keyword)cExternalBodyAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cItemsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cItemsItemAndAttrsParserRuleCall_2_1_1_0 = (RuleCall)cItemsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//// A module declaration item
		//ModItem:
		//	"mod" ident=IDENT (externalBody?=";" | "{" items+=ItemAndAttrs* "}");
		public ParserRule getRule() { return rule; }

		//"mod" ident=IDENT (externalBody?=";" | "{" items+=ItemAndAttrs* "}")
		public Group getGroup() { return cGroup; }

		//"mod"
		public Keyword getModKeyword_0() { return cModKeyword_0; }

		//ident=IDENT
		public Assignment getIdentAssignment_1() { return cIdentAssignment_1; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_1_0() { return cIdentIDENTTerminalRuleCall_1_0; }

		//externalBody?=";" | "{" items+=ItemAndAttrs* "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//externalBody?=";"
		public Assignment getExternalBodyAssignment_2_0() { return cExternalBodyAssignment_2_0; }

		//";"
		public Keyword getExternalBodySemicolonKeyword_2_0_0() { return cExternalBodySemicolonKeyword_2_0_0; }

		//"{" items+=ItemAndAttrs* "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//items+=ItemAndAttrs*
		public Assignment getItemsAssignment_2_1_1() { return cItemsAssignment_2_1_1; }

		//ItemAndAttrs
		public RuleCall getItemsItemAndAttrsParserRuleCall_2_1_1_0() { return cItemsItemAndAttrsParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}

	public class FnItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FnItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_1_0 = (RuleCall)cIdentAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cArgsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cArgsArgParserRuleCall_4_0_0 = (RuleCall)cArgsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cArgsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_4_1_1_0 = (RuleCall)cArgsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cReturnTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cReturnTypeTypeParserRuleCall_6_1_0 = (RuleCall)cReturnTypeAssignment_6_1.eContents().get(0);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyBlockParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//// Function item
		//FnItem:
		//	"fn" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "(" (args+=Arg ("," args+=Arg)*)?
		//	")" ("->" returnType=Type)? body=Block;
		public ParserRule getRule() { return rule; }

		//"fn" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "(" (args+=Arg ("," args+=Arg)*)?
		//")" ("->" returnType=Type)? body=Block
		public Group getGroup() { return cGroup; }

		//"fn"
		public Keyword getFnKeyword_0() { return cFnKeyword_0; }

		//ident=IDENT
		public Assignment getIdentAssignment_1() { return cIdentAssignment_1; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_1_0() { return cIdentIDENTTerminalRuleCall_1_0; }

		//("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_2_1_0() { return cParamsGenericParamDeclParserRuleCall_2_1_0; }

		//("," params+=GenericParamDecl)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_2_2_1_0() { return cParamsGenericParamDeclParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(args+=Arg ("," args+=Arg)*)?
		public Group getGroup_4() { return cGroup_4; }

		//args+=Arg
		public Assignment getArgsAssignment_4_0() { return cArgsAssignment_4_0; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_4_0_0() { return cArgsArgParserRuleCall_4_0_0; }

		//("," args+=Arg)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//args+=Arg
		public Assignment getArgsAssignment_4_1_1() { return cArgsAssignment_4_1_1; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_4_1_1_0() { return cArgsArgParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//("->" returnType=Type)?
		public Group getGroup_6() { return cGroup_6; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_6_0() { return cHyphenMinusGreaterThanSignKeyword_6_0; }

		//returnType=Type
		public Assignment getReturnTypeAssignment_6_1() { return cReturnTypeAssignment_6_1; }

		//Type
		public RuleCall getReturnTypeTypeParserRuleCall_6_1_0() { return cReturnTypeTypeParserRuleCall_6_1_0; }

		//body=Block
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_7_0() { return cBodyBlockParserRuleCall_7_0; }
	}

	public class TypeItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_1_0 = (RuleCall)cIdentAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// TODO Reference Type?
		//TypeItem:
		//	"type" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "=" type=Type ";";
		public ParserRule getRule() { return rule; }

		//"type" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "=" type=Type ";"
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//ident=IDENT
		public Assignment getIdentAssignment_1() { return cIdentAssignment_1; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_1_0() { return cIdentIDENTTerminalRuleCall_1_0; }

		//("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_2_1_0() { return cParamsGenericParamDeclParserRuleCall_2_1_0; }

		//("," params+=GenericParamDecl)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_2_2_1_0() { return cParamsGenericParamDeclParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class StructItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_1_0 = (RuleCall)cIdentAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFieldsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFieldsStructFieldParserRuleCall_4_0 = (RuleCall)cFieldsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFieldsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFieldsStructFieldParserRuleCall_5_1_0 = (RuleCall)cFieldsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//StructItem:
		//	"struct" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" fields+=StructField (","
		//	fields+=StructField)* "}";
		public ParserRule getRule() { return rule; }

		//"struct" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" fields+=StructField (","
		//fields+=StructField)* "}"
		public Group getGroup() { return cGroup; }

		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }

		//ident=IDENT
		public Assignment getIdentAssignment_1() { return cIdentAssignment_1; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_1_0() { return cIdentIDENTTerminalRuleCall_1_0; }

		//("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_2_1_0() { return cParamsGenericParamDeclParserRuleCall_2_1_0; }

		//("," params+=GenericParamDecl)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_2_2_1_0() { return cParamsGenericParamDeclParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//fields+=StructField
		public Assignment getFieldsAssignment_4() { return cFieldsAssignment_4; }

		//StructField
		public RuleCall getFieldsStructFieldParserRuleCall_4_0() { return cFieldsStructFieldParserRuleCall_4_0; }

		//("," fields+=StructField)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//fields+=StructField
		public Assignment getFieldsAssignment_5_1() { return cFieldsAssignment_5_1; }

		//StructField
		public RuleCall getFieldsStructFieldParserRuleCall_5_1_0() { return cFieldsStructFieldParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class EnumItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_1_0 = (RuleCall)cIdentAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVariantsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariantsEnumVariantParserRuleCall_4_0 = (RuleCall)cVariantsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVariantsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVariantsEnumVariantParserRuleCall_5_1_0 = (RuleCall)cVariantsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EnumItem:
		//	"enum" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" variants+=EnumVariant (","
		//	variants+=EnumVariant)* "}";
		public ParserRule getRule() { return rule; }

		//"enum" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" variants+=EnumVariant (","
		//variants+=EnumVariant)* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//ident=IDENT
		public Assignment getIdentAssignment_1() { return cIdentAssignment_1; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_1_0() { return cIdentIDENTTerminalRuleCall_1_0; }

		//("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_2_1_0() { return cParamsGenericParamDeclParserRuleCall_2_1_0; }

		//("," params+=GenericParamDecl)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_2_2_1_0() { return cParamsGenericParamDeclParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//variants+=EnumVariant
		public Assignment getVariantsAssignment_4() { return cVariantsAssignment_4; }

		//EnumVariant
		public RuleCall getVariantsEnumVariantParserRuleCall_4_0() { return cVariantsEnumVariantParserRuleCall_4_0; }

		//("," variants+=EnumVariant)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//variants+=EnumVariant
		public Assignment getVariantsAssignment_5_1() { return cVariantsAssignment_5_1; }

		//EnumVariant
		public RuleCall getVariantsEnumVariantParserRuleCall_5_1_0() { return cVariantsEnumVariantParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class EnumVariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumVariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsIDENTTerminalRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParamsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParamsIDENTTerminalRuleCall_1_2_1_0 = (RuleCall)cParamsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cTypesAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_2_0_1_0 = (RuleCall)cTypesAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_2_0_2_1_0 = (RuleCall)cTypesAssignment_2_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cFieldsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cFieldsStructFieldParserRuleCall_2_1_1_0 = (RuleCall)cFieldsAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cFieldsAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cFieldsStructFieldParserRuleCall_2_1_2_1_0 = (RuleCall)cFieldsAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//EnumVariant:
		//	ident=IDENT ("<" params+=IDENT ("," params+=IDENT)* ">")? ("(" types+=Type ("," types+=Type)* ")" | "{"
		//	fields+=StructField ("," fields+=StructField)* / * TODO Wildcard pattern? * / "}")?;
		public ParserRule getRule() { return rule; }

		//ident=IDENT ("<" params+=IDENT ("," params+=IDENT)* ">")? ("(" types+=Type ("," types+=Type)* ")" | "{"
		//fields+=StructField ("," fields+=StructField)* / * TODO Wildcard pattern? * / "}")?
		public Group getGroup() { return cGroup; }

		//ident=IDENT
		public Assignment getIdentAssignment_0() { return cIdentAssignment_0; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0_0() { return cIdentIDENTTerminalRuleCall_0_0; }

		//("<" params+=IDENT ("," params+=IDENT)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//params+=IDENT
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }

		//IDENT
		public RuleCall getParamsIDENTTerminalRuleCall_1_1_0() { return cParamsIDENTTerminalRuleCall_1_1_0; }

		//("," params+=IDENT)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//params+=IDENT
		public Assignment getParamsAssignment_1_2_1() { return cParamsAssignment_1_2_1; }

		//IDENT
		public RuleCall getParamsIDENTTerminalRuleCall_1_2_1_0() { return cParamsIDENTTerminalRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//("(" types+=Type ("," types+=Type)* ")" | "{" fields+=StructField ("," fields+=StructField)*
		/// * TODO Wildcard pattern? * / "}")?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"(" types+=Type ("," types+=Type)* ")"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }

		//types+=Type
		public Assignment getTypesAssignment_2_0_1() { return cTypesAssignment_2_0_1; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_2_0_1_0() { return cTypesTypeParserRuleCall_2_0_1_0; }

		//("," types+=Type)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }

		//","
		public Keyword getCommaKeyword_2_0_2_0() { return cCommaKeyword_2_0_2_0; }

		//types+=Type
		public Assignment getTypesAssignment_2_0_2_1() { return cTypesAssignment_2_0_2_1; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_2_0_2_1_0() { return cTypesTypeParserRuleCall_2_0_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_0_3() { return cRightParenthesisKeyword_2_0_3; }

		//"{" fields+=StructField ("," fields+=StructField)* / * TODO Wildcard pattern? * / "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//fields+=StructField
		public Assignment getFieldsAssignment_2_1_1() { return cFieldsAssignment_2_1_1; }

		//StructField
		public RuleCall getFieldsStructFieldParserRuleCall_2_1_1_0() { return cFieldsStructFieldParserRuleCall_2_1_1_0; }

		//("," fields+=StructField)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//fields+=StructField
		public Assignment getFieldsAssignment_2_1_2_1() { return cFieldsAssignment_2_1_2_1; }

		//StructField
		public RuleCall getFieldsStructFieldParserRuleCall_2_1_2_1_0() { return cFieldsStructFieldParserRuleCall_2_1_2_1_0; }

		/// * TODO Wildcard pattern? * / "}"
		public Keyword getRightCurlyBracketKeyword_2_1_3() { return cRightCurlyBracketKeyword_2_1_3; }
	}

	public class TraitItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraitItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTraitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_1_0 = (RuleCall)cIdentAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMethodsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMethodsTraitMethodParserRuleCall_4_0 = (RuleCall)cMethodsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TraitItem:
		//	"trait" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" methods+=TraitMethod* "}";
		public ParserRule getRule() { return rule; }

		//"trait" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" methods+=TraitMethod* "}"
		public Group getGroup() { return cGroup; }

		//"trait"
		public Keyword getTraitKeyword_0() { return cTraitKeyword_0; }

		//ident=IDENT
		public Assignment getIdentAssignment_1() { return cIdentAssignment_1; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_1_0() { return cIdentIDENTTerminalRuleCall_1_0; }

		//("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_2_1_0() { return cParamsGenericParamDeclParserRuleCall_2_1_0; }

		//("," params+=GenericParamDecl)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_2_2_1_0() { return cParamsGenericParamDeclParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//methods+=TraitMethod*
		public Assignment getMethodsAssignment_4() { return cMethodsAssignment_4; }

		//TraitMethod
		public RuleCall getMethodsTraitMethodParserRuleCall_4_0() { return cMethodsTraitMethodParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TraitMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraitMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cUnsafeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cUnsafeUnsafeKeyword_0_0_0 = (Keyword)cUnsafeAssignment_0_0.eContents().get(0);
		private final Assignment cExternAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cExternExternKeyword_0_1_0 = (Keyword)cExternAssignment_0_1.eContents().get(0);
		private final Assignment cVisAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisVisibilityEnumRuleCall_1_0 = (RuleCall)cVisAssignment_1.eContents().get(0);
		private final Keyword cFnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdentIDENTTerminalRuleCall_3_0 = (RuleCall)cIdentAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLessThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParamsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_4_1_0 = (RuleCall)cParamsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cParamsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_4_2_1_0 = (RuleCall)cParamsAssignment_4_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cArgsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cArgsArgParserRuleCall_6_0_0 = (RuleCall)cArgsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cArgsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_6_1_1_0 = (RuleCall)cArgsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cReturnTypeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cReturnTypeTypeParserRuleCall_8_1_0 = (RuleCall)cReturnTypeAssignment_8_1.eContents().get(0);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Assignment cBodyAssignment_9_0 = (Assignment)cAlternatives_9.eContents().get(0);
		private final RuleCall cBodyBlockParserRuleCall_9_0_0 = (RuleCall)cBodyAssignment_9_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_9_1 = (Keyword)cAlternatives_9.eContents().get(1);
		
		//TraitMethod:
		//	(unsafe?="unsafe" | extern?="extern")? vis=Visibility? "fn" ident=IDENT ("<" params+=GenericParamDecl (","
		//	params+=GenericParamDecl)* ">")? "(" (args+=Arg ("," args+=Arg)*)? ")" ("->" returnType=Type)? (body=Block | ";");
		public ParserRule getRule() { return rule; }

		//(unsafe?="unsafe" | extern?="extern")? vis=Visibility? "fn" ident=IDENT ("<" params+=GenericParamDecl (","
		//params+=GenericParamDecl)* ">")? "(" (args+=Arg ("," args+=Arg)*)? ")" ("->" returnType=Type)? (body=Block | ";")
		public Group getGroup() { return cGroup; }

		//(unsafe?="unsafe" | extern?="extern")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//unsafe?="unsafe"
		public Assignment getUnsafeAssignment_0_0() { return cUnsafeAssignment_0_0; }

		//"unsafe"
		public Keyword getUnsafeUnsafeKeyword_0_0_0() { return cUnsafeUnsafeKeyword_0_0_0; }

		//extern?="extern"
		public Assignment getExternAssignment_0_1() { return cExternAssignment_0_1; }

		//"extern"
		public Keyword getExternExternKeyword_0_1_0() { return cExternExternKeyword_0_1_0; }

		//vis=Visibility?
		public Assignment getVisAssignment_1() { return cVisAssignment_1; }

		//Visibility
		public RuleCall getVisVisibilityEnumRuleCall_1_0() { return cVisVisibilityEnumRuleCall_1_0; }

		//"fn"
		public Keyword getFnKeyword_2() { return cFnKeyword_2; }

		//ident=IDENT
		public Assignment getIdentAssignment_3() { return cIdentAssignment_3; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_3_0() { return cIdentIDENTTerminalRuleCall_3_0; }

		//("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")?
		public Group getGroup_4() { return cGroup_4; }

		//"<"
		public Keyword getLessThanSignKeyword_4_0() { return cLessThanSignKeyword_4_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_4_1() { return cParamsAssignment_4_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_4_1_0() { return cParamsGenericParamDeclParserRuleCall_4_1_0; }

		//("," params+=GenericParamDecl)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_4_2_1() { return cParamsAssignment_4_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_4_2_1_0() { return cParamsGenericParamDeclParserRuleCall_4_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4_3() { return cGreaterThanSignKeyword_4_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//(args+=Arg ("," args+=Arg)*)?
		public Group getGroup_6() { return cGroup_6; }

		//args+=Arg
		public Assignment getArgsAssignment_6_0() { return cArgsAssignment_6_0; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_6_0_0() { return cArgsArgParserRuleCall_6_0_0; }

		//("," args+=Arg)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//args+=Arg
		public Assignment getArgsAssignment_6_1_1() { return cArgsAssignment_6_1_1; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_6_1_1_0() { return cArgsArgParserRuleCall_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//("->" returnType=Type)?
		public Group getGroup_8() { return cGroup_8; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_8_0() { return cHyphenMinusGreaterThanSignKeyword_8_0; }

		//returnType=Type
		public Assignment getReturnTypeAssignment_8_1() { return cReturnTypeAssignment_8_1; }

		//Type
		public RuleCall getReturnTypeTypeParserRuleCall_8_1_0() { return cReturnTypeTypeParserRuleCall_8_1_0; }

		//body=Block | ";"
		public Alternatives getAlternatives_9() { return cAlternatives_9; }

		//body=Block
		public Assignment getBodyAssignment_9_0() { return cBodyAssignment_9_0; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_9_0_0() { return cBodyBlockParserRuleCall_9_0_0; }

		//";"
		public Keyword getSemicolonKeyword_9_1() { return cSemicolonKeyword_9_1; }
	}

	public class ImplItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImplKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTraitAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTraitIDENTTerminalRuleCall_1_0_0 = (RuleCall)cTraitAssignment_1_0.eContents().get(0);
		private final Keyword cForKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStructAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStructIDENTTerminalRuleCall_2_0 = (RuleCall)cStructAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMethodsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMethodsImplMethodParserRuleCall_4_0 = (RuleCall)cMethodsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// TODO Crossreference struct and trait
		//ImplItem:
		//	"impl" (trait=IDENT "for")? struct=IDENT "{" methods+=ImplMethod* "}";
		public ParserRule getRule() { return rule; }

		//"impl" (trait=IDENT "for")? struct=IDENT "{" methods+=ImplMethod* "}"
		public Group getGroup() { return cGroup; }

		//"impl"
		public Keyword getImplKeyword_0() { return cImplKeyword_0; }

		//(trait=IDENT "for")?
		public Group getGroup_1() { return cGroup_1; }

		//trait=IDENT
		public Assignment getTraitAssignment_1_0() { return cTraitAssignment_1_0; }

		//IDENT
		public RuleCall getTraitIDENTTerminalRuleCall_1_0_0() { return cTraitIDENTTerminalRuleCall_1_0_0; }

		//"for"
		public Keyword getForKeyword_1_1() { return cForKeyword_1_1; }

		//struct=IDENT
		public Assignment getStructAssignment_2() { return cStructAssignment_2; }

		//IDENT
		public RuleCall getStructIDENTTerminalRuleCall_2_0() { return cStructIDENTTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//methods+=ImplMethod*
		public Assignment getMethodsAssignment_4() { return cMethodsAssignment_4; }

		//ImplMethod
		public RuleCall getMethodsImplMethodParserRuleCall_4_0() { return cMethodsImplMethodParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ImplMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cUnsafeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cUnsafeUnsafeKeyword_0_0_0 = (Keyword)cUnsafeAssignment_0_0.eContents().get(0);
		private final Assignment cExternAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cExternExternKeyword_0_1_0 = (Keyword)cExternAssignment_0_1.eContents().get(0);
		private final Keyword cFnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentIDENTTerminalRuleCall_2_0 = (RuleCall)cIdentAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_3_1_0 = (RuleCall)cParamsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParamsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_3_2_1_0 = (RuleCall)cParamsAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cArgsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cArgsArgParserRuleCall_5_0_0 = (RuleCall)cArgsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cArgsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_5_1_1_0 = (RuleCall)cArgsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cReturnTypeAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cReturnTypeTypeParserRuleCall_7_1_0 = (RuleCall)cReturnTypeAssignment_7_1.eContents().get(0);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyBlockParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		
		//ImplMethod:
		//	(unsafe?="unsafe" | extern?="extern")? "fn" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)*
		//	">")? "(" (args+=Arg ("," args+=Arg)*)? ")" ("->" returnType=Type)? body=Block;
		public ParserRule getRule() { return rule; }

		//(unsafe?="unsafe" | extern?="extern")? "fn" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)*
		//">")? "(" (args+=Arg ("," args+=Arg)*)? ")" ("->" returnType=Type)? body=Block
		public Group getGroup() { return cGroup; }

		//(unsafe?="unsafe" | extern?="extern")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//unsafe?="unsafe"
		public Assignment getUnsafeAssignment_0_0() { return cUnsafeAssignment_0_0; }

		//"unsafe"
		public Keyword getUnsafeUnsafeKeyword_0_0_0() { return cUnsafeUnsafeKeyword_0_0_0; }

		//extern?="extern"
		public Assignment getExternAssignment_0_1() { return cExternAssignment_0_1; }

		//"extern"
		public Keyword getExternExternKeyword_0_1_0() { return cExternExternKeyword_0_1_0; }

		//"fn"
		public Keyword getFnKeyword_1() { return cFnKeyword_1; }

		//ident=IDENT
		public Assignment getIdentAssignment_2() { return cIdentAssignment_2; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_2_0() { return cIdentIDENTTerminalRuleCall_2_0; }

		//("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")?
		public Group getGroup_3() { return cGroup_3; }

		//"<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_3_1() { return cParamsAssignment_3_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_3_1_0() { return cParamsGenericParamDeclParserRuleCall_3_1_0; }

		//("," params+=GenericParamDecl)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_3_2_1() { return cParamsAssignment_3_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_3_2_1_0() { return cParamsGenericParamDeclParserRuleCall_3_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(args+=Arg ("," args+=Arg)*)?
		public Group getGroup_5() { return cGroup_5; }

		//args+=Arg
		public Assignment getArgsAssignment_5_0() { return cArgsAssignment_5_0; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_5_0_0() { return cArgsArgParserRuleCall_5_0_0; }

		//("," args+=Arg)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//args+=Arg
		public Assignment getArgsAssignment_5_1_1() { return cArgsAssignment_5_1_1; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_5_1_1_0() { return cArgsArgParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//("->" returnType=Type)?
		public Group getGroup_7() { return cGroup_7; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_7_0() { return cHyphenMinusGreaterThanSignKeyword_7_0; }

		//returnType=Type
		public Assignment getReturnTypeAssignment_7_1() { return cReturnTypeAssignment_7_1; }

		//Type
		public RuleCall getReturnTypeTypeParserRuleCall_7_1_0() { return cReturnTypeTypeParserRuleCall_7_1_0; }

		//body=Block
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_8_0() { return cBodyBlockParserRuleCall_8_0; }
	}

	public class ExternBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExternBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExternKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAbiAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAbiSTRING_LITTerminalRuleCall_2_0 = (RuleCall)cAbiAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFunctionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFunctionsForeignFnParserRuleCall_4_0 = (RuleCall)cFunctionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ExternBlock:
		//	{ExternBlock} "extern" abi=STRING_LIT? "{" functions+=ForeignFn* "}";
		public ParserRule getRule() { return rule; }

		//{ExternBlock} "extern" abi=STRING_LIT? "{" functions+=ForeignFn* "}"
		public Group getGroup() { return cGroup; }

		//{ExternBlock}
		public Action getExternBlockAction_0() { return cExternBlockAction_0; }

		//"extern"
		public Keyword getExternKeyword_1() { return cExternKeyword_1; }

		//abi=STRING_LIT?
		public Assignment getAbiAssignment_2() { return cAbiAssignment_2; }

		//STRING_LIT
		public RuleCall getAbiSTRING_LITTerminalRuleCall_2_0() { return cAbiSTRING_LITTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//functions+=ForeignFn*
		public Assignment getFunctionsAssignment_4() { return cFunctionsAssignment_4; }

		//ForeignFn
		public RuleCall getFunctionsForeignFnParserRuleCall_4_0() { return cFunctionsForeignFnParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ForeignFnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForeignFn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_1_0 = (RuleCall)cIdentAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsArgParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReturnTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cReturnTypeTypeParserRuleCall_5_1_0 = (RuleCall)cReturnTypeAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ForeignFn:
		//	"fn" ident=IDENT "(" (args+=Arg ("," args+=Arg)*)? ")" ("->" returnType=Type)? ";";
		public ParserRule getRule() { return rule; }

		//"fn" ident=IDENT "(" (args+=Arg ("," args+=Arg)*)? ")" ("->" returnType=Type)? ";"
		public Group getGroup() { return cGroup; }

		//"fn"
		public Keyword getFnKeyword_0() { return cFnKeyword_0; }

		//ident=IDENT
		public Assignment getIdentAssignment_1() { return cIdentAssignment_1; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_1_0() { return cIdentIDENTTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(args+=Arg ("," args+=Arg)*)?
		public Group getGroup_3() { return cGroup_3; }

		//args+=Arg
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_3_0_0() { return cArgsArgParserRuleCall_3_0_0; }

		//("," args+=Arg)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//args+=Arg
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_3_1_1_0() { return cArgsArgParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//("->" returnType=Type)?
		public Group getGroup_5() { return cGroup_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusGreaterThanSignKeyword_5_0; }

		//returnType=Type
		public Assignment getReturnTypeAssignment_5_1() { return cReturnTypeAssignment_5_1; }

		//Type
		public RuleCall getReturnTypeTypeParserRuleCall_5_1_0() { return cReturnTypeTypeParserRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class StaticItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStaticKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMutableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMutableMUT_KEYWORDTerminalRuleCall_1_0 = (RuleCall)cMutableAssignment_1.eContents().get(0);
		private final Assignment cIdentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentIDENTTerminalRuleCall_2_0 = (RuleCall)cIdentAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExprExprParserRuleCall_5_0 = (RuleCall)cExprAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//StaticItem:
		//	"static" mutable?=MUT_KEYWORD ident=IDENT (":" type=Type)? "=" expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//"static" mutable?=MUT_KEYWORD ident=IDENT (":" type=Type)? "=" expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//"static"
		public Keyword getStaticKeyword_0() { return cStaticKeyword_0; }

		//mutable?=MUT_KEYWORD
		public Assignment getMutableAssignment_1() { return cMutableAssignment_1; }

		//MUT_KEYWORD
		public RuleCall getMutableMUT_KEYWORDTerminalRuleCall_1_0() { return cMutableMUT_KEYWORDTerminalRuleCall_1_0; }

		//ident=IDENT
		public Assignment getIdentAssignment_2() { return cIdentAssignment_2; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_2_0() { return cIdentIDENTTerminalRuleCall_2_0; }

		//(":" type=Type)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//type=Type
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_1_0() { return cTypeTypeParserRuleCall_3_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//expr=Expr
		public Assignment getExprAssignment_5() { return cExprAssignment_5; }

		//Expr
		public RuleCall getExprExprParserRuleCall_5_0() { return cExprExprParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final RuleCall cExprRValueParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr:
		//	ExprRValue;
		public ParserRule getRule() { return rule; }

		//ExprRValue
		public RuleCall getExprRValueParserRuleCall() { return cExprRValueParserRuleCall; }
	}

	public class ExprLValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprLValue");
		private final RuleCall cExprPathHeadParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExprLValue:
		//	ExprPathHead;
		public ParserRule getRule() { return rule; }

		//ExprPathHead
		public RuleCall getExprPathHeadParserRuleCall() { return cExprPathHeadParserRuleCall; }
	}

	public class ExprRValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprRValue");
		private final RuleCall cExprBinaryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExprRValue: // TODO ExprMethodCall
		//// TODO ExprIndex
		//	ExprBinary;
		public ParserRule getRule() { return rule; }

		//// TODO ExprMethodCall
		//// TODO ExprIndex
		//ExprBinary
		public RuleCall getExprBinaryParserRuleCall() { return cExprBinaryParserRuleCall; }
	}

	public class ExprRValue1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprRValue1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprLeafParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExprFieldExprAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cFieldAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cFieldIDENTTerminalRuleCall_1_0_2_0 = (RuleCall)cFieldAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Action cExprMethodCallMethodAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Group cGroup_1_0_3_2 = (Group)cGroup_1_0_3.eContents().get(2);
		private final Assignment cArgsAssignment_1_0_3_2_0 = (Assignment)cGroup_1_0_3_2.eContents().get(0);
		private final RuleCall cArgsExprParserRuleCall_1_0_3_2_0_0 = (RuleCall)cArgsAssignment_1_0_3_2_0.eContents().get(0);
		private final Group cGroup_1_0_3_2_1 = (Group)cGroup_1_0_3_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_3_2_1_0 = (Keyword)cGroup_1_0_3_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_0_3_2_1_1 = (Assignment)cGroup_1_0_3_2_1.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_1_0_3_2_1_1_0 = (RuleCall)cArgsAssignment_1_0_3_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_3_3 = (Keyword)cGroup_1_0_3.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExprIndexExprAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cIndexExprAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cIndexExprExprParserRuleCall_1_1_2_0 = (RuleCall)cIndexExprAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		
		//ExprRValue1:
		//	ExprLeaf ({ExprField.expr=current} => "." field=IDENT ({ExprMethodCall.method=current} "(" (args+=Expr (","
		//	args+=Expr))? ")")? | {ExprIndex.expr=current} => "[" indexExpr=Expr "]");
		public ParserRule getRule() { return rule; }

		//ExprLeaf ({ExprField.expr=current} => "." field=IDENT ({ExprMethodCall.method=current} "(" (args+=Expr (","
		//args+=Expr))? ")")? | {ExprIndex.expr=current} => "[" indexExpr=Expr "]")
		public Group getGroup() { return cGroup; }

		//ExprLeaf
		public RuleCall getExprLeafParserRuleCall_0() { return cExprLeafParserRuleCall_0; }

		//{ExprField.expr=current} => "." field=IDENT ({ExprMethodCall.method=current} "(" (args+=Expr ("," args+=Expr))? ")")? |
		//{ExprIndex.expr=current} => "[" indexExpr=Expr "]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{ExprField.expr=current} => "." field=IDENT ({ExprMethodCall.method=current} "(" (args+=Expr ("," args+=Expr))? ")")?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ExprField.expr=current}
		public Action getExprFieldExprAction_1_0_0() { return cExprFieldExprAction_1_0_0; }

		//=> "."
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//field=IDENT
		public Assignment getFieldAssignment_1_0_2() { return cFieldAssignment_1_0_2; }

		//IDENT
		public RuleCall getFieldIDENTTerminalRuleCall_1_0_2_0() { return cFieldIDENTTerminalRuleCall_1_0_2_0; }

		//({ExprMethodCall.method=current} "(" (args+=Expr ("," args+=Expr))? ")")?
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{ExprMethodCall.method=current}
		public Action getExprMethodCallMethodAction_1_0_3_0() { return cExprMethodCallMethodAction_1_0_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_3_1() { return cLeftParenthesisKeyword_1_0_3_1; }

		//(args+=Expr ("," args+=Expr))?
		public Group getGroup_1_0_3_2() { return cGroup_1_0_3_2; }

		//args+=Expr
		public Assignment getArgsAssignment_1_0_3_2_0() { return cArgsAssignment_1_0_3_2_0; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_1_0_3_2_0_0() { return cArgsExprParserRuleCall_1_0_3_2_0_0; }

		//"," args+=Expr
		public Group getGroup_1_0_3_2_1() { return cGroup_1_0_3_2_1; }

		//","
		public Keyword getCommaKeyword_1_0_3_2_1_0() { return cCommaKeyword_1_0_3_2_1_0; }

		//args+=Expr
		public Assignment getArgsAssignment_1_0_3_2_1_1() { return cArgsAssignment_1_0_3_2_1_1; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_1_0_3_2_1_1_0() { return cArgsExprParserRuleCall_1_0_3_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_3_3() { return cRightParenthesisKeyword_1_0_3_3; }

		//{ExprIndex.expr=current} => "[" indexExpr=Expr "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{ExprIndex.expr=current}
		public Action getExprIndexExprAction_1_1_0() { return cExprIndexExprAction_1_1_0; }

		//=> "["
		public Keyword getLeftSquareBracketKeyword_1_1_1() { return cLeftSquareBracketKeyword_1_1_1; }

		//indexExpr=Expr
		public Assignment getIndexExprAssignment_1_1_2() { return cIndexExprAssignment_1_1_2; }

		//Expr
		public RuleCall getIndexExprExprParserRuleCall_1_1_2_0() { return cIndexExprExprParserRuleCall_1_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_3() { return cRightSquareBracketKeyword_1_1_3; }
	}

	public class ExprLeafElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprLeaf");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprGroupParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExprStructParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExprVecParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExprUnaryParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExprLambdaParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExprWhileParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cExprLoopParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cExprBreakParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cExprContinueParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cExprDoParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cExprForParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cExprIfParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cExprMatchParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cExprReturnParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cExprLValueParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		
		//// Expressions that avoid left recursion
		//ExprLeaf:
		//	ExprLiteral | // TODO ExprTupleOrGroup |
		//	ExprGroup | ExprStruct | ExprVec | ExprUnary | ExprLambda | ExprWhile | ExprLoop | ExprBreak | ExprContinue | ExprDo |
		//	ExprFor | ExprIf | ExprMatch | ExprReturn | ExprLValue;
		public ParserRule getRule() { return rule; }

		//ExprLiteral | // TODO ExprTupleOrGroup |
		//ExprGroup | ExprStruct | ExprVec | ExprUnary | ExprLambda | ExprWhile | ExprLoop | ExprBreak | ExprContinue | ExprDo |
		//ExprFor | ExprIf | ExprMatch | ExprReturn | ExprLValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExprLiteral
		public RuleCall getExprLiteralParserRuleCall_0() { return cExprLiteralParserRuleCall_0; }

		//// TODO ExprTupleOrGroup |
		//ExprGroup
		public RuleCall getExprGroupParserRuleCall_1() { return cExprGroupParserRuleCall_1; }

		//ExprStruct
		public RuleCall getExprStructParserRuleCall_2() { return cExprStructParserRuleCall_2; }

		//ExprVec
		public RuleCall getExprVecParserRuleCall_3() { return cExprVecParserRuleCall_3; }

		//ExprUnary
		public RuleCall getExprUnaryParserRuleCall_4() { return cExprUnaryParserRuleCall_4; }

		//ExprLambda
		public RuleCall getExprLambdaParserRuleCall_5() { return cExprLambdaParserRuleCall_5; }

		//ExprWhile
		public RuleCall getExprWhileParserRuleCall_6() { return cExprWhileParserRuleCall_6; }

		//ExprLoop
		public RuleCall getExprLoopParserRuleCall_7() { return cExprLoopParserRuleCall_7; }

		//ExprBreak
		public RuleCall getExprBreakParserRuleCall_8() { return cExprBreakParserRuleCall_8; }

		//ExprContinue
		public RuleCall getExprContinueParserRuleCall_9() { return cExprContinueParserRuleCall_9; }

		//ExprDo
		public RuleCall getExprDoParserRuleCall_10() { return cExprDoParserRuleCall_10; }

		//ExprFor
		public RuleCall getExprForParserRuleCall_11() { return cExprForParserRuleCall_11; }

		//ExprIf
		public RuleCall getExprIfParserRuleCall_12() { return cExprIfParserRuleCall_12; }

		//ExprMatch
		public RuleCall getExprMatchParserRuleCall_13() { return cExprMatchParserRuleCall_13; }

		//ExprReturn
		public RuleCall getExprReturnParserRuleCall_14() { return cExprReturnParserRuleCall_14; }

		//ExprLValue
		public RuleCall getExprLValueParserRuleCall_15() { return cExprLValueParserRuleCall_15; }
	}

	public class ExprLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprLiteral");
		private final Assignment cLiteralAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLiteralLiteralParserRuleCall_0 = (RuleCall)cLiteralAssignment.eContents().get(0);
		
		//ExprLiteral:
		//	literal=Literal;
		public ParserRule getRule() { return rule; }

		//literal=Literal
		public Assignment getLiteralAssignment() { return cLiteralAssignment; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0() { return cLiteralLiteralParserRuleCall_0; }
	}

	public class ExprPathHeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprPathHead");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathExprPathParserRuleCall_0_0 = (RuleCall)cPathAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExprStructPathAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cStructAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cStructExprStructParserRuleCall_1_0_1_0 = (RuleCall)cStructAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExprTuplePathAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cTupleAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTupleExprTupleParserRuleCall_1_1_1_0 = (RuleCall)cTupleAssignment_1_1_1.eContents().get(0);
		
		//ExprPathHead:
		//	path=ExprPath ({ExprStruct.path=current} struct=ExprStruct | {ExprTuple.path=current} tuple=ExprTuple)?;
		public ParserRule getRule() { return rule; }

		//path=ExprPath ({ExprStruct.path=current} struct=ExprStruct | {ExprTuple.path=current} tuple=ExprTuple)?
		public Group getGroup() { return cGroup; }

		//path=ExprPath
		public Assignment getPathAssignment_0() { return cPathAssignment_0; }

		//ExprPath
		public RuleCall getPathExprPathParserRuleCall_0_0() { return cPathExprPathParserRuleCall_0_0; }

		//({ExprStruct.path=current} struct=ExprStruct | {ExprTuple.path=current} tuple=ExprTuple)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{ExprStruct.path=current} struct=ExprStruct
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ExprStruct.path=current}
		public Action getExprStructPathAction_1_0_0() { return cExprStructPathAction_1_0_0; }

		//struct=ExprStruct
		public Assignment getStructAssignment_1_0_1() { return cStructAssignment_1_0_1; }

		//ExprStruct
		public RuleCall getStructExprStructParserRuleCall_1_0_1_0() { return cStructExprStructParserRuleCall_1_0_1_0; }

		//{ExprTuple.path=current} tuple=ExprTuple
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{ExprTuple.path=current}
		public Action getExprTuplePathAction_1_1_0() { return cExprTuplePathAction_1_1_0; }

		//tuple=ExprTuple
		public Assignment getTupleAssignment_1_1_1() { return cTupleAssignment_1_1_1; }

		//ExprTuple
		public RuleCall getTupleExprTupleParserRuleCall_1_1_1_0() { return cTupleExprTupleParserRuleCall_1_1_1_0; }
	}

	public class ExprGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cExprTupleExprsAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cExprsAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cExprsExprParserRuleCall_2_2_0_0 = (RuleCall)cExprsAssignment_2_2_0.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cGroup_2_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_2_1_0 = (Keyword)cGroup_2_2_1.eContents().get(0);
		private final Assignment cExprsAssignment_2_2_1_1 = (Assignment)cGroup_2_2_1.eContents().get(1);
		private final RuleCall cExprsExprParserRuleCall_2_2_1_1_0 = (RuleCall)cExprsAssignment_2_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExprGroup:
		//	"(" expr=Expr ({ExprTuple.exprs+=current} "," (exprs+=Expr ("," exprs+=Expr)* ","?)?)? ")";
		public ParserRule getRule() { return rule; }

		//"(" expr=Expr ({ExprTuple.exprs+=current} "," (exprs+=Expr ("," exprs+=Expr)* ","?)?)? ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }

		//({ExprTuple.exprs+=current} "," (exprs+=Expr ("," exprs+=Expr)* ","?)?)?
		public Group getGroup_2() { return cGroup_2; }

		//{ExprTuple.exprs+=current}
		public Action getExprTupleExprsAction_2_0() { return cExprTupleExprsAction_2_0; }

		//","
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//(exprs+=Expr ("," exprs+=Expr)* ","?)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//exprs+=Expr
		public Assignment getExprsAssignment_2_2_0() { return cExprsAssignment_2_2_0; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_2_2_0_0() { return cExprsExprParserRuleCall_2_2_0_0; }

		//("," exprs+=Expr)*
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }

		//","
		public Keyword getCommaKeyword_2_2_1_0() { return cCommaKeyword_2_2_1_0; }

		//exprs+=Expr
		public Assignment getExprsAssignment_2_2_1_1() { return cExprsAssignment_2_2_1_1; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_2_2_1_1_0() { return cExprsExprParserRuleCall_2_2_1_1_0; }

		//","?
		public Keyword getCommaKeyword_2_2_2() { return cCommaKeyword_2_2_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ExprTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprTuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprsExprParserRuleCall_1_0 = (RuleCall)cExprsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprsExprParserRuleCall_2_1_0 = (RuleCall)cExprsAssignment_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExprTuple:
		//	"(" exprs+=Expr ("," exprs+=Expr)* ","? ")";
		public ParserRule getRule() { return rule; }

		//"(" exprs+=Expr ("," exprs+=Expr)* ","? ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//exprs+=Expr
		public Assignment getExprsAssignment_1() { return cExprsAssignment_1; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_1_0() { return cExprsExprParserRuleCall_1_0; }

		//("," exprs+=Expr)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//exprs+=Expr
		public Assignment getExprsAssignment_2_1() { return cExprsAssignment_2_1; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_2_1_0() { return cExprsExprParserRuleCall_2_1_0; }

		//","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ExprStructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprStruct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldsStructFieldParserRuleCall_1_0 = (RuleCall)cFieldsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFieldsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFieldsStructFieldParserRuleCall_2_1_0 = (RuleCall)cFieldsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFullStopFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBaseExprAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBaseExprExprParserRuleCall_3_1_0 = (RuleCall)cBaseExprAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExprStruct:
		//	"{" fields+=StructField ("," fields+=StructField)* (".." baseExpr=Expr)? "}";
		public ParserRule getRule() { return rule; }

		//"{" fields+=StructField ("," fields+=StructField)* (".." baseExpr=Expr)? "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//fields+=StructField
		public Assignment getFieldsAssignment_1() { return cFieldsAssignment_1; }

		//StructField
		public RuleCall getFieldsStructFieldParserRuleCall_1_0() { return cFieldsStructFieldParserRuleCall_1_0; }

		//("," fields+=StructField)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//fields+=StructField
		public Assignment getFieldsAssignment_2_1() { return cFieldsAssignment_2_1; }

		//StructField
		public RuleCall getFieldsStructFieldParserRuleCall_2_1_0() { return cFieldsStructFieldParserRuleCall_2_1_0; }

		//(".." baseExpr=Expr)?
		public Group getGroup_3() { return cGroup_3; }

		//".."
		public Keyword getFullStopFullStopKeyword_3_0() { return cFullStopFullStopKeyword_3_0; }

		//baseExpr=Expr
		public Assignment getBaseExprAssignment_3_1() { return cBaseExprAssignment_3_1; }

		//Expr
		public RuleCall getBaseExprExprParserRuleCall_3_1_0() { return cBaseExprExprParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ExprVecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprVec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMutableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMutableMUT_KEYWORDTerminalRuleCall_1_0 = (RuleCall)cMutableAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExprsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExprsExprParserRuleCall_2_0_0 = (RuleCall)cExprsAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Group cGroup_2_2_0 = (Group)cAlternatives_2_2.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_2_0_0 = (Keyword)cGroup_2_2_0.eContents().get(0);
		private final Assignment cLenExprAssignment_2_2_0_1 = (Assignment)cGroup_2_2_0.eContents().get(1);
		private final RuleCall cLenExprExprParserRuleCall_2_2_0_1_0 = (RuleCall)cLenExprAssignment_2_2_0_1.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cAlternatives_2_2.eContents().get(1);
		private final Assignment cExprsAssignment_2_2_1_0 = (Assignment)cGroup_2_2_1.eContents().get(0);
		private final RuleCall cExprsExprParserRuleCall_2_2_1_0_0 = (RuleCall)cExprsAssignment_2_2_1_0.eContents().get(0);
		private final Group cGroup_2_2_1_1 = (Group)cGroup_2_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_2_1_1_0 = (Keyword)cGroup_2_2_1_1.eContents().get(0);
		private final Assignment cExprsAssignment_2_2_1_1_1 = (Assignment)cGroup_2_2_1_1.eContents().get(1);
		private final RuleCall cExprsExprParserRuleCall_2_2_1_1_1_0 = (RuleCall)cExprsAssignment_2_2_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExprVec:
		//	"[" mutable?=MUT_KEYWORD (exprs+=Expr "," (".." lenExpr=Expr | exprs+=Expr ("," exprs+=Expr)+))? "]";
		public ParserRule getRule() { return rule; }

		//"[" mutable?=MUT_KEYWORD (exprs+=Expr "," (".." lenExpr=Expr | exprs+=Expr ("," exprs+=Expr)+))? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//mutable?=MUT_KEYWORD
		public Assignment getMutableAssignment_1() { return cMutableAssignment_1; }

		//MUT_KEYWORD
		public RuleCall getMutableMUT_KEYWORDTerminalRuleCall_1_0() { return cMutableMUT_KEYWORDTerminalRuleCall_1_0; }

		//(exprs+=Expr "," (".." lenExpr=Expr | exprs+=Expr ("," exprs+=Expr)+))?
		public Group getGroup_2() { return cGroup_2; }

		//exprs+=Expr
		public Assignment getExprsAssignment_2_0() { return cExprsAssignment_2_0; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_2_0_0() { return cExprsExprParserRuleCall_2_0_0; }

		//","
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//".." lenExpr=Expr | exprs+=Expr ("," exprs+=Expr)+
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }

		//".." lenExpr=Expr
		public Group getGroup_2_2_0() { return cGroup_2_2_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2_2_0_0() { return cFullStopFullStopKeyword_2_2_0_0; }

		//lenExpr=Expr
		public Assignment getLenExprAssignment_2_2_0_1() { return cLenExprAssignment_2_2_0_1; }

		//Expr
		public RuleCall getLenExprExprParserRuleCall_2_2_0_1_0() { return cLenExprExprParserRuleCall_2_2_0_1_0; }

		//exprs+=Expr ("," exprs+=Expr)+
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }

		//exprs+=Expr
		public Assignment getExprsAssignment_2_2_1_0() { return cExprsAssignment_2_2_1_0; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_2_2_1_0_0() { return cExprsExprParserRuleCall_2_2_1_0_0; }

		//("," exprs+=Expr)+
		public Group getGroup_2_2_1_1() { return cGroup_2_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_2_1_1_0() { return cCommaKeyword_2_2_1_1_0; }

		//exprs+=Expr
		public Assignment getExprsAssignment_2_2_1_1_1() { return cExprsAssignment_2_2_1_1_1; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_2_2_1_1_1_0() { return cExprsExprParserRuleCall_2_2_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ExprUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericNegationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDereferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLogicalNegationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cManagedBoxParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOwnedBoxParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBorrowParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ExprUnary:
		//	NumericNegation | Dereference | LogicalNegation | ManagedBox | OwnedBox | Borrow;
		public ParserRule getRule() { return rule; }

		//NumericNegation | Dereference | LogicalNegation | ManagedBox | OwnedBox | Borrow
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumericNegation
		public RuleCall getNumericNegationParserRuleCall_0() { return cNumericNegationParserRuleCall_0; }

		//Dereference
		public RuleCall getDereferenceParserRuleCall_1() { return cDereferenceParserRuleCall_1; }

		//LogicalNegation
		public RuleCall getLogicalNegationParserRuleCall_2() { return cLogicalNegationParserRuleCall_2; }

		//ManagedBox
		public RuleCall getManagedBoxParserRuleCall_3() { return cManagedBoxParserRuleCall_3; }

		//OwnedBox
		public RuleCall getOwnedBoxParserRuleCall_4() { return cOwnedBoxParserRuleCall_4; }

		//Borrow
		public RuleCall getBorrowParserRuleCall_5() { return cBorrowParserRuleCall_5; }
	}

	public class NumericNegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericNegation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprLeafParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//NumericNegation:
		//	"-" expr=ExprLeaf;
		public ParserRule getRule() { return rule; }

		//"-" expr=ExprLeaf
		public Group getGroup() { return cGroup; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//expr=ExprLeaf
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//ExprLeaf
		public RuleCall getExprExprLeafParserRuleCall_1_0() { return cExprExprLeafParserRuleCall_1_0; }
	}

	public class DereferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dereference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprLeafParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//Dereference:
		//	"*" expr=ExprLeaf;
		public ParserRule getRule() { return rule; }

		//"*" expr=ExprLeaf
		public Group getGroup() { return cGroup; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//expr=ExprLeaf
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//ExprLeaf
		public RuleCall getExprExprLeafParserRuleCall_1_0() { return cExprExprLeafParserRuleCall_1_0; }
	}

	public class LogicalNegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalNegation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprLeafParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//LogicalNegation:
		//	"!" expr=ExprLeaf;
		public ParserRule getRule() { return rule; }

		//"!" expr=ExprLeaf
		public Group getGroup() { return cGroup; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//expr=ExprLeaf
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//ExprLeaf
		public RuleCall getExprExprLeafParserRuleCall_1_0() { return cExprExprLeafParserRuleCall_1_0; }
	}

	public class ManagedBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ManagedBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprLeafParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//ManagedBox:
		//	"@" expr=ExprLeaf;
		public ParserRule getRule() { return rule; }

		//"@" expr=ExprLeaf
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//expr=ExprLeaf
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//ExprLeaf
		public RuleCall getExprExprLeafParserRuleCall_1_0() { return cExprExprLeafParserRuleCall_1_0; }
	}

	public class OwnedBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OwnedBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTildeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprLeafParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//OwnedBox:
		//	"~" expr=ExprLeaf;
		public ParserRule getRule() { return rule; }

		//"~" expr=ExprLeaf
		public Group getGroup() { return cGroup; }

		//"~"
		public Keyword getTildeKeyword_0() { return cTildeKeyword_0; }

		//expr=ExprLeaf
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//ExprLeaf
		public RuleCall getExprExprLeafParserRuleCall_1_0() { return cExprExprLeafParserRuleCall_1_0; }
	}

	public class BorrowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Borrow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprLeafParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//Borrow:
		//	"&" expr=ExprLeaf;
		public ParserRule getRule() { return rule; }

		//"&" expr=ExprLeaf
		public Group getGroup() { return cGroup; }

		//"&"
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }

		//expr=ExprLeaf
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//ExprLeaf
		public RuleCall getExprExprLeafParserRuleCall_1_0() { return cExprExprLeafParserRuleCall_1_0; }
	}

	public class ExprBinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprBinary");
		private final RuleCall cAssignParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExprBinary:
		//	Assign;
		public ParserRule getRule() { return rule; }

		//Assign
		public RuleCall getAssignParserRuleCall() { return cAssignParserRuleCall; }
	}

	public class DivisionMultiplicationOrModuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DivisionMultiplicationOrModulo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprRValue1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cDivisionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_0_2 = (Assignment)cGroup_1_0_0.eContents().get(2);
		private final RuleCall cRightExprRValue1ParserRuleCall_1_0_0_2_0 = (RuleCall)cRightAssignment_1_0_0_2.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1_2 = (Assignment)cGroup_1_0_1.eContents().get(2);
		private final RuleCall cRightExprRValue1ParserRuleCall_1_0_1_2_0 = (RuleCall)cRightAssignment_1_0_1_2.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cModuloLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2_2 = (Assignment)cGroup_1_0_2.eContents().get(2);
		private final RuleCall cRightExprRValue1ParserRuleCall_1_0_2_2_0 = (RuleCall)cRightAssignment_1_0_2_2.eContents().get(0);
		
		//DivisionMultiplicationOrModulo:
		//	ExprRValue1 => ({Division.left=current} "/" right=ExprRValue1 | {Multiplication.left=current} "*" right=ExprRValue1 |
		//	{Modulo.left=current} "%" right=ExprRValue1)?;
		public ParserRule getRule() { return rule; }

		//ExprRValue1 => ({Division.left=current} "/" right=ExprRValue1 | {Multiplication.left=current} "*" right=ExprRValue1 |
		//{Modulo.left=current} "%" right=ExprRValue1)?
		public Group getGroup() { return cGroup; }

		//ExprRValue1
		public RuleCall getExprRValue1ParserRuleCall_0() { return cExprRValue1ParserRuleCall_0; }

		//=> ({Division.left=current} "/" right=ExprRValue1 | {Multiplication.left=current} "*" right=ExprRValue1 |
		//{Modulo.left=current} "%" right=ExprRValue1)?
		public Group getGroup_1() { return cGroup_1; }

		//{Division.left=current} "/" right=ExprRValue1 | {Multiplication.left=current} "*" right=ExprRValue1 |
		//{Modulo.left=current} "%" right=ExprRValue1
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Division.left=current} "/" right=ExprRValue1
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Division.left=current}
		public Action getDivisionLeftAction_1_0_0_0() { return cDivisionLeftAction_1_0_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_0_1() { return cSolidusKeyword_1_0_0_1; }

		//right=ExprRValue1
		public Assignment getRightAssignment_1_0_0_2() { return cRightAssignment_1_0_0_2; }

		//ExprRValue1
		public RuleCall getRightExprRValue1ParserRuleCall_1_0_0_2_0() { return cRightExprRValue1ParserRuleCall_1_0_0_2_0; }

		//{Multiplication.left=current} "*" right=ExprRValue1
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0_1_0() { return cMultiplicationLeftAction_1_0_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_1_1() { return cAsteriskKeyword_1_0_1_1; }

		//right=ExprRValue1
		public Assignment getRightAssignment_1_0_1_2() { return cRightAssignment_1_0_1_2; }

		//ExprRValue1
		public RuleCall getRightExprRValue1ParserRuleCall_1_0_1_2_0() { return cRightExprRValue1ParserRuleCall_1_0_1_2_0; }

		//{Modulo.left=current} "%" right=ExprRValue1
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{Modulo.left=current}
		public Action getModuloLeftAction_1_0_2_0() { return cModuloLeftAction_1_0_2_0; }

		//"%"
		public Keyword getPercentSignKeyword_1_0_2_1() { return cPercentSignKeyword_1_0_2_1; }

		//right=ExprRValue1
		public Assignment getRightAssignment_1_0_2_2() { return cRightAssignment_1_0_2_2; }

		//ExprRValue1
		public RuleCall getRightExprRValue1ParserRuleCall_1_0_2_2_0() { return cRightExprRValue1ParserRuleCall_1_0_2_2_0; }
	}

	public class AsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "As");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivisionMultiplicationOrModuloParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cExprCastExprAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_1_0_2_0 = (RuleCall)cTypeAssignment_1_0_2.eContents().get(0);
		
		//As:
		//	DivisionMultiplicationOrModulo => ({ExprCast.expr=current} "as" type=Type)?;
		public ParserRule getRule() { return rule; }

		//DivisionMultiplicationOrModulo => ({ExprCast.expr=current} "as" type=Type)?
		public Group getGroup() { return cGroup; }

		//DivisionMultiplicationOrModulo
		public RuleCall getDivisionMultiplicationOrModuloParserRuleCall_0() { return cDivisionMultiplicationOrModuloParserRuleCall_0; }

		//=> ({ExprCast.expr=current} "as" type=Type)?
		public Group getGroup_1() { return cGroup_1; }

		//{ExprCast.expr=current} "as" type=Type
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ExprCast.expr=current}
		public Action getExprCastExprAction_1_0_0() { return cExprCastExprAction_1_0_0; }

		//"as"
		public Keyword getAsKeyword_1_0_1() { return cAsKeyword_1_0_1; }

		//type=Type
		public Assignment getTypeAssignment_1_0_2() { return cTypeAssignment_1_0_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0_2_0() { return cTypeTypeParserRuleCall_1_0_2_0; }
	}

	public class AdditionOrSubtractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditionOrSubtraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cExprAdditionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_0_2 = (Assignment)cGroup_1_0_0.eContents().get(2);
		private final RuleCall cRightAsParserRuleCall_1_0_0_2_0 = (RuleCall)cRightAssignment_1_0_0_2.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cExprSubtractionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1_2 = (Assignment)cGroup_1_0_1.eContents().get(2);
		private final RuleCall cRightAsParserRuleCall_1_0_1_2_0 = (RuleCall)cRightAssignment_1_0_1_2.eContents().get(0);
		
		//AdditionOrSubtraction:
		//	As => ({ExprAddition.left=current} "+" right=As | {ExprSubtraction.left=current} "-" right=As)?;
		public ParserRule getRule() { return rule; }

		//As => ({ExprAddition.left=current} "+" right=As | {ExprSubtraction.left=current} "-" right=As)?
		public Group getGroup() { return cGroup; }

		//As
		public RuleCall getAsParserRuleCall_0() { return cAsParserRuleCall_0; }

		//=> ({ExprAddition.left=current} "+" right=As | {ExprSubtraction.left=current} "-" right=As)?
		public Group getGroup_1() { return cGroup_1; }

		//{ExprAddition.left=current} "+" right=As | {ExprSubtraction.left=current} "-" right=As
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ExprAddition.left=current} "+" right=As
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ExprAddition.left=current}
		public Action getExprAdditionLeftAction_1_0_0_0() { return cExprAdditionLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//right=As
		public Assignment getRightAssignment_1_0_0_2() { return cRightAssignment_1_0_0_2; }

		//As
		public RuleCall getRightAsParserRuleCall_1_0_0_2_0() { return cRightAsParserRuleCall_1_0_0_2_0; }

		//{ExprSubtraction.left=current} "-" right=As
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ExprSubtraction.left=current}
		public Action getExprSubtractionLeftAction_1_0_1_0() { return cExprSubtractionLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=As
		public Assignment getRightAssignment_1_0_1_2() { return cRightAssignment_1_0_1_2; }

		//As
		public RuleCall getRightAsParserRuleCall_1_0_1_2_0() { return cRightAsParserRuleCall_1_0_1_2_0; }
	}

	public class ShiftOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionOrSubtractionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cExprLeftShiftLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_0_2 = (Assignment)cGroup_1_0_0.eContents().get(2);
		private final RuleCall cRightAdditionOrSubtractionParserRuleCall_1_0_0_2_0 = (RuleCall)cRightAssignment_1_0_0_2.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cExprRightShiftLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1_2 = (Assignment)cGroup_1_0_1.eContents().get(2);
		private final RuleCall cRightAdditionOrSubtractionParserRuleCall_1_0_1_2_0 = (RuleCall)cRightAssignment_1_0_1_2.eContents().get(0);
		
		//ShiftOperator:
		//	AdditionOrSubtraction => ({ExprLeftShift.left=current} "<<" right=AdditionOrSubtraction |
		//	{ExprRightShift.left=current} ">>" right=AdditionOrSubtraction)?;
		public ParserRule getRule() { return rule; }

		//AdditionOrSubtraction => ({ExprLeftShift.left=current} "<<" right=AdditionOrSubtraction | {ExprRightShift.left=current}
		//">>" right=AdditionOrSubtraction)?
		public Group getGroup() { return cGroup; }

		//AdditionOrSubtraction
		public RuleCall getAdditionOrSubtractionParserRuleCall_0() { return cAdditionOrSubtractionParserRuleCall_0; }

		//=> ({ExprLeftShift.left=current} "<<" right=AdditionOrSubtraction | {ExprRightShift.left=current} ">>"
		//right=AdditionOrSubtraction)?
		public Group getGroup_1() { return cGroup_1; }

		//{ExprLeftShift.left=current} "<<" right=AdditionOrSubtraction | {ExprRightShift.left=current} ">>"
		//right=AdditionOrSubtraction
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ExprLeftShift.left=current} "<<" right=AdditionOrSubtraction
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ExprLeftShift.left=current}
		public Action getExprLeftShiftLeftAction_1_0_0_0() { return cExprLeftShiftLeftAction_1_0_0_0; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_1_0_0_1() { return cLessThanSignLessThanSignKeyword_1_0_0_1; }

		//right=AdditionOrSubtraction
		public Assignment getRightAssignment_1_0_0_2() { return cRightAssignment_1_0_0_2; }

		//AdditionOrSubtraction
		public RuleCall getRightAdditionOrSubtractionParserRuleCall_1_0_0_2_0() { return cRightAdditionOrSubtractionParserRuleCall_1_0_0_2_0; }

		//{ExprRightShift.left=current} ">>" right=AdditionOrSubtraction
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ExprRightShift.left=current}
		public Action getExprRightShiftLeftAction_1_0_1_0() { return cExprRightShiftLeftAction_1_0_1_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1_0_1_1() { return cGreaterThanSignGreaterThanSignKeyword_1_0_1_1; }

		//right=AdditionOrSubtraction
		public Assignment getRightAssignment_1_0_1_2() { return cRightAssignment_1_0_1_2; }

		//AdditionOrSubtraction
		public RuleCall getRightAdditionOrSubtractionParserRuleCall_1_0_1_2_0() { return cRightAdditionOrSubtractionParserRuleCall_1_0_1_2_0; }
	}

	public class BitwiseAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cShiftOperatorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cExprBitwiseAndLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightShiftOperatorParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//BitwiseAnd:
		//	ShiftOperator => ({ExprBitwiseAnd.left=current} "&" right=ShiftOperator)?;
		public ParserRule getRule() { return rule; }

		//ShiftOperator => ({ExprBitwiseAnd.left=current} "&" right=ShiftOperator)?
		public Group getGroup() { return cGroup; }

		//ShiftOperator
		public RuleCall getShiftOperatorParserRuleCall_0() { return cShiftOperatorParserRuleCall_0; }

		//=> ({ExprBitwiseAnd.left=current} "&" right=ShiftOperator)?
		public Group getGroup_1() { return cGroup_1; }

		//{ExprBitwiseAnd.left=current} "&" right=ShiftOperator
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ExprBitwiseAnd.left=current}
		public Action getExprBitwiseAndLeftAction_1_0_0() { return cExprBitwiseAndLeftAction_1_0_0; }

		//"&"
		public Keyword getAmpersandKeyword_1_0_1() { return cAmpersandKeyword_1_0_1; }

		//right=ShiftOperator
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//ShiftOperator
		public RuleCall getRightShiftOperatorParserRuleCall_1_0_2_0() { return cRightShiftOperatorParserRuleCall_1_0_2_0; }
	}

	public class BitwiseXorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseXor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cExprBitwiseXorLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightBitwiseAndParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//BitwiseXor:
		//	BitwiseAnd => ({ExprBitwiseXor.left=current} "^" right=BitwiseAnd)?;
		public ParserRule getRule() { return rule; }

		//BitwiseAnd => ({ExprBitwiseXor.left=current} "^" right=BitwiseAnd)?
		public Group getGroup() { return cGroup; }

		//BitwiseAnd
		public RuleCall getBitwiseAndParserRuleCall_0() { return cBitwiseAndParserRuleCall_0; }

		//=> ({ExprBitwiseXor.left=current} "^" right=BitwiseAnd)?
		public Group getGroup_1() { return cGroup_1; }

		//{ExprBitwiseXor.left=current} "^" right=BitwiseAnd
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ExprBitwiseXor.left=current}
		public Action getExprBitwiseXorLeftAction_1_0_0() { return cExprBitwiseXorLeftAction_1_0_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_0_1() { return cCircumflexAccentKeyword_1_0_1; }

		//right=BitwiseAnd
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//BitwiseAnd
		public RuleCall getRightBitwiseAndParserRuleCall_1_0_2_0() { return cRightBitwiseAndParserRuleCall_1_0_2_0; }
	}

	public class BitwiseOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseXorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cExprBitwiseOrLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightBitwiseXorParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//BitwiseOr:
		//	BitwiseXor => ({ExprBitwiseOr.left=current} "|" right=BitwiseXor)?;
		public ParserRule getRule() { return rule; }

		//BitwiseXor => ({ExprBitwiseOr.left=current} "|" right=BitwiseXor)?
		public Group getGroup() { return cGroup; }

		//BitwiseXor
		public RuleCall getBitwiseXorParserRuleCall_0() { return cBitwiseXorParserRuleCall_0; }

		//=> ({ExprBitwiseOr.left=current} "|" right=BitwiseXor)?
		public Group getGroup_1() { return cGroup_1; }

		//{ExprBitwiseOr.left=current} "|" right=BitwiseXor
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ExprBitwiseOr.left=current}
		public Action getExprBitwiseOrLeftAction_1_0_0() { return cExprBitwiseOrLeftAction_1_0_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0_1() { return cVerticalLineKeyword_1_0_1; }

		//right=BitwiseXor
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//BitwiseXor
		public RuleCall getRightBitwiseXorParserRuleCall_1_0_2_0() { return cRightBitwiseXorParserRuleCall_1_0_2_0; }
	}

	public class ComparisonOperatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonOperators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cExprLessThanLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_0_2 = (Assignment)cGroup_1_0_0.eContents().get(2);
		private final RuleCall cRightBitwiseOrParserRuleCall_1_0_0_2_0 = (RuleCall)cRightAssignment_1_0_0_2.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cExprGreaterThanLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1_2 = (Assignment)cGroup_1_0_1.eContents().get(2);
		private final RuleCall cRightBitwiseOrParserRuleCall_1_0_1_2_0 = (RuleCall)cRightAssignment_1_0_1_2.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cExprLessThanOrEqualToLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2_2 = (Assignment)cGroup_1_0_2.eContents().get(2);
		private final RuleCall cRightBitwiseOrParserRuleCall_1_0_2_2_0 = (RuleCall)cRightAssignment_1_0_2_2.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cExprGreaterThanOrEqualToLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Assignment cRightAssignment_1_0_3_2 = (Assignment)cGroup_1_0_3.eContents().get(2);
		private final RuleCall cRightBitwiseOrParserRuleCall_1_0_3_2_0 = (RuleCall)cRightAssignment_1_0_3_2.eContents().get(0);
		
		//ComparisonOperators:
		//	BitwiseOr => ({ExprLessThan.left=current} "<" right=BitwiseOr | {ExprGreaterThan.left=current} ">" right=BitwiseOr |
		//	{ExprLessThanOrEqualTo.left=current} "<=" right=BitwiseOr | {ExprGreaterThanOrEqualTo.left=current} ">="
		//	right=BitwiseOr)?;
		public ParserRule getRule() { return rule; }

		//BitwiseOr => ({ExprLessThan.left=current} "<" right=BitwiseOr | {ExprGreaterThan.left=current} ">" right=BitwiseOr |
		//{ExprLessThanOrEqualTo.left=current} "<=" right=BitwiseOr | {ExprGreaterThanOrEqualTo.left=current} ">="
		//right=BitwiseOr)?
		public Group getGroup() { return cGroup; }

		//BitwiseOr
		public RuleCall getBitwiseOrParserRuleCall_0() { return cBitwiseOrParserRuleCall_0; }

		//=> ({ExprLessThan.left=current} "<" right=BitwiseOr | {ExprGreaterThan.left=current} ">" right=BitwiseOr |
		//{ExprLessThanOrEqualTo.left=current} "<=" right=BitwiseOr | {ExprGreaterThanOrEqualTo.left=current} ">="
		//right=BitwiseOr)?
		public Group getGroup_1() { return cGroup_1; }

		//{ExprLessThan.left=current} "<" right=BitwiseOr | {ExprGreaterThan.left=current} ">" right=BitwiseOr |
		//{ExprLessThanOrEqualTo.left=current} "<=" right=BitwiseOr | {ExprGreaterThanOrEqualTo.left=current} ">="
		//right=BitwiseOr
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ExprLessThan.left=current} "<" right=BitwiseOr
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ExprLessThan.left=current}
		public Action getExprLessThanLeftAction_1_0_0_0() { return cExprLessThanLeftAction_1_0_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0_0_1() { return cLessThanSignKeyword_1_0_0_1; }

		//right=BitwiseOr
		public Assignment getRightAssignment_1_0_0_2() { return cRightAssignment_1_0_0_2; }

		//BitwiseOr
		public RuleCall getRightBitwiseOrParserRuleCall_1_0_0_2_0() { return cRightBitwiseOrParserRuleCall_1_0_0_2_0; }

		//{ExprGreaterThan.left=current} ">" right=BitwiseOr
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ExprGreaterThan.left=current}
		public Action getExprGreaterThanLeftAction_1_0_1_0() { return cExprGreaterThanLeftAction_1_0_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0_1_1() { return cGreaterThanSignKeyword_1_0_1_1; }

		//right=BitwiseOr
		public Assignment getRightAssignment_1_0_1_2() { return cRightAssignment_1_0_1_2; }

		//BitwiseOr
		public RuleCall getRightBitwiseOrParserRuleCall_1_0_1_2_0() { return cRightBitwiseOrParserRuleCall_1_0_1_2_0; }

		//{ExprLessThanOrEqualTo.left=current} "<=" right=BitwiseOr
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{ExprLessThanOrEqualTo.left=current}
		public Action getExprLessThanOrEqualToLeftAction_1_0_2_0() { return cExprLessThanOrEqualToLeftAction_1_0_2_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_2_1() { return cLessThanSignEqualsSignKeyword_1_0_2_1; }

		//right=BitwiseOr
		public Assignment getRightAssignment_1_0_2_2() { return cRightAssignment_1_0_2_2; }

		//BitwiseOr
		public RuleCall getRightBitwiseOrParserRuleCall_1_0_2_2_0() { return cRightBitwiseOrParserRuleCall_1_0_2_2_0; }

		//{ExprGreaterThanOrEqualTo.left=current} ">=" right=BitwiseOr
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{ExprGreaterThanOrEqualTo.left=current}
		public Action getExprGreaterThanOrEqualToLeftAction_1_0_3_0() { return cExprGreaterThanOrEqualToLeftAction_1_0_3_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_3_1() { return cGreaterThanSignEqualsSignKeyword_1_0_3_1; }

		//right=BitwiseOr
		public Assignment getRightAssignment_1_0_3_2() { return cRightAssignment_1_0_3_2; }

		//BitwiseOr
		public RuleCall getRightBitwiseOrParserRuleCall_1_0_3_2_0() { return cRightBitwiseOrParserRuleCall_1_0_3_2_0; }
	}

	public class EqualityOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonOperatorsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cExprEqualToLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_0_2 = (Assignment)cGroup_1_0_0.eContents().get(2);
		private final RuleCall cRightComparisonOperatorsParserRuleCall_1_0_0_2_0 = (RuleCall)cRightAssignment_1_0_0_2.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cExprNotEqualToLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1_2 = (Assignment)cGroup_1_0_1.eContents().get(2);
		private final RuleCall cRightComparisonOperatorsParserRuleCall_1_0_1_2_0 = (RuleCall)cRightAssignment_1_0_1_2.eContents().get(0);
		
		//EqualityOperator:
		//	ComparisonOperators => ({ExprEqualTo.left=current} "==" right=ComparisonOperators | {ExprNotEqualTo.left=current} "!="
		//	right=ComparisonOperators)?;
		public ParserRule getRule() { return rule; }

		//ComparisonOperators => ({ExprEqualTo.left=current} "==" right=ComparisonOperators | {ExprNotEqualTo.left=current} "!="
		//right=ComparisonOperators)?
		public Group getGroup() { return cGroup; }

		//ComparisonOperators
		public RuleCall getComparisonOperatorsParserRuleCall_0() { return cComparisonOperatorsParserRuleCall_0; }

		//=> ({ExprEqualTo.left=current} "==" right=ComparisonOperators | {ExprNotEqualTo.left=current} "!="
		//right=ComparisonOperators)?
		public Group getGroup_1() { return cGroup_1; }

		//{ExprEqualTo.left=current} "==" right=ComparisonOperators | {ExprNotEqualTo.left=current} "!=" right=ComparisonOperators
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ExprEqualTo.left=current} "==" right=ComparisonOperators
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ExprEqualTo.left=current}
		public Action getExprEqualToLeftAction_1_0_0_0() { return cExprEqualToLeftAction_1_0_0_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_1() { return cEqualsSignEqualsSignKeyword_1_0_0_1; }

		//right=ComparisonOperators
		public Assignment getRightAssignment_1_0_0_2() { return cRightAssignment_1_0_0_2; }

		//ComparisonOperators
		public RuleCall getRightComparisonOperatorsParserRuleCall_1_0_0_2_0() { return cRightComparisonOperatorsParserRuleCall_1_0_0_2_0; }

		//{ExprNotEqualTo.left=current} "!=" right=ComparisonOperators
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ExprNotEqualTo.left=current}
		public Action getExprNotEqualToLeftAction_1_0_1_0() { return cExprNotEqualToLeftAction_1_0_1_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1_1() { return cExclamationMarkEqualsSignKeyword_1_0_1_1; }

		//right=ComparisonOperators
		public Assignment getRightAssignment_1_0_1_2() { return cRightAssignment_1_0_1_2; }

		//ComparisonOperators
		public RuleCall getRightComparisonOperatorsParserRuleCall_1_0_1_2_0() { return cRightComparisonOperatorsParserRuleCall_1_0_1_2_0; }
	}

	public class BooleanAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityOperatorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cExprBooleanAndLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightEqualityOperatorParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//BooleanAnd:
		//	EqualityOperator => ({ExprBooleanAnd.left=current} "&&" right=EqualityOperator)?;
		public ParserRule getRule() { return rule; }

		//EqualityOperator => ({ExprBooleanAnd.left=current} "&&" right=EqualityOperator)?
		public Group getGroup() { return cGroup; }

		//EqualityOperator
		public RuleCall getEqualityOperatorParserRuleCall_0() { return cEqualityOperatorParserRuleCall_0; }

		//=> ({ExprBooleanAnd.left=current} "&&" right=EqualityOperator)?
		public Group getGroup_1() { return cGroup_1; }

		//{ExprBooleanAnd.left=current} "&&" right=EqualityOperator
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ExprBooleanAnd.left=current}
		public Action getExprBooleanAndLeftAction_1_0_0() { return cExprBooleanAndLeftAction_1_0_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0_1() { return cAmpersandAmpersandKeyword_1_0_1; }

		//right=EqualityOperator
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//EqualityOperator
		public RuleCall getRightEqualityOperatorParserRuleCall_1_0_2_0() { return cRightEqualityOperatorParserRuleCall_1_0_2_0; }
	}

	public class BooleanOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBooleanAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cExprBooleanOrLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightBooleanAndParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//BooleanOr:
		//	BooleanAnd => ({ExprBooleanOr.left=current} "||" right=BooleanAnd)?;
		public ParserRule getRule() { return rule; }

		//BooleanAnd => ({ExprBooleanOr.left=current} "||" right=BooleanAnd)?
		public Group getGroup() { return cGroup; }

		//BooleanAnd
		public RuleCall getBooleanAndParserRuleCall_0() { return cBooleanAndParserRuleCall_0; }

		//=> ({ExprBooleanOr.left=current} "||" right=BooleanAnd)?
		public Group getGroup_1() { return cGroup_1; }

		//{ExprBooleanOr.left=current} "||" right=BooleanAnd
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ExprBooleanOr.left=current}
		public Action getExprBooleanOrLeftAction_1_0_0() { return cExprBooleanOrLeftAction_1_0_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0_1() { return cVerticalLineVerticalLineKeyword_1_0_1; }

		//right=BooleanAnd
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//BooleanAnd
		public RuleCall getRightBooleanAndParserRuleCall_1_0_2_0() { return cRightBooleanAndParserRuleCall_1_0_2_0; }
	}

	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprLValueParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprAssignLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBooleanOrParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// TODO Divide expressions into lvalues and rvalues
		//Assign:
		//	ExprLValue ({ExprAssign.left=current} "=" right=BooleanOr)?;
		public ParserRule getRule() { return rule; }

		//ExprLValue ({ExprAssign.left=current} "=" right=BooleanOr)?
		public Group getGroup() { return cGroup; }

		//ExprLValue
		public RuleCall getExprLValueParserRuleCall_0() { return cExprLValueParserRuleCall_0; }

		//({ExprAssign.left=current} "=" right=BooleanOr)?
		public Group getGroup_1() { return cGroup_1; }

		//{ExprAssign.left=current}
		public Action getExprAssignLeftAction_1_0() { return cExprAssignLeftAction_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//right=BooleanOr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//BooleanOr
		public RuleCall getRightBooleanOrParserRuleCall_1_2_0() { return cRightBooleanOrParserRuleCall_1_2_0; }
	}

	public class ExprLambdaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprLambda");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArgsIDENTTerminalRuleCall_1_0_0 = (RuleCall)cArgsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cArgsIDENTTerminalRuleCall_1_1_1_0 = (RuleCall)cArgsAssignment_1_1_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		
		//ExprLambda:
		//	"|" (args+=IDENT ("," args+=IDENT)*)? "|" expr=Expr;
		public ParserRule getRule() { return rule; }

		//"|" (args+=IDENT ("," args+=IDENT)*)? "|" expr=Expr
		public Group getGroup() { return cGroup; }

		//"|"
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }

		//(args+=IDENT ("," args+=IDENT)*)?
		public Group getGroup_1() { return cGroup_1; }

		//args+=IDENT
		public Assignment getArgsAssignment_1_0() { return cArgsAssignment_1_0; }

		//IDENT
		public RuleCall getArgsIDENTTerminalRuleCall_1_0_0() { return cArgsIDENTTerminalRuleCall_1_0_0; }

		//("," args+=IDENT)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//args+=IDENT
		public Assignment getArgsAssignment_1_1_1() { return cArgsAssignment_1_1_1; }

		//IDENT
		public RuleCall getArgsIDENTTerminalRuleCall_1_1_1_0() { return cArgsIDENTTerminalRuleCall_1_1_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }

		//expr=Expr
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//Expr
		public RuleCall getExprExprParserRuleCall_3_0() { return cExprExprParserRuleCall_3_0; }
	}

	public class ExprWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//ExprWhile:
		//	"while" expr=Expr block=Block;
		public ParserRule getRule() { return rule; }

		//"while" expr=Expr block=Block
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }

		//block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
	}

	public class ExprLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLifetimeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLifetimeLIFETIMETerminalRuleCall_0_0_0 = (RuleCall)cLifetimeAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLoopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//ExprLoop:
		//	(lifetime=LIFETIME ":")? "loop" block=Block;
		public ParserRule getRule() { return rule; }

		//(lifetime=LIFETIME ":")? "loop" block=Block
		public Group getGroup() { return cGroup; }

		//(lifetime=LIFETIME ":")?
		public Group getGroup_0() { return cGroup_0; }

		//lifetime=LIFETIME
		public Assignment getLifetimeAssignment_0_0() { return cLifetimeAssignment_0_0; }

		//LIFETIME
		public RuleCall getLifetimeLIFETIMETerminalRuleCall_0_0_0() { return cLifetimeLIFETIMETerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//"loop"
		public Keyword getLoopKeyword_1() { return cLoopKeyword_1; }

		//block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
	}

	public class ExprBreakElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprBreak");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExprBreakAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLifetimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLifetimeLIFETIMETerminalRuleCall_2_0 = (RuleCall)cLifetimeAssignment_2.eContents().get(0);
		
		//ExprBreak:
		//	{ExprBreak} "break" lifetime=LIFETIME?;
		public ParserRule getRule() { return rule; }

		//{ExprBreak} "break" lifetime=LIFETIME?
		public Group getGroup() { return cGroup; }

		//{ExprBreak}
		public Action getExprBreakAction_0() { return cExprBreakAction_0; }

		//"break"
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }

		//lifetime=LIFETIME?
		public Assignment getLifetimeAssignment_2() { return cLifetimeAssignment_2; }

		//LIFETIME
		public RuleCall getLifetimeLIFETIMETerminalRuleCall_2_0() { return cLifetimeLIFETIMETerminalRuleCall_2_0; }
	}

	public class ExprContinueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprContinue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExprContinueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLifetimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLifetimeLIFETIMETerminalRuleCall_2_0 = (RuleCall)cLifetimeAssignment_2.eContents().get(0);
		
		//ExprContinue:
		//	{ExprContinue} "continue" lifetime=LIFETIME?;
		public ParserRule getRule() { return rule; }

		//{ExprContinue} "continue" lifetime=LIFETIME?
		public Group getGroup() { return cGroup; }

		//{ExprContinue}
		public Action getExprContinueAction_0() { return cExprContinueAction_0; }

		//"continue"
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }

		//lifetime=LIFETIME?
		public Assignment getLifetimeAssignment_2() { return cLifetimeAssignment_2; }

		//LIFETIME
		public RuleCall getLifetimeLIFETIMETerminalRuleCall_2_0() { return cLifetimeLIFETIMETerminalRuleCall_2_0; }
	}

	public class ExprDoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprDo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsIDENTTerminalRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsIDENTTerminalRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlockBlockParserRuleCall_5_0 = (RuleCall)cBlockAssignment_5.eContents().get(0);
		
		//ExprDo:
		//	"do" expr=Expr "|" (args+=IDENT ("," args+=IDENT)*)? "|" block=Block;
		public ParserRule getRule() { return rule; }

		//"do" expr=Expr "|" (args+=IDENT ("," args+=IDENT)*)? "|" block=Block
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }

		//(args+=IDENT ("," args+=IDENT)*)?
		public Group getGroup_3() { return cGroup_3; }

		//args+=IDENT
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }

		//IDENT
		public RuleCall getArgsIDENTTerminalRuleCall_3_0_0() { return cArgsIDENTTerminalRuleCall_3_0_0; }

		//("," args+=IDENT)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//args+=IDENT
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }

		//IDENT
		public RuleCall getArgsIDENTTerminalRuleCall_3_1_1_0() { return cArgsIDENTTerminalRuleCall_3_1_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_4() { return cVerticalLineKeyword_4; }

		//block=Block
		public Assignment getBlockAssignment_5() { return cBlockAssignment_5; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_5_0() { return cBlockBlockParserRuleCall_5_0; }
	}

	public class ExprForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprFor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatPatParserRuleCall_1_0 = (RuleCall)cPatAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		
		//ExprFor:
		//	"for" pat=Pat "in" expr=Expr block=Block;
		public ParserRule getRule() { return rule; }

		//"for" pat=Pat "in" expr=Expr block=Block
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//pat=Pat
		public Assignment getPatAssignment_1() { return cPatAssignment_1; }

		//Pat
		public RuleCall getPatPatParserRuleCall_1_0() { return cPatPatParserRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//expr=Expr
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//Expr
		public RuleCall getExprExprParserRuleCall_3_0() { return cExprExprParserRuleCall_3_0; }

		//block=Block
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_4_0() { return cBlockBlockParserRuleCall_4_0; }
	}

	public class ExprIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		private final Assignment cElseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElseElseTailParserRuleCall_3_0 = (RuleCall)cElseAssignment_3.eContents().get(0);
		
		//ExprIf:
		//	"if" expr=Expr block=Block else=ElseTail?;
		public ParserRule getRule() { return rule; }

		//"if" expr=Expr block=Block else=ElseTail?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }

		//block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }

		//else=ElseTail?
		public Assignment getElseAssignment_3() { return cElseAssignment_3; }

		//ElseTail
		public RuleCall getElseElseTailParserRuleCall_3_0() { return cElseElseTailParserRuleCall_3_0; }
	}

	public class ElseTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElseTail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cExprIfParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Assignment cBlockAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_1_0 = (RuleCall)cBlockAssignment_1_1.eContents().get(0);
		
		//ElseTail:
		//	"else" (ExprIf | block=Block);
		public ParserRule getRule() { return rule; }

		//"else" (ExprIf | block=Block)
		public Group getGroup() { return cGroup; }

		//"else"
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }

		//ExprIf | block=Block
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ExprIf
		public RuleCall getExprIfParserRuleCall_1_0() { return cExprIfParserRuleCall_1_0; }

		//block=Block
		public Assignment getBlockAssignment_1_1() { return cBlockAssignment_1_1; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_1_1_0() { return cBlockBlockParserRuleCall_1_1_0; }
	}

	public class ExprMatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprMatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArmsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArmsMatchArmParserRuleCall_3_0 = (RuleCall)cArmsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArmsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArmsMatchArmParserRuleCall_4_1_0 = (RuleCall)cArmsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ExprMatch:
		//	"match" expr=Expr "{" arms+=MatchArm ("|" arms+=MatchArm)* "}";
		public ParserRule getRule() { return rule; }

		//"match" expr=Expr "{" arms+=MatchArm ("|" arms+=MatchArm)* "}"
		public Group getGroup() { return cGroup; }

		//"match"
		public Keyword getMatchKeyword_0() { return cMatchKeyword_0; }

		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//arms+=MatchArm
		public Assignment getArmsAssignment_3() { return cArmsAssignment_3; }

		//MatchArm
		public RuleCall getArmsMatchArmParserRuleCall_3_0() { return cArmsMatchArmParserRuleCall_3_0; }

		//("|" arms+=MatchArm)*
		public Group getGroup_4() { return cGroup_4; }

		//"|"
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }

		//arms+=MatchArm
		public Assignment getArmsAssignment_4_1() { return cArmsAssignment_4_1; }

		//MatchArm
		public RuleCall getArmsMatchArmParserRuleCall_4_1_0() { return cArmsMatchArmParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class MatchArmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatchArm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMatchPatAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMatchPatMatchPatParserRuleCall_0_0 = (RuleCall)cMatchPatAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cExprAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cExprExprParserRuleCall_2_0_0_0 = (RuleCall)cExprAssignment_2_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cBlockAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_2_1_0 = (RuleCall)cBlockAssignment_2_1.eContents().get(0);
		
		//MatchArm:
		//	matchPat=MatchPat "=>" (expr=Expr "," | block=Block);
		public ParserRule getRule() { return rule; }

		//matchPat=MatchPat "=>" (expr=Expr "," | block=Block)
		public Group getGroup() { return cGroup; }

		//matchPat=MatchPat
		public Assignment getMatchPatAssignment_0() { return cMatchPatAssignment_0; }

		//MatchPat
		public RuleCall getMatchPatMatchPatParserRuleCall_0_0() { return cMatchPatMatchPatParserRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//expr=Expr "," | block=Block
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//expr=Expr ","
		public Group getGroup_2_0() { return cGroup_2_0; }

		//expr=Expr
		public Assignment getExprAssignment_2_0_0() { return cExprAssignment_2_0_0; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_0_0_0() { return cExprExprParserRuleCall_2_0_0_0; }

		//","
		public Keyword getCommaKeyword_2_0_1() { return cCommaKeyword_2_0_1; }

		//block=Block
		public Assignment getBlockAssignment_2_1() { return cBlockAssignment_2_1; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_2_1_0() { return cBlockBlockParserRuleCall_2_1_0; }
	}

	public class MatchPatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatchPat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPatPatParserRuleCall_0_0 = (RuleCall)cPatAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEndPatAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEndPatPatParserRuleCall_1_1_0 = (RuleCall)cEndPatAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//MatchPat:
		//	pat=Pat (".." endPat=Pat)? ("if" expr=Expr);
		public ParserRule getRule() { return rule; }

		//pat=Pat (".." endPat=Pat)? ("if" expr=Expr)
		public Group getGroup() { return cGroup; }

		//pat=Pat
		public Assignment getPatAssignment_0() { return cPatAssignment_0; }

		//Pat
		public RuleCall getPatPatParserRuleCall_0_0() { return cPatPatParserRuleCall_0_0; }

		//(".." endPat=Pat)?
		public Group getGroup_1() { return cGroup_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_1_0() { return cFullStopFullStopKeyword_1_0; }

		//endPat=Pat
		public Assignment getEndPatAssignment_1_1() { return cEndPatAssignment_1_1; }

		//Pat
		public RuleCall getEndPatPatParserRuleCall_1_1_0() { return cEndPatPatParserRuleCall_1_1_0; }

		//"if" expr=Expr
		public Group getGroup_2() { return cGroup_2; }

		//"if"
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }

		//expr=Expr
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_1_0() { return cExprExprParserRuleCall_2_1_0; }
	}

	public class ExprReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExprReturnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//// TODO Expression is optional
		//ExprReturn:
		//	{ExprReturn} "return" expr=Expr?;
		public ParserRule getRule() { return rule; }

		//{ExprReturn} "return" expr=Expr?
		public Group getGroup() { return cGroup; }

		//{ExprReturn}
		public Action getExprReturnAction_0() { return cExprReturnAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//expr=Expr?
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_0() { return cExprExprParserRuleCall_2_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Action cBlockStmtsAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cStmtsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cStmtsStmtParserRuleCall_3_2_0 = (RuleCall)cStmtsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cStmtsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cStmtsStmtParserRuleCall_3_3_1_0 = (RuleCall)cStmtsAssignment_3_3_1.eContents().get(0);
		private final Assignment cExprAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_3_4_0 = (RuleCall)cExprAssignment_3_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Left-factored. Bit messy
		//Block:
		//	{Block} "{" expr=Expr ({Block.stmts+=current} ";" stmts+=Stmt (";" stmts+=Stmt)* expr=Expr?)? "}";
		public ParserRule getRule() { return rule; }

		//{Block} "{" expr=Expr ({Block.stmts+=current} ";" stmts+=Stmt (";" stmts+=Stmt)* expr=Expr?)? "}"
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//expr=Expr
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_0() { return cExprExprParserRuleCall_2_0; }

		//({Block.stmts+=current} ";" stmts+=Stmt (";" stmts+=Stmt)* expr=Expr?)?
		public Group getGroup_3() { return cGroup_3; }

		//{Block.stmts+=current}
		public Action getBlockStmtsAction_3_0() { return cBlockStmtsAction_3_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//stmts+=Stmt
		public Assignment getStmtsAssignment_3_2() { return cStmtsAssignment_3_2; }

		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_3_2_0() { return cStmtsStmtParserRuleCall_3_2_0; }

		//(";" stmts+=Stmt)*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//";"
		public Keyword getSemicolonKeyword_3_3_0() { return cSemicolonKeyword_3_3_0; }

		//stmts+=Stmt
		public Assignment getStmtsAssignment_3_3_1() { return cStmtsAssignment_3_3_1; }

		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_3_3_1_0() { return cStmtsStmtParserRuleCall_3_3_1_0; }

		//expr=Expr?
		public Assignment getExprAssignment_3_4() { return cExprAssignment_3_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_3_4_0() { return cExprExprParserRuleCall_3_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSlotDeclStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Stmt:
		//	SlotDeclStmt | ExprStmt;
		public ParserRule getRule() { return rule; }

		//SlotDeclStmt | ExprStmt
		public Alternatives getAlternatives() { return cAlternatives; }

		//SlotDeclStmt
		public RuleCall getSlotDeclStmtParserRuleCall_0() { return cSlotDeclStmtParserRuleCall_0; }

		//ExprStmt
		public RuleCall getExprStmtParserRuleCall_1() { return cExprStmtParserRuleCall_1; }
	}

	public class SlotDeclStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SlotDeclStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatPatParserRuleCall_1_0 = (RuleCall)cPatAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SlotDeclStmt:
		//	"let" pat=Pat (":" type=Type)? "=" expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//"let" pat=Pat (":" type=Type)? "=" expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//"let"
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }

		//pat=Pat
		public Assignment getPatAssignment_1() { return cPatAssignment_1; }

		//Pat
		public RuleCall getPatPatParserRuleCall_1_0() { return cPatPatParserRuleCall_1_0; }

		//(":" type=Type)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//type=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//expr=Expr
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_4_0() { return cExprExprParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ExprStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprExprParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExprStmt:
		//	expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//expr=Expr
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }

		//Expr
		public RuleCall getExprExprParserRuleCall_0_0() { return cExprExprParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class GenericParamDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenericParamDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBoundsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBoundsIDENTTerminalRuleCall_1_1_0 = (RuleCall)cBoundsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cPlusSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cBoundsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cBoundsIDENTTerminalRuleCall_1_2_1_0 = (RuleCall)cBoundsAssignment_1_2_1.eContents().get(0);
		
		//// TODO Crossreference Trait?
		//GenericParamDecl:
		//	ident=IDENT (":" bounds+=IDENT ("+" bounds+=IDENT))?;
		public ParserRule getRule() { return rule; }

		//ident=IDENT (":" bounds+=IDENT ("+" bounds+=IDENT))?
		public Group getGroup() { return cGroup; }

		//ident=IDENT
		public Assignment getIdentAssignment_0() { return cIdentAssignment_0; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0_0() { return cIdentIDENTTerminalRuleCall_0_0; }

		//(":" bounds+=IDENT ("+" bounds+=IDENT))?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//bounds+=IDENT
		public Assignment getBoundsAssignment_1_1() { return cBoundsAssignment_1_1; }

		//IDENT
		public RuleCall getBoundsIDENTTerminalRuleCall_1_1_0() { return cBoundsIDENTTerminalRuleCall_1_1_0; }

		//"+" bounds+=IDENT
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"+"
		public Keyword getPlusSignKeyword_1_2_0() { return cPlusSignKeyword_1_2_0; }

		//bounds+=IDENT
		public Assignment getBoundsAssignment_1_2_1() { return cBoundsAssignment_1_2_1; }

		//IDENT
		public RuleCall getBoundsIDENTTerminalRuleCall_1_2_1_0() { return cBoundsIDENTTerminalRuleCall_1_2_1_0; }
	}

	public class ArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPatPatParserRuleCall_0_0 = (RuleCall)cPatAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//// TODO Crossreference Type
		//Arg:
		//	pat=Pat ":" type=Type;
		public ParserRule getRule() { return rule; }

		//pat=Pat ":" type=Type
		public Group getGroup() { return cGroup; }

		//pat=Pat
		public Assignment getPatAssignment_0() { return cPatAssignment_0; }

		//Pat
		public RuleCall getPatPatParserRuleCall_0_0() { return cPatPatParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}

	public class PatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPatWildcardParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPatIdentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPatBoxedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPatOwnedParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPatBorrowedParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPatTupleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPatVectorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPatLiteralParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPatEnumParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//// TODO Expand
		//// See line 2869 of libsyntax/parse/parser.rs
		//Pat:
		//	PatWildcard | PatIdent | PatBoxed | PatOwned | PatBorrowed | PatTuple | PatVector | PatLiteral | PatEnum;
		public ParserRule getRule() { return rule; }

		//PatWildcard | PatIdent | PatBoxed | PatOwned | PatBorrowed | PatTuple | PatVector | PatLiteral | PatEnum
		public Alternatives getAlternatives() { return cAlternatives; }

		//PatWildcard
		public RuleCall getPatWildcardParserRuleCall_0() { return cPatWildcardParserRuleCall_0; }

		//PatIdent
		public RuleCall getPatIdentParserRuleCall_1() { return cPatIdentParserRuleCall_1; }

		//PatBoxed
		public RuleCall getPatBoxedParserRuleCall_2() { return cPatBoxedParserRuleCall_2; }

		//PatOwned
		public RuleCall getPatOwnedParserRuleCall_3() { return cPatOwnedParserRuleCall_3; }

		//PatBorrowed
		public RuleCall getPatBorrowedParserRuleCall_4() { return cPatBorrowedParserRuleCall_4; }

		//PatTuple
		public RuleCall getPatTupleParserRuleCall_5() { return cPatTupleParserRuleCall_5; }

		//PatVector
		public RuleCall getPatVectorParserRuleCall_6() { return cPatVectorParserRuleCall_6; }

		//PatLiteral
		public RuleCall getPatLiteralParserRuleCall_7() { return cPatLiteralParserRuleCall_7; }

		//PatEnum
		public RuleCall getPatEnumParserRuleCall_8() { return cPatEnumParserRuleCall_8; }
	}

	public class PatWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPatWildcardAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword c_Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PatWildcard:
		//	{PatWildcard} "_";
		public ParserRule getRule() { return rule; }

		//{PatWildcard} "_"
		public Group getGroup() { return cGroup; }

		//{PatWildcard}
		public Action getPatWildcardAction_0() { return cPatWildcardAction_0; }

		//"_"
		public Keyword get_Keyword_1() { return c_Keyword_1; }
	}

	public class PatIdentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatIdent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMutableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMutableMUT_KEYWORDTerminalRuleCall_0_0 = (RuleCall)cMutableAssignment_0.eContents().get(0);
		private final Assignment cIdentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_1_0 = (RuleCall)cIdentAssignment_1.eContents().get(0);
		
		//PatIdent:
		//	mutable?=MUT_KEYWORD ident=IDENT;
		public ParserRule getRule() { return rule; }

		//mutable?=MUT_KEYWORD ident=IDENT
		public Group getGroup() { return cGroup; }

		//mutable?=MUT_KEYWORD
		public Assignment getMutableAssignment_0() { return cMutableAssignment_0; }

		//MUT_KEYWORD
		public RuleCall getMutableMUT_KEYWORDTerminalRuleCall_0_0() { return cMutableMUT_KEYWORDTerminalRuleCall_0_0; }

		//ident=IDENT
		public Assignment getIdentAssignment_1() { return cIdentAssignment_1; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_1_0() { return cIdentIDENTTerminalRuleCall_1_0; }
	}

	public class PatBoxedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatBoxed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternPatParserRuleCall_1_0 = (RuleCall)cPatternAssignment_1.eContents().get(0);
		
		//PatBoxed:
		//	"@" pattern=Pat;
		public ParserRule getRule() { return rule; }

		//"@" pattern=Pat
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//pattern=Pat
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }

		//Pat
		public RuleCall getPatternPatParserRuleCall_1_0() { return cPatternPatParserRuleCall_1_0; }
	}

	public class PatOwnedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatOwned");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTildeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternPatParserRuleCall_1_0 = (RuleCall)cPatternAssignment_1.eContents().get(0);
		
		//PatOwned:
		//	"~" pattern=Pat;
		public ParserRule getRule() { return rule; }

		//"~" pattern=Pat
		public Group getGroup() { return cGroup; }

		//"~"
		public Keyword getTildeKeyword_0() { return cTildeKeyword_0; }

		//pattern=Pat
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }

		//Pat
		public RuleCall getPatternPatParserRuleCall_1_0() { return cPatternPatParserRuleCall_1_0; }
	}

	public class PatBorrowedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatBorrowed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternPatParserRuleCall_1_0 = (RuleCall)cPatternAssignment_1.eContents().get(0);
		
		//PatBorrowed:
		//	"&" pattern=Pat;
		public ParserRule getRule() { return rule; }

		//"&" pattern=Pat
		public Group getGroup() { return cGroup; }

		//"&"
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }

		//pattern=Pat
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }

		//Pat
		public RuleCall getPatternPatParserRuleCall_1_0() { return cPatternPatParserRuleCall_1_0; }
	}

	public class PatTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatTuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatternsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternsPatParserRuleCall_1_0 = (RuleCall)cPatternsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPatternsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPatternsPatParserRuleCall_2_1_0 = (RuleCall)cPatternsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PatTuple:
		//	"(" patterns+=Pat ("," patterns+=Pat)* ")";
		public ParserRule getRule() { return rule; }

		//"(" patterns+=Pat ("," patterns+=Pat)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//patterns+=Pat
		public Assignment getPatternsAssignment_1() { return cPatternsAssignment_1; }

		//Pat
		public RuleCall getPatternsPatParserRuleCall_1_0() { return cPatternsPatParserRuleCall_1_0; }

		//("," patterns+=Pat)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//patterns+=Pat
		public Assignment getPatternsAssignment_2_1() { return cPatternsAssignment_2_1; }

		//Pat
		public RuleCall getPatternsPatParserRuleCall_2_1_0() { return cPatternsPatParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class PatVectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatVector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatternsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternsPatParserRuleCall_1_0 = (RuleCall)cPatternsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPatternsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPatternsPatParserRuleCall_2_1_0 = (RuleCall)cPatternsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PatVector:
		//	"[" patterns+=Pat ("," patterns+=Pat)* "]";
		public ParserRule getRule() { return rule; }

		//"[" patterns+=Pat ("," patterns+=Pat)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//patterns+=Pat
		public Assignment getPatternsAssignment_1() { return cPatternsAssignment_1; }

		//Pat
		public RuleCall getPatternsPatParserRuleCall_1_0() { return cPatternsPatParserRuleCall_1_0; }

		//("," patterns+=Pat)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//patterns+=Pat
		public Assignment getPatternsAssignment_2_1() { return cPatternsAssignment_2_1; }

		//Pat
		public RuleCall getPatternsPatParserRuleCall_2_1_0() { return cPatternsPatParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class PatLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatLiteral");
		private final Assignment cLiteralAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLiteralLiteralParserRuleCall_0 = (RuleCall)cLiteralAssignment.eContents().get(0);
		
		//PatLiteral:
		//	literal=Literal;
		public ParserRule getRule() { return rule; }

		//literal=Literal
		public Assignment getLiteralAssignment() { return cLiteralAssignment; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0() { return cLiteralLiteralParserRuleCall_0; }
	}

	public class PatEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathExprPathParserRuleCall_0_0 = (RuleCall)cPathAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cPatTupleEnumPathAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_0_2 = (Alternatives)cGroup_1_0.eContents().get(2);
		private final Keyword cAsteriskKeyword_1_0_2_0 = (Keyword)cAlternatives_1_0_2.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_0_2_1 = (Keyword)cAlternatives_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_2_2 = (Group)cAlternatives_1_0_2.eContents().get(2);
		private final Assignment cPatternsAssignment_1_0_2_2_0 = (Assignment)cGroup_1_0_2_2.eContents().get(0);
		private final RuleCall cPatternsPatParserRuleCall_1_0_2_2_0_0 = (RuleCall)cPatternsAssignment_1_0_2_2_0.eContents().get(0);
		private final Group cGroup_1_0_2_2_1 = (Group)cGroup_1_0_2_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_2_2_1_0 = (Keyword)cGroup_1_0_2_2_1.eContents().get(0);
		private final Assignment cPatternsAssignment_1_0_2_2_1_1 = (Assignment)cGroup_1_0_2_2_1.eContents().get(1);
		private final RuleCall cPatternsPatParserRuleCall_1_0_2_2_1_1_0 = (RuleCall)cPatternsAssignment_1_0_2_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cPatStructEnumPathAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cFieldPatternsAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cFieldPatternsFieldPatParserRuleCall_1_1_2_0 = (RuleCall)cFieldPatternsAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cFieldPatternsAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cFieldPatternsFieldPatParserRuleCall_1_1_3_1_0 = (RuleCall)cFieldPatternsAssignment_1_1_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		
		//PatEnum:
		//	path=ExprPath ({PatTupleEnum.path=current} "(" ("*" | ".." | patterns+=Pat ("," patterns+=Pat)*) ")" |
		//	{PatStructEnum.path=current} "{" fieldPatterns+=FieldPat ("," fieldPatterns+=FieldPat)* "}");
		public ParserRule getRule() { return rule; }

		//path=ExprPath ({PatTupleEnum.path=current} "(" ("*" | ".." | patterns+=Pat ("," patterns+=Pat)*) ")" |
		//{PatStructEnum.path=current} "{" fieldPatterns+=FieldPat ("," fieldPatterns+=FieldPat)* "}")
		public Group getGroup() { return cGroup; }

		//path=ExprPath
		public Assignment getPathAssignment_0() { return cPathAssignment_0; }

		//ExprPath
		public RuleCall getPathExprPathParserRuleCall_0_0() { return cPathExprPathParserRuleCall_0_0; }

		//{PatTupleEnum.path=current} "(" ("*" | ".." | patterns+=Pat ("," patterns+=Pat)*) ")" | {PatStructEnum.path=current} "{"
		//fieldPatterns+=FieldPat ("," fieldPatterns+=FieldPat)* "}"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{PatTupleEnum.path=current} "(" ("*" | ".." | patterns+=Pat ("," patterns+=Pat)*) ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{PatTupleEnum.path=current}
		public Action getPatTupleEnumPathAction_1_0_0() { return cPatTupleEnumPathAction_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }

		//"*" | ".." | patterns+=Pat ("," patterns+=Pat)*
		public Alternatives getAlternatives_1_0_2() { return cAlternatives_1_0_2; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_2_0() { return cAsteriskKeyword_1_0_2_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_1_0_2_1() { return cFullStopFullStopKeyword_1_0_2_1; }

		//patterns+=Pat ("," patterns+=Pat)*
		public Group getGroup_1_0_2_2() { return cGroup_1_0_2_2; }

		//patterns+=Pat
		public Assignment getPatternsAssignment_1_0_2_2_0() { return cPatternsAssignment_1_0_2_2_0; }

		//Pat
		public RuleCall getPatternsPatParserRuleCall_1_0_2_2_0_0() { return cPatternsPatParserRuleCall_1_0_2_2_0_0; }

		//("," patterns+=Pat)*
		public Group getGroup_1_0_2_2_1() { return cGroup_1_0_2_2_1; }

		//","
		public Keyword getCommaKeyword_1_0_2_2_1_0() { return cCommaKeyword_1_0_2_2_1_0; }

		//patterns+=Pat
		public Assignment getPatternsAssignment_1_0_2_2_1_1() { return cPatternsAssignment_1_0_2_2_1_1; }

		//Pat
		public RuleCall getPatternsPatParserRuleCall_1_0_2_2_1_1_0() { return cPatternsPatParserRuleCall_1_0_2_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_3() { return cRightParenthesisKeyword_1_0_3; }

		//{PatStructEnum.path=current} "{" fieldPatterns+=FieldPat ("," fieldPatterns+=FieldPat)* "}"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{PatStructEnum.path=current}
		public Action getPatStructEnumPathAction_1_1_0() { return cPatStructEnumPathAction_1_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1_1() { return cLeftCurlyBracketKeyword_1_1_1; }

		//fieldPatterns+=FieldPat
		public Assignment getFieldPatternsAssignment_1_1_2() { return cFieldPatternsAssignment_1_1_2; }

		//FieldPat
		public RuleCall getFieldPatternsFieldPatParserRuleCall_1_1_2_0() { return cFieldPatternsFieldPatParserRuleCall_1_1_2_0; }

		//("," fieldPatterns+=FieldPat)*
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//","
		public Keyword getCommaKeyword_1_1_3_0() { return cCommaKeyword_1_1_3_0; }

		//fieldPatterns+=FieldPat
		public Assignment getFieldPatternsAssignment_1_1_3_1() { return cFieldPatternsAssignment_1_1_3_1; }

		//FieldPat
		public RuleCall getFieldPatternsFieldPatParserRuleCall_1_1_3_1_0() { return cFieldPatternsFieldPatParserRuleCall_1_1_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_4() { return cRightCurlyBracketKeyword_1_1_4; }
	}

	public class FieldPatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldPat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPatternAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPatternPatParserRuleCall_1_1_0 = (RuleCall)cPatternAssignment_1_1.eContents().get(0);
		
		//FieldPat:
		//	ident=IDENT (":" pattern=Pat)?;
		public ParserRule getRule() { return rule; }

		//ident=IDENT (":" pattern=Pat)?
		public Group getGroup() { return cGroup; }

		//ident=IDENT
		public Assignment getIdentAssignment_0() { return cIdentAssignment_0; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0_0() { return cIdentIDENTTerminalRuleCall_0_0; }

		//(":" pattern=Pat)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//pattern=Pat
		public Assignment getPatternAssignment_1_1() { return cPatternAssignment_1_1; }

		//Pat
		public RuleCall getPatternPatParserRuleCall_1_1_0() { return cPatternPatParserRuleCall_1_1_0; }
	}

	public class TypePathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypePath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSegmentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSegmentsIDENTTerminalRuleCall_0_0 = (RuleCall)cSegmentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSegmentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSegmentsIDENTTerminalRuleCall_1_1_0 = (RuleCall)cSegmentsAssignment_1_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cLifetimesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cLifetimesLIFETIMETerminalRuleCall_3_0_0 = (RuleCall)cLifetimesAssignment_3_0.eContents().get(0);
		private final Assignment cGenericTypesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cGenericTypesTypeParserRuleCall_3_1_0 = (RuleCall)cGenericTypesAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cLifetimesAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cLifetimesLIFETIMETerminalRuleCall_4_1_0_0 = (RuleCall)cLifetimesAssignment_4_1_0.eContents().get(0);
		private final Assignment cGenericTypesAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cGenericTypesTypeParserRuleCall_4_1_1_0 = (RuleCall)cGenericTypesAssignment_4_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TypePath:
		//	segments+=IDENT ("::" segments+=IDENT)* "<" (lifetimes+=LIFETIME | genericTypes+=Type) ("," (lifetimes+=LIFETIME |
		//	genericTypes+=Type))+ ">";
		public ParserRule getRule() { return rule; }

		//segments+=IDENT ("::" segments+=IDENT)* "<" (lifetimes+=LIFETIME | genericTypes+=Type) ("," (lifetimes+=LIFETIME |
		//genericTypes+=Type))+ ">"
		public Group getGroup() { return cGroup; }

		//segments+=IDENT
		public Assignment getSegmentsAssignment_0() { return cSegmentsAssignment_0; }

		//IDENT
		public RuleCall getSegmentsIDENTTerminalRuleCall_0_0() { return cSegmentsIDENTTerminalRuleCall_0_0; }

		//("::" segments+=IDENT)*
		public Group getGroup_1() { return cGroup_1; }

		//"::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//segments+=IDENT
		public Assignment getSegmentsAssignment_1_1() { return cSegmentsAssignment_1_1; }

		//IDENT
		public RuleCall getSegmentsIDENTTerminalRuleCall_1_1_0() { return cSegmentsIDENTTerminalRuleCall_1_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//lifetimes+=LIFETIME | genericTypes+=Type
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//lifetimes+=LIFETIME
		public Assignment getLifetimesAssignment_3_0() { return cLifetimesAssignment_3_0; }

		//LIFETIME
		public RuleCall getLifetimesLIFETIMETerminalRuleCall_3_0_0() { return cLifetimesLIFETIMETerminalRuleCall_3_0_0; }

		//genericTypes+=Type
		public Assignment getGenericTypesAssignment_3_1() { return cGenericTypesAssignment_3_1; }

		//Type
		public RuleCall getGenericTypesTypeParserRuleCall_3_1_0() { return cGenericTypesTypeParserRuleCall_3_1_0; }

		//("," (lifetimes+=LIFETIME | genericTypes+=Type))+
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//lifetimes+=LIFETIME | genericTypes+=Type
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//lifetimes+=LIFETIME
		public Assignment getLifetimesAssignment_4_1_0() { return cLifetimesAssignment_4_1_0; }

		//LIFETIME
		public RuleCall getLifetimesLIFETIMETerminalRuleCall_4_1_0_0() { return cLifetimesLIFETIMETerminalRuleCall_4_1_0_0; }

		//genericTypes+=Type
		public Assignment getGenericTypesAssignment_4_1_1() { return cGenericTypesAssignment_4_1_1; }

		//Type
		public RuleCall getGenericTypesTypeParserRuleCall_4_1_1_0() { return cGenericTypesTypeParserRuleCall_4_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
	}

	public class ExprPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSegmentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSegmentsIDENTTerminalRuleCall_0_0 = (RuleCall)cSegmentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSegmentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSegmentsIDENTTerminalRuleCall_1_1_0 = (RuleCall)cSegmentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonColonLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cLifetimesAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cLifetimesLIFETIMETerminalRuleCall_2_1_0_0 = (RuleCall)cLifetimesAssignment_2_1_0.eContents().get(0);
		private final Assignment cGenericTypesAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cGenericTypesTypeParserRuleCall_2_1_1_0 = (RuleCall)cGenericTypesAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Alternatives cAlternatives_2_2_1 = (Alternatives)cGroup_2_2.eContents().get(1);
		private final Assignment cLifetimesAssignment_2_2_1_0 = (Assignment)cAlternatives_2_2_1.eContents().get(0);
		private final RuleCall cLifetimesLIFETIMETerminalRuleCall_2_2_1_0_0 = (RuleCall)cLifetimesAssignment_2_2_1_0.eContents().get(0);
		private final Assignment cGenericTypesAssignment_2_2_1_1 = (Assignment)cAlternatives_2_2_1.eContents().get(1);
		private final RuleCall cGenericTypesTypeParserRuleCall_2_2_1_1_0 = (RuleCall)cGenericTypesAssignment_2_2_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//ExprPath:
		//	segments+=IDENT ("::" segments+=IDENT)* ("::<" (lifetimes+=LIFETIME | genericTypes+=Type) ("," (lifetimes+=LIFETIME |
		//	genericTypes+=Type))* ">")?;
		public ParserRule getRule() { return rule; }

		//segments+=IDENT ("::" segments+=IDENT)* ("::<" (lifetimes+=LIFETIME | genericTypes+=Type) ("," (lifetimes+=LIFETIME |
		//genericTypes+=Type))* ">")?
		public Group getGroup() { return cGroup; }

		//segments+=IDENT
		public Assignment getSegmentsAssignment_0() { return cSegmentsAssignment_0; }

		//IDENT
		public RuleCall getSegmentsIDENTTerminalRuleCall_0_0() { return cSegmentsIDENTTerminalRuleCall_0_0; }

		//("::" segments+=IDENT)*
		public Group getGroup_1() { return cGroup_1; }

		//"::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//segments+=IDENT
		public Assignment getSegmentsAssignment_1_1() { return cSegmentsAssignment_1_1; }

		//IDENT
		public RuleCall getSegmentsIDENTTerminalRuleCall_1_1_0() { return cSegmentsIDENTTerminalRuleCall_1_1_0; }

		//("::<" (lifetimes+=LIFETIME | genericTypes+=Type) ("," (lifetimes+=LIFETIME | genericTypes+=Type))* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"::<"
		public Keyword getColonColonLessThanSignKeyword_2_0() { return cColonColonLessThanSignKeyword_2_0; }

		//lifetimes+=LIFETIME | genericTypes+=Type
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//lifetimes+=LIFETIME
		public Assignment getLifetimesAssignment_2_1_0() { return cLifetimesAssignment_2_1_0; }

		//LIFETIME
		public RuleCall getLifetimesLIFETIMETerminalRuleCall_2_1_0_0() { return cLifetimesLIFETIMETerminalRuleCall_2_1_0_0; }

		//genericTypes+=Type
		public Assignment getGenericTypesAssignment_2_1_1() { return cGenericTypesAssignment_2_1_1; }

		//Type
		public RuleCall getGenericTypesTypeParserRuleCall_2_1_1_0() { return cGenericTypesTypeParserRuleCall_2_1_1_0; }

		//("," (lifetimes+=LIFETIME | genericTypes+=Type))*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//lifetimes+=LIFETIME | genericTypes+=Type
		public Alternatives getAlternatives_2_2_1() { return cAlternatives_2_2_1; }

		//lifetimes+=LIFETIME
		public Assignment getLifetimesAssignment_2_2_1_0() { return cLifetimesAssignment_2_2_1_0; }

		//LIFETIME
		public RuleCall getLifetimesLIFETIMETerminalRuleCall_2_2_1_0_0() { return cLifetimesLIFETIMETerminalRuleCall_2_2_1_0_0; }

		//genericTypes+=Type
		public Assignment getGenericTypesAssignment_2_2_1_1() { return cGenericTypesAssignment_2_2_1_1; }

		//Type
		public RuleCall getGenericTypesTypeParserRuleCall_2_2_1_1_0() { return cGenericTypesTypeParserRuleCall_2_2_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNamedTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoxedPointerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOwnedPointerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBorrowedPointerParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Type:
		//	PrimitiveType | NamedType | BoxedPointer | OwnedPointer | BorrowedPointer;
		public ParserRule getRule() { return rule; }

		//PrimitiveType | NamedType | BoxedPointer | OwnedPointer | BorrowedPointer
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }

		//NamedType
		public RuleCall getNamedTypeParserRuleCall_1() { return cNamedTypeParserRuleCall_1; }

		//BoxedPointer
		public RuleCall getBoxedPointerParserRuleCall_2() { return cBoxedPointerParserRuleCall_2; }

		//OwnedPointer
		public RuleCall getOwnedPointerParserRuleCall_3() { return cOwnedPointerParserRuleCall_3; }

		//BorrowedPointer
		public RuleCall getBorrowedPointerParserRuleCall_4() { return cBorrowedPointerParserRuleCall_4; }
	}

	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cINT_TYPETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFloatTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cFLOAT_TYPETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cBOOLEAN_TYPETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cMachineTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cMACHINE_TYPETerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cUnitTypeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cUNIT_TYPETerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//PrimitiveType:
		//	{IntType} INT_TYPE | {FloatType} FLOAT_TYPE | {BoolType} BOOLEAN_TYPE | {MachineType} MACHINE_TYPE | {UnitType}
		//	UNIT_TYPE;
		public ParserRule getRule() { return rule; }

		//{IntType} INT_TYPE | {FloatType} FLOAT_TYPE | {BoolType} BOOLEAN_TYPE | {MachineType} MACHINE_TYPE | {UnitType}
		//UNIT_TYPE
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntType} INT_TYPE
		public Group getGroup_0() { return cGroup_0; }

		//{IntType}
		public Action getIntTypeAction_0_0() { return cIntTypeAction_0_0; }

		//INT_TYPE
		public RuleCall getINT_TYPETerminalRuleCall_0_1() { return cINT_TYPETerminalRuleCall_0_1; }

		//{FloatType} FLOAT_TYPE
		public Group getGroup_1() { return cGroup_1; }

		//{FloatType}
		public Action getFloatTypeAction_1_0() { return cFloatTypeAction_1_0; }

		//FLOAT_TYPE
		public RuleCall getFLOAT_TYPETerminalRuleCall_1_1() { return cFLOAT_TYPETerminalRuleCall_1_1; }

		//{BoolType} BOOLEAN_TYPE
		public Group getGroup_2() { return cGroup_2; }

		//{BoolType}
		public Action getBoolTypeAction_2_0() { return cBoolTypeAction_2_0; }

		//BOOLEAN_TYPE
		public RuleCall getBOOLEAN_TYPETerminalRuleCall_2_1() { return cBOOLEAN_TYPETerminalRuleCall_2_1; }

		//{MachineType} MACHINE_TYPE
		public Group getGroup_3() { return cGroup_3; }

		//{MachineType}
		public Action getMachineTypeAction_3_0() { return cMachineTypeAction_3_0; }

		//MACHINE_TYPE
		public RuleCall getMACHINE_TYPETerminalRuleCall_3_1() { return cMACHINE_TYPETerminalRuleCall_3_1; }

		//{UnitType} UNIT_TYPE
		public Group getGroup_4() { return cGroup_4; }

		//{UnitType}
		public Action getUnitTypeAction_4_0() { return cUnitTypeAction_4_0; }

		//UNIT_TYPE
		public RuleCall getUNIT_TYPETerminalRuleCall_4_1() { return cUNIT_TYPETerminalRuleCall_4_1; }
	}

	public class NamedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedType");
		private final Assignment cPathAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPathTypePathParserRuleCall_0 = (RuleCall)cPathAssignment.eContents().get(0);
		
		//NamedType:
		//	path=TypePath;
		public ParserRule getRule() { return rule; }

		//path=TypePath
		public Assignment getPathAssignment() { return cPathAssignment; }

		//TypePath
		public RuleCall getPathTypePathParserRuleCall_0() { return cPathTypePathParserRuleCall_0; }
	}

	public class BoxedPointerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoxedPointer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//BoxedPointer:
		//	"@" type=Type;
		public ParserRule getRule() { return rule; }

		//"@" type=Type
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}

	public class OwnedPointerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OwnedPointer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTildeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//OwnedPointer:
		//	"~" type=Type;
		public ParserRule getRule() { return rule; }

		//"~" type=Type
		public Group getGroup() { return cGroup; }

		//"~"
		public Keyword getTildeKeyword_0() { return cTildeKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}

	public class BorrowedPointerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BorrowedPointer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//BorrowedPointer:
		//	"&" type=Type;
		public ParserRule getRule() { return rule; }

		//"&" type=Type
		public Group getGroup() { return cGroup; }

		//"&"
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}

	public class StructFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisVisibilityEnumRuleCall_0_0 = (RuleCall)cVisAssignment_0.eContents().get(0);
		private final Assignment cIdentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_1_0 = (RuleCall)cIdentAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//StructField:
		//	vis=Visibility? ident=IDENT ":" type=Type;
		public ParserRule getRule() { return rule; }

		//vis=Visibility? ident=IDENT ":" type=Type
		public Group getGroup() { return cGroup; }

		//vis=Visibility?
		public Assignment getVisAssignment_0() { return cVisAssignment_0; }

		//Visibility
		public RuleCall getVisVisibilityEnumRuleCall_0_0() { return cVisVisibilityEnumRuleCall_0_0; }

		//ident=IDENT
		public Assignment getIdentAssignment_1() { return cIdentAssignment_1; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_1_0() { return cIdentIDENTTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}

	public class VariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructVariantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTupleVariantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnitVariantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Variant:
		//	StructVariant | TupleVariant | UnitVariant;
		public ParserRule getRule() { return rule; }

		//StructVariant | TupleVariant | UnitVariant
		public Alternatives getAlternatives() { return cAlternatives; }

		//StructVariant
		public RuleCall getStructVariantParserRuleCall_0() { return cStructVariantParserRuleCall_0; }

		//TupleVariant
		public RuleCall getTupleVariantParserRuleCall_1() { return cTupleVariantParserRuleCall_1; }

		//UnitVariant
		public RuleCall getUnitVariantParserRuleCall_2() { return cUnitVariantParserRuleCall_2; }
	}

	public class StructVariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructVariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParamsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParamsGenericParamDeclParserRuleCall_1_2_1_0 = (RuleCall)cParamsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsStructFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFieldsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFieldsStructFieldParserRuleCall_4_1_0 = (RuleCall)cFieldsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StructVariant:
		//	ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" fields+=StructField (","
		//	fields+=StructField)* "}";
		public ParserRule getRule() { return rule; }

		//ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" fields+=StructField (","
		//fields+=StructField)* "}"
		public Group getGroup() { return cGroup; }

		//ident=IDENT
		public Assignment getIdentAssignment_0() { return cIdentAssignment_0; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0_0() { return cIdentIDENTTerminalRuleCall_0_0; }

		//("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_1_1_0() { return cParamsGenericParamDeclParserRuleCall_1_1_0; }

		//("," params+=GenericParamDecl)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//params+=GenericParamDecl
		public Assignment getParamsAssignment_1_2_1() { return cParamsAssignment_1_2_1; }

		//GenericParamDecl
		public RuleCall getParamsGenericParamDeclParserRuleCall_1_2_1_0() { return cParamsGenericParamDeclParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//fields+=StructField
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }

		//StructField
		public RuleCall getFieldsStructFieldParserRuleCall_3_0() { return cFieldsStructFieldParserRuleCall_3_0; }

		//("," fields+=StructField)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//fields+=StructField
		public Assignment getFieldsAssignment_4_1() { return cFieldsAssignment_4_1; }

		//StructField
		public RuleCall getFieldsStructFieldParserRuleCall_4_1_0() { return cFieldsStructFieldParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TupleVariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TupleVariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentIDENTTerminalRuleCall_0_0 = (RuleCall)cIdentAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypesTypeParserRuleCall_2_0 = (RuleCall)cTypesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_3_1_0 = (RuleCall)cTypesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TupleVariant:
		//	ident=IDENT "(" types+=Type ("," types+=Type)* ")";
		public ParserRule getRule() { return rule; }

		//ident=IDENT "(" types+=Type ("," types+=Type)* ")"
		public Group getGroup() { return cGroup; }

		//ident=IDENT
		public Assignment getIdentAssignment_0() { return cIdentAssignment_0; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0_0() { return cIdentIDENTTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//types+=Type
		public Assignment getTypesAssignment_2() { return cTypesAssignment_2; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_2_0() { return cTypesTypeParserRuleCall_2_0; }

		//("," types+=Type)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//types+=Type
		public Assignment getTypesAssignment_3_1() { return cTypesAssignment_3_1; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_3_1_0() { return cTypesTypeParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class UnitVariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitVariant");
		private final Assignment cIdentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentIDENTTerminalRuleCall_0 = (RuleCall)cIdentAssignment.eContents().get(0);
		
		//UnitVariant:
		//	ident=IDENT;
		public ParserRule getRule() { return rule; }

		//ident=IDENT
		public Assignment getIdentAssignment() { return cIdentAssignment; }

		//IDENT
		public RuleCall getIdentIDENTTerminalRuleCall_0() { return cIdentIDENTTerminalRuleCall_0; }
	}

	public class StringLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLit");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRING_LITTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//// TODO Add all keywords
		//// | {RawStringLit} 'r' '#' body = RawString? '#'
		//StringLit:
		//	value=STRING_LIT;
		public ParserRule getRule() { return rule; }

		//value=STRING_LIT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING_LIT
		public RuleCall getValueSTRING_LITTerminalRuleCall_0() { return cValueSTRING_LITTerminalRuleCall_0; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Literal value
		//Literal:
		//	NumberLit | CharLit | StringLit;
		public ParserRule getRule() { return rule; }

		//NumberLit | CharLit | StringLit
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberLit
		public RuleCall getNumberLitParserRuleCall_0() { return cNumberLitParserRuleCall_0; }

		//CharLit
		public RuleCall getCharLitParserRuleCall_1() { return cCharLitParserRuleCall_1; }

		//StringLit
		public RuleCall getStringLitParserRuleCall_2() { return cStringLitParserRuleCall_2; }
	}

	public class NumberLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLit");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueFLOAT_LITTerminalRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueINT_LITTerminalRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		
		//NumberLit:
		//	value=(FLOAT_LIT | INT_LIT);
		public ParserRule getRule() { return rule; }

		//value=(FLOAT_LIT | INT_LIT)
		public Assignment getValueAssignment() { return cValueAssignment; }

		//FLOAT_LIT | INT_LIT
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//FLOAT_LIT
		public RuleCall getValueFLOAT_LITTerminalRuleCall_0_0() { return cValueFLOAT_LITTerminalRuleCall_0_0; }

		//INT_LIT
		public RuleCall getValueINT_LITTerminalRuleCall_0_1() { return cValueINT_LITTerminalRuleCall_0_1; }
	}

	public class CharLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CharLit");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueCHAR_LITTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//// Single character literal
		//CharLit:
		//	value=CHAR_LIT;
		public ParserRule getRule() { return rule; }

		//value=CHAR_LIT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//CHAR_LIT
		public RuleCall getValueCHAR_LITTerminalRuleCall_0() { return cValueCHAR_LITTerminalRuleCall_0; }
	}
	
	
	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPRIVATEPrivKeyword_0_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPUBLICPubKeyword_1_0 = (Keyword)cPUBLICEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Visibility:
		//	PRIVATE="priv" | PUBLIC="pub";
		public EnumRule getRule() { return rule; }

		//PRIVATE="priv" | PUBLIC="pub"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PRIVATE="priv"
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_0() { return cPRIVATEEnumLiteralDeclaration_0; }

		//"priv"
		public Keyword getPRIVATEPrivKeyword_0_0() { return cPRIVATEPrivKeyword_0_0; }

		//PUBLIC="pub"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_1() { return cPUBLICEnumLiteralDeclaration_1; }

		//"pub"
		public Keyword getPUBLICPubKeyword_1_0() { return cPUBLICPubKeyword_1_0; }
	}
	
	private CrateElements pCrate;
	private ItemAttrElements pItemAttr;
	private AttrElements pAttr;
	private AttrWithListElements pAttrWithList;
	private LiteralAttrElements pLiteralAttr;
	private ItemAndAttrsElements pItemAndAttrs;
	private ItemElements pItem;
	private ModItemElements pModItem;
	private FnItemElements pFnItem;
	private TypeItemElements pTypeItem;
	private StructItemElements pStructItem;
	private EnumItemElements pEnumItem;
	private EnumVariantElements pEnumVariant;
	private TraitItemElements pTraitItem;
	private TraitMethodElements pTraitMethod;
	private ImplItemElements pImplItem;
	private ImplMethodElements pImplMethod;
	private ExternBlockElements pExternBlock;
	private ForeignFnElements pForeignFn;
	private StaticItemElements pStaticItem;
	private ExprElements pExpr;
	private ExprLValueElements pExprLValue;
	private ExprRValueElements pExprRValue;
	private ExprRValue1Elements pExprRValue1;
	private ExprLeafElements pExprLeaf;
	private ExprLiteralElements pExprLiteral;
	private ExprPathHeadElements pExprPathHead;
	private ExprGroupElements pExprGroup;
	private ExprTupleElements pExprTuple;
	private ExprStructElements pExprStruct;
	private ExprVecElements pExprVec;
	private ExprUnaryElements pExprUnary;
	private NumericNegationElements pNumericNegation;
	private DereferenceElements pDereference;
	private LogicalNegationElements pLogicalNegation;
	private ManagedBoxElements pManagedBox;
	private OwnedBoxElements pOwnedBox;
	private BorrowElements pBorrow;
	private ExprBinaryElements pExprBinary;
	private DivisionMultiplicationOrModuloElements pDivisionMultiplicationOrModulo;
	private AsElements pAs;
	private AdditionOrSubtractionElements pAdditionOrSubtraction;
	private ShiftOperatorElements pShiftOperator;
	private BitwiseAndElements pBitwiseAnd;
	private BitwiseXorElements pBitwiseXor;
	private BitwiseOrElements pBitwiseOr;
	private ComparisonOperatorsElements pComparisonOperators;
	private EqualityOperatorElements pEqualityOperator;
	private BooleanAndElements pBooleanAnd;
	private BooleanOrElements pBooleanOr;
	private AssignElements pAssign;
	private ExprLambdaElements pExprLambda;
	private ExprWhileElements pExprWhile;
	private ExprLoopElements pExprLoop;
	private ExprBreakElements pExprBreak;
	private ExprContinueElements pExprContinue;
	private ExprDoElements pExprDo;
	private ExprForElements pExprFor;
	private ExprIfElements pExprIf;
	private ElseTailElements pElseTail;
	private ExprMatchElements pExprMatch;
	private MatchArmElements pMatchArm;
	private MatchPatElements pMatchPat;
	private ExprReturnElements pExprReturn;
	private BlockElements pBlock;
	private StmtElements pStmt;
	private SlotDeclStmtElements pSlotDeclStmt;
	private ExprStmtElements pExprStmt;
	private GenericParamDeclElements pGenericParamDecl;
	private ArgElements pArg;
	private PatElements pPat;
	private PatWildcardElements pPatWildcard;
	private PatIdentElements pPatIdent;
	private PatBoxedElements pPatBoxed;
	private PatOwnedElements pPatOwned;
	private PatBorrowedElements pPatBorrowed;
	private PatTupleElements pPatTuple;
	private PatVectorElements pPatVector;
	private PatLiteralElements pPatLiteral;
	private PatEnumElements pPatEnum;
	private FieldPatElements pFieldPat;
	private TypePathElements pTypePath;
	private ExprPathElements pExprPath;
	private TerminalRule tLIFETIME;
	private TypeElements pType;
	private PrimitiveTypeElements pPrimitiveType;
	private NamedTypeElements pNamedType;
	private BoxedPointerElements pBoxedPointer;
	private OwnedPointerElements pOwnedPointer;
	private BorrowedPointerElements pBorrowedPointer;
	private StructFieldElements pStructField;
	private VariantElements pVariant;
	private StructVariantElements pStructVariant;
	private TupleVariantElements pTupleVariant;
	private UnitVariantElements pUnitVariant;
	private VisibilityElements unknownRuleVisibility;
	private TerminalRule tINT_TYPE;
	private TerminalRule tINT_SIZE;
	private TerminalRule tSIGNED_INT_TYPE;
	private TerminalRule tI8;
	private TerminalRule tI16;
	private TerminalRule tI32;
	private TerminalRule tI64;
	private TerminalRule tUNSIGNED_INT_TYPE;
	private TerminalRule tU8;
	private TerminalRule tU16;
	private TerminalRule tU32;
	private TerminalRule tU64;
	private TerminalRule tFLOAT_TYPE;
	private TerminalRule tFLOAT_SIZE;
	private TerminalRule tF32;
	private TerminalRule tF64;
	private TerminalRule tBOOLEAN_TYPE;
	private TerminalRule tMACHINE_TYPE;
	private TerminalRule tMACHINE_INT_TYPE;
	private TerminalRule tMACHINE_UINT_TYPE;
	private TerminalRule tUNIT_TYPE;
	private TerminalRule tMUT_KEYWORD;
	private StringLitElements pStringLit;
	private LiteralElements pLiteral;
	private NumberLitElements pNumberLit;
	private CharLitElements pCharLit;
	private TerminalRule tCHAR_LIT;
	private TerminalRule tSTRING_LIT;
	private TerminalRule tUNICODE_CHAR;
	private TerminalRule tUTF8_CHAR;
	private TerminalRule tUTF16_CHAR;
	private TerminalRule tUTF32_CHAR;
	private TerminalRule tFLOAT_LIT;
	private TerminalRule tINT_LIT;
	private TerminalRule tDEC_INT_LIT;
	private TerminalRule tBIN_INT_LIT;
	private TerminalRule tOCT_INT_LIT;
	private TerminalRule tHEX_INT_LIT;
	private TerminalRule tOCT_DIGIT;
	private TerminalRule tDEC_DIGIT;
	private TerminalRule tHEX_DIGIT;
	private TerminalRule tXID_START;
	private TerminalRule tXID_CONTINUE;
	private TerminalRule tIDENT;
	
	private final Grammar grammar;

	@Inject
	public RustGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.redoxi.ruste.Rust".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//// Top level crate and its implicit module
	//Crate:
	//	items+=ItemAndAttrs*;
	public CrateElements getCrateAccess() {
		return (pCrate != null) ? pCrate : (pCrate = new CrateElements());
	}
	
	public ParserRule getCrateRule() {
		return getCrateAccess().getRule();
	}

	//// Attribute for an item
	//ItemAttr:
	//	"#[" attrs+=Attr ("," attrs+=Attr)* "]";
	public ItemAttrElements getItemAttrAccess() {
		return (pItemAttr != null) ? pItemAttr : (pItemAttr = new ItemAttrElements());
	}
	
	public ParserRule getItemAttrRule() {
		return getItemAttrAccess().getRule();
	}

	//// Individual attribute within an item
	//Attr:
	//	LiteralAttr | AttrWithList;
	public AttrElements getAttrAccess() {
		return (pAttr != null) ? pAttr : (pAttr = new AttrElements());
	}
	
	public ParserRule getAttrRule() {
		return getAttrAccess().getRule();
	}

	//// Attribute with a list of other attributes
	//AttrWithList:
	//	ident=IDENT "(" attrs+=Attr ("," attrs+=Attr)* ")";
	public AttrWithListElements getAttrWithListAccess() {
		return (pAttrWithList != null) ? pAttrWithList : (pAttrWithList = new AttrWithListElements());
	}
	
	public ParserRule getAttrWithListRule() {
		return getAttrWithListAccess().getRule();
	}

	//// An attribute with a literal value
	//LiteralAttr:
	//	ident=IDENT "=" value=Literal;
	public LiteralAttrElements getLiteralAttrAccess() {
		return (pLiteralAttr != null) ? pLiteralAttr : (pLiteralAttr = new LiteralAttrElements());
	}
	
	public ParserRule getLiteralAttrRule() {
		return getLiteralAttrAccess().getRule();
	}

	//// An item and any associated attributes
	//ItemAndAttrs:
	//	attrs+=ItemAttr* item=Item;
	public ItemAndAttrsElements getItemAndAttrsAccess() {
		return (pItemAndAttrs != null) ? pItemAndAttrs : (pItemAndAttrs = new ItemAndAttrsElements());
	}
	
	public ParserRule getItemAndAttrsRule() {
		return getItemAndAttrsAccess().getRule();
	}

	//// Items within a module or crate
	//Item:
	//	ModItem | FnItem | TypeItem | StructItem | EnumItem | TraitItem | ImplItem | ExternBlock | StaticItem;
	public ItemElements getItemAccess() {
		return (pItem != null) ? pItem : (pItem = new ItemElements());
	}
	
	public ParserRule getItemRule() {
		return getItemAccess().getRule();
	}

	//// A module declaration item
	//ModItem:
	//	"mod" ident=IDENT (externalBody?=";" | "{" items+=ItemAndAttrs* "}");
	public ModItemElements getModItemAccess() {
		return (pModItem != null) ? pModItem : (pModItem = new ModItemElements());
	}
	
	public ParserRule getModItemRule() {
		return getModItemAccess().getRule();
	}

	//// Function item
	//FnItem:
	//	"fn" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "(" (args+=Arg ("," args+=Arg)*)?
	//	")" ("->" returnType=Type)? body=Block;
	public FnItemElements getFnItemAccess() {
		return (pFnItem != null) ? pFnItem : (pFnItem = new FnItemElements());
	}
	
	public ParserRule getFnItemRule() {
		return getFnItemAccess().getRule();
	}

	//// TODO Reference Type?
	//TypeItem:
	//	"type" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "=" type=Type ";";
	public TypeItemElements getTypeItemAccess() {
		return (pTypeItem != null) ? pTypeItem : (pTypeItem = new TypeItemElements());
	}
	
	public ParserRule getTypeItemRule() {
		return getTypeItemAccess().getRule();
	}

	//StructItem:
	//	"struct" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" fields+=StructField (","
	//	fields+=StructField)* "}";
	public StructItemElements getStructItemAccess() {
		return (pStructItem != null) ? pStructItem : (pStructItem = new StructItemElements());
	}
	
	public ParserRule getStructItemRule() {
		return getStructItemAccess().getRule();
	}

	//EnumItem:
	//	"enum" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" variants+=EnumVariant (","
	//	variants+=EnumVariant)* "}";
	public EnumItemElements getEnumItemAccess() {
		return (pEnumItem != null) ? pEnumItem : (pEnumItem = new EnumItemElements());
	}
	
	public ParserRule getEnumItemRule() {
		return getEnumItemAccess().getRule();
	}

	//EnumVariant:
	//	ident=IDENT ("<" params+=IDENT ("," params+=IDENT)* ">")? ("(" types+=Type ("," types+=Type)* ")" | "{"
	//	fields+=StructField ("," fields+=StructField)* / * TODO Wildcard pattern? * / "}")?;
	public EnumVariantElements getEnumVariantAccess() {
		return (pEnumVariant != null) ? pEnumVariant : (pEnumVariant = new EnumVariantElements());
	}
	
	public ParserRule getEnumVariantRule() {
		return getEnumVariantAccess().getRule();
	}

	//TraitItem:
	//	"trait" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" methods+=TraitMethod* "}";
	public TraitItemElements getTraitItemAccess() {
		return (pTraitItem != null) ? pTraitItem : (pTraitItem = new TraitItemElements());
	}
	
	public ParserRule getTraitItemRule() {
		return getTraitItemAccess().getRule();
	}

	//TraitMethod:
	//	(unsafe?="unsafe" | extern?="extern")? vis=Visibility? "fn" ident=IDENT ("<" params+=GenericParamDecl (","
	//	params+=GenericParamDecl)* ">")? "(" (args+=Arg ("," args+=Arg)*)? ")" ("->" returnType=Type)? (body=Block | ";");
	public TraitMethodElements getTraitMethodAccess() {
		return (pTraitMethod != null) ? pTraitMethod : (pTraitMethod = new TraitMethodElements());
	}
	
	public ParserRule getTraitMethodRule() {
		return getTraitMethodAccess().getRule();
	}

	//// TODO Crossreference struct and trait
	//ImplItem:
	//	"impl" (trait=IDENT "for")? struct=IDENT "{" methods+=ImplMethod* "}";
	public ImplItemElements getImplItemAccess() {
		return (pImplItem != null) ? pImplItem : (pImplItem = new ImplItemElements());
	}
	
	public ParserRule getImplItemRule() {
		return getImplItemAccess().getRule();
	}

	//ImplMethod:
	//	(unsafe?="unsafe" | extern?="extern")? "fn" ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)*
	//	">")? "(" (args+=Arg ("," args+=Arg)*)? ")" ("->" returnType=Type)? body=Block;
	public ImplMethodElements getImplMethodAccess() {
		return (pImplMethod != null) ? pImplMethod : (pImplMethod = new ImplMethodElements());
	}
	
	public ParserRule getImplMethodRule() {
		return getImplMethodAccess().getRule();
	}

	//ExternBlock:
	//	{ExternBlock} "extern" abi=STRING_LIT? "{" functions+=ForeignFn* "}";
	public ExternBlockElements getExternBlockAccess() {
		return (pExternBlock != null) ? pExternBlock : (pExternBlock = new ExternBlockElements());
	}
	
	public ParserRule getExternBlockRule() {
		return getExternBlockAccess().getRule();
	}

	//ForeignFn:
	//	"fn" ident=IDENT "(" (args+=Arg ("," args+=Arg)*)? ")" ("->" returnType=Type)? ";";
	public ForeignFnElements getForeignFnAccess() {
		return (pForeignFn != null) ? pForeignFn : (pForeignFn = new ForeignFnElements());
	}
	
	public ParserRule getForeignFnRule() {
		return getForeignFnAccess().getRule();
	}

	//StaticItem:
	//	"static" mutable?=MUT_KEYWORD ident=IDENT (":" type=Type)? "=" expr=Expr ";";
	public StaticItemElements getStaticItemAccess() {
		return (pStaticItem != null) ? pStaticItem : (pStaticItem = new StaticItemElements());
	}
	
	public ParserRule getStaticItemRule() {
		return getStaticItemAccess().getRule();
	}

	//Expr:
	//	ExprRValue;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//ExprLValue:
	//	ExprPathHead;
	public ExprLValueElements getExprLValueAccess() {
		return (pExprLValue != null) ? pExprLValue : (pExprLValue = new ExprLValueElements());
	}
	
	public ParserRule getExprLValueRule() {
		return getExprLValueAccess().getRule();
	}

	//ExprRValue: // TODO ExprMethodCall
	//// TODO ExprIndex
	//	ExprBinary;
	public ExprRValueElements getExprRValueAccess() {
		return (pExprRValue != null) ? pExprRValue : (pExprRValue = new ExprRValueElements());
	}
	
	public ParserRule getExprRValueRule() {
		return getExprRValueAccess().getRule();
	}

	//ExprRValue1:
	//	ExprLeaf ({ExprField.expr=current} => "." field=IDENT ({ExprMethodCall.method=current} "(" (args+=Expr (","
	//	args+=Expr))? ")")? | {ExprIndex.expr=current} => "[" indexExpr=Expr "]");
	public ExprRValue1Elements getExprRValue1Access() {
		return (pExprRValue1 != null) ? pExprRValue1 : (pExprRValue1 = new ExprRValue1Elements());
	}
	
	public ParserRule getExprRValue1Rule() {
		return getExprRValue1Access().getRule();
	}

	//// Expressions that avoid left recursion
	//ExprLeaf:
	//	ExprLiteral | // TODO ExprTupleOrGroup |
	//	ExprGroup | ExprStruct | ExprVec | ExprUnary | ExprLambda | ExprWhile | ExprLoop | ExprBreak | ExprContinue | ExprDo |
	//	ExprFor | ExprIf | ExprMatch | ExprReturn | ExprLValue;
	public ExprLeafElements getExprLeafAccess() {
		return (pExprLeaf != null) ? pExprLeaf : (pExprLeaf = new ExprLeafElements());
	}
	
	public ParserRule getExprLeafRule() {
		return getExprLeafAccess().getRule();
	}

	//ExprLiteral:
	//	literal=Literal;
	public ExprLiteralElements getExprLiteralAccess() {
		return (pExprLiteral != null) ? pExprLiteral : (pExprLiteral = new ExprLiteralElements());
	}
	
	public ParserRule getExprLiteralRule() {
		return getExprLiteralAccess().getRule();
	}

	//ExprPathHead:
	//	path=ExprPath ({ExprStruct.path=current} struct=ExprStruct | {ExprTuple.path=current} tuple=ExprTuple)?;
	public ExprPathHeadElements getExprPathHeadAccess() {
		return (pExprPathHead != null) ? pExprPathHead : (pExprPathHead = new ExprPathHeadElements());
	}
	
	public ParserRule getExprPathHeadRule() {
		return getExprPathHeadAccess().getRule();
	}

	//ExprGroup:
	//	"(" expr=Expr ({ExprTuple.exprs+=current} "," (exprs+=Expr ("," exprs+=Expr)* ","?)?)? ")";
	public ExprGroupElements getExprGroupAccess() {
		return (pExprGroup != null) ? pExprGroup : (pExprGroup = new ExprGroupElements());
	}
	
	public ParserRule getExprGroupRule() {
		return getExprGroupAccess().getRule();
	}

	//ExprTuple:
	//	"(" exprs+=Expr ("," exprs+=Expr)* ","? ")";
	public ExprTupleElements getExprTupleAccess() {
		return (pExprTuple != null) ? pExprTuple : (pExprTuple = new ExprTupleElements());
	}
	
	public ParserRule getExprTupleRule() {
		return getExprTupleAccess().getRule();
	}

	//ExprStruct:
	//	"{" fields+=StructField ("," fields+=StructField)* (".." baseExpr=Expr)? "}";
	public ExprStructElements getExprStructAccess() {
		return (pExprStruct != null) ? pExprStruct : (pExprStruct = new ExprStructElements());
	}
	
	public ParserRule getExprStructRule() {
		return getExprStructAccess().getRule();
	}

	//ExprVec:
	//	"[" mutable?=MUT_KEYWORD (exprs+=Expr "," (".." lenExpr=Expr | exprs+=Expr ("," exprs+=Expr)+))? "]";
	public ExprVecElements getExprVecAccess() {
		return (pExprVec != null) ? pExprVec : (pExprVec = new ExprVecElements());
	}
	
	public ParserRule getExprVecRule() {
		return getExprVecAccess().getRule();
	}

	//ExprUnary:
	//	NumericNegation | Dereference | LogicalNegation | ManagedBox | OwnedBox | Borrow;
	public ExprUnaryElements getExprUnaryAccess() {
		return (pExprUnary != null) ? pExprUnary : (pExprUnary = new ExprUnaryElements());
	}
	
	public ParserRule getExprUnaryRule() {
		return getExprUnaryAccess().getRule();
	}

	//NumericNegation:
	//	"-" expr=ExprLeaf;
	public NumericNegationElements getNumericNegationAccess() {
		return (pNumericNegation != null) ? pNumericNegation : (pNumericNegation = new NumericNegationElements());
	}
	
	public ParserRule getNumericNegationRule() {
		return getNumericNegationAccess().getRule();
	}

	//Dereference:
	//	"*" expr=ExprLeaf;
	public DereferenceElements getDereferenceAccess() {
		return (pDereference != null) ? pDereference : (pDereference = new DereferenceElements());
	}
	
	public ParserRule getDereferenceRule() {
		return getDereferenceAccess().getRule();
	}

	//LogicalNegation:
	//	"!" expr=ExprLeaf;
	public LogicalNegationElements getLogicalNegationAccess() {
		return (pLogicalNegation != null) ? pLogicalNegation : (pLogicalNegation = new LogicalNegationElements());
	}
	
	public ParserRule getLogicalNegationRule() {
		return getLogicalNegationAccess().getRule();
	}

	//ManagedBox:
	//	"@" expr=ExprLeaf;
	public ManagedBoxElements getManagedBoxAccess() {
		return (pManagedBox != null) ? pManagedBox : (pManagedBox = new ManagedBoxElements());
	}
	
	public ParserRule getManagedBoxRule() {
		return getManagedBoxAccess().getRule();
	}

	//OwnedBox:
	//	"~" expr=ExprLeaf;
	public OwnedBoxElements getOwnedBoxAccess() {
		return (pOwnedBox != null) ? pOwnedBox : (pOwnedBox = new OwnedBoxElements());
	}
	
	public ParserRule getOwnedBoxRule() {
		return getOwnedBoxAccess().getRule();
	}

	//Borrow:
	//	"&" expr=ExprLeaf;
	public BorrowElements getBorrowAccess() {
		return (pBorrow != null) ? pBorrow : (pBorrow = new BorrowElements());
	}
	
	public ParserRule getBorrowRule() {
		return getBorrowAccess().getRule();
	}

	//ExprBinary:
	//	Assign;
	public ExprBinaryElements getExprBinaryAccess() {
		return (pExprBinary != null) ? pExprBinary : (pExprBinary = new ExprBinaryElements());
	}
	
	public ParserRule getExprBinaryRule() {
		return getExprBinaryAccess().getRule();
	}

	//DivisionMultiplicationOrModulo:
	//	ExprRValue1 => ({Division.left=current} "/" right=ExprRValue1 | {Multiplication.left=current} "*" right=ExprRValue1 |
	//	{Modulo.left=current} "%" right=ExprRValue1)?;
	public DivisionMultiplicationOrModuloElements getDivisionMultiplicationOrModuloAccess() {
		return (pDivisionMultiplicationOrModulo != null) ? pDivisionMultiplicationOrModulo : (pDivisionMultiplicationOrModulo = new DivisionMultiplicationOrModuloElements());
	}
	
	public ParserRule getDivisionMultiplicationOrModuloRule() {
		return getDivisionMultiplicationOrModuloAccess().getRule();
	}

	//As:
	//	DivisionMultiplicationOrModulo => ({ExprCast.expr=current} "as" type=Type)?;
	public AsElements getAsAccess() {
		return (pAs != null) ? pAs : (pAs = new AsElements());
	}
	
	public ParserRule getAsRule() {
		return getAsAccess().getRule();
	}

	//AdditionOrSubtraction:
	//	As => ({ExprAddition.left=current} "+" right=As | {ExprSubtraction.left=current} "-" right=As)?;
	public AdditionOrSubtractionElements getAdditionOrSubtractionAccess() {
		return (pAdditionOrSubtraction != null) ? pAdditionOrSubtraction : (pAdditionOrSubtraction = new AdditionOrSubtractionElements());
	}
	
	public ParserRule getAdditionOrSubtractionRule() {
		return getAdditionOrSubtractionAccess().getRule();
	}

	//ShiftOperator:
	//	AdditionOrSubtraction => ({ExprLeftShift.left=current} "<<" right=AdditionOrSubtraction |
	//	{ExprRightShift.left=current} ">>" right=AdditionOrSubtraction)?;
	public ShiftOperatorElements getShiftOperatorAccess() {
		return (pShiftOperator != null) ? pShiftOperator : (pShiftOperator = new ShiftOperatorElements());
	}
	
	public ParserRule getShiftOperatorRule() {
		return getShiftOperatorAccess().getRule();
	}

	//BitwiseAnd:
	//	ShiftOperator => ({ExprBitwiseAnd.left=current} "&" right=ShiftOperator)?;
	public BitwiseAndElements getBitwiseAndAccess() {
		return (pBitwiseAnd != null) ? pBitwiseAnd : (pBitwiseAnd = new BitwiseAndElements());
	}
	
	public ParserRule getBitwiseAndRule() {
		return getBitwiseAndAccess().getRule();
	}

	//BitwiseXor:
	//	BitwiseAnd => ({ExprBitwiseXor.left=current} "^" right=BitwiseAnd)?;
	public BitwiseXorElements getBitwiseXorAccess() {
		return (pBitwiseXor != null) ? pBitwiseXor : (pBitwiseXor = new BitwiseXorElements());
	}
	
	public ParserRule getBitwiseXorRule() {
		return getBitwiseXorAccess().getRule();
	}

	//BitwiseOr:
	//	BitwiseXor => ({ExprBitwiseOr.left=current} "|" right=BitwiseXor)?;
	public BitwiseOrElements getBitwiseOrAccess() {
		return (pBitwiseOr != null) ? pBitwiseOr : (pBitwiseOr = new BitwiseOrElements());
	}
	
	public ParserRule getBitwiseOrRule() {
		return getBitwiseOrAccess().getRule();
	}

	//ComparisonOperators:
	//	BitwiseOr => ({ExprLessThan.left=current} "<" right=BitwiseOr | {ExprGreaterThan.left=current} ">" right=BitwiseOr |
	//	{ExprLessThanOrEqualTo.left=current} "<=" right=BitwiseOr | {ExprGreaterThanOrEqualTo.left=current} ">="
	//	right=BitwiseOr)?;
	public ComparisonOperatorsElements getComparisonOperatorsAccess() {
		return (pComparisonOperators != null) ? pComparisonOperators : (pComparisonOperators = new ComparisonOperatorsElements());
	}
	
	public ParserRule getComparisonOperatorsRule() {
		return getComparisonOperatorsAccess().getRule();
	}

	//EqualityOperator:
	//	ComparisonOperators => ({ExprEqualTo.left=current} "==" right=ComparisonOperators | {ExprNotEqualTo.left=current} "!="
	//	right=ComparisonOperators)?;
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return (pEqualityOperator != null) ? pEqualityOperator : (pEqualityOperator = new EqualityOperatorElements());
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}

	//BooleanAnd:
	//	EqualityOperator => ({ExprBooleanAnd.left=current} "&&" right=EqualityOperator)?;
	public BooleanAndElements getBooleanAndAccess() {
		return (pBooleanAnd != null) ? pBooleanAnd : (pBooleanAnd = new BooleanAndElements());
	}
	
	public ParserRule getBooleanAndRule() {
		return getBooleanAndAccess().getRule();
	}

	//BooleanOr:
	//	BooleanAnd => ({ExprBooleanOr.left=current} "||" right=BooleanAnd)?;
	public BooleanOrElements getBooleanOrAccess() {
		return (pBooleanOr != null) ? pBooleanOr : (pBooleanOr = new BooleanOrElements());
	}
	
	public ParserRule getBooleanOrRule() {
		return getBooleanOrAccess().getRule();
	}

	//// TODO Divide expressions into lvalues and rvalues
	//Assign:
	//	ExprLValue ({ExprAssign.left=current} "=" right=BooleanOr)?;
	public AssignElements getAssignAccess() {
		return (pAssign != null) ? pAssign : (pAssign = new AssignElements());
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}

	//ExprLambda:
	//	"|" (args+=IDENT ("," args+=IDENT)*)? "|" expr=Expr;
	public ExprLambdaElements getExprLambdaAccess() {
		return (pExprLambda != null) ? pExprLambda : (pExprLambda = new ExprLambdaElements());
	}
	
	public ParserRule getExprLambdaRule() {
		return getExprLambdaAccess().getRule();
	}

	//ExprWhile:
	//	"while" expr=Expr block=Block;
	public ExprWhileElements getExprWhileAccess() {
		return (pExprWhile != null) ? pExprWhile : (pExprWhile = new ExprWhileElements());
	}
	
	public ParserRule getExprWhileRule() {
		return getExprWhileAccess().getRule();
	}

	//ExprLoop:
	//	(lifetime=LIFETIME ":")? "loop" block=Block;
	public ExprLoopElements getExprLoopAccess() {
		return (pExprLoop != null) ? pExprLoop : (pExprLoop = new ExprLoopElements());
	}
	
	public ParserRule getExprLoopRule() {
		return getExprLoopAccess().getRule();
	}

	//ExprBreak:
	//	{ExprBreak} "break" lifetime=LIFETIME?;
	public ExprBreakElements getExprBreakAccess() {
		return (pExprBreak != null) ? pExprBreak : (pExprBreak = new ExprBreakElements());
	}
	
	public ParserRule getExprBreakRule() {
		return getExprBreakAccess().getRule();
	}

	//ExprContinue:
	//	{ExprContinue} "continue" lifetime=LIFETIME?;
	public ExprContinueElements getExprContinueAccess() {
		return (pExprContinue != null) ? pExprContinue : (pExprContinue = new ExprContinueElements());
	}
	
	public ParserRule getExprContinueRule() {
		return getExprContinueAccess().getRule();
	}

	//ExprDo:
	//	"do" expr=Expr "|" (args+=IDENT ("," args+=IDENT)*)? "|" block=Block;
	public ExprDoElements getExprDoAccess() {
		return (pExprDo != null) ? pExprDo : (pExprDo = new ExprDoElements());
	}
	
	public ParserRule getExprDoRule() {
		return getExprDoAccess().getRule();
	}

	//ExprFor:
	//	"for" pat=Pat "in" expr=Expr block=Block;
	public ExprForElements getExprForAccess() {
		return (pExprFor != null) ? pExprFor : (pExprFor = new ExprForElements());
	}
	
	public ParserRule getExprForRule() {
		return getExprForAccess().getRule();
	}

	//ExprIf:
	//	"if" expr=Expr block=Block else=ElseTail?;
	public ExprIfElements getExprIfAccess() {
		return (pExprIf != null) ? pExprIf : (pExprIf = new ExprIfElements());
	}
	
	public ParserRule getExprIfRule() {
		return getExprIfAccess().getRule();
	}

	//ElseTail:
	//	"else" (ExprIf | block=Block);
	public ElseTailElements getElseTailAccess() {
		return (pElseTail != null) ? pElseTail : (pElseTail = new ElseTailElements());
	}
	
	public ParserRule getElseTailRule() {
		return getElseTailAccess().getRule();
	}

	//ExprMatch:
	//	"match" expr=Expr "{" arms+=MatchArm ("|" arms+=MatchArm)* "}";
	public ExprMatchElements getExprMatchAccess() {
		return (pExprMatch != null) ? pExprMatch : (pExprMatch = new ExprMatchElements());
	}
	
	public ParserRule getExprMatchRule() {
		return getExprMatchAccess().getRule();
	}

	//MatchArm:
	//	matchPat=MatchPat "=>" (expr=Expr "," | block=Block);
	public MatchArmElements getMatchArmAccess() {
		return (pMatchArm != null) ? pMatchArm : (pMatchArm = new MatchArmElements());
	}
	
	public ParserRule getMatchArmRule() {
		return getMatchArmAccess().getRule();
	}

	//MatchPat:
	//	pat=Pat (".." endPat=Pat)? ("if" expr=Expr);
	public MatchPatElements getMatchPatAccess() {
		return (pMatchPat != null) ? pMatchPat : (pMatchPat = new MatchPatElements());
	}
	
	public ParserRule getMatchPatRule() {
		return getMatchPatAccess().getRule();
	}

	//// TODO Expression is optional
	//ExprReturn:
	//	{ExprReturn} "return" expr=Expr?;
	public ExprReturnElements getExprReturnAccess() {
		return (pExprReturn != null) ? pExprReturn : (pExprReturn = new ExprReturnElements());
	}
	
	public ParserRule getExprReturnRule() {
		return getExprReturnAccess().getRule();
	}

	//// Left-factored. Bit messy
	//Block:
	//	{Block} "{" expr=Expr ({Block.stmts+=current} ";" stmts+=Stmt (";" stmts+=Stmt)* expr=Expr?)? "}";
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//Stmt:
	//	SlotDeclStmt | ExprStmt;
	public StmtElements getStmtAccess() {
		return (pStmt != null) ? pStmt : (pStmt = new StmtElements());
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}

	//SlotDeclStmt:
	//	"let" pat=Pat (":" type=Type)? "=" expr=Expr ";";
	public SlotDeclStmtElements getSlotDeclStmtAccess() {
		return (pSlotDeclStmt != null) ? pSlotDeclStmt : (pSlotDeclStmt = new SlotDeclStmtElements());
	}
	
	public ParserRule getSlotDeclStmtRule() {
		return getSlotDeclStmtAccess().getRule();
	}

	//ExprStmt:
	//	expr=Expr ";";
	public ExprStmtElements getExprStmtAccess() {
		return (pExprStmt != null) ? pExprStmt : (pExprStmt = new ExprStmtElements());
	}
	
	public ParserRule getExprStmtRule() {
		return getExprStmtAccess().getRule();
	}

	//// TODO Crossreference Trait?
	//GenericParamDecl:
	//	ident=IDENT (":" bounds+=IDENT ("+" bounds+=IDENT))?;
	public GenericParamDeclElements getGenericParamDeclAccess() {
		return (pGenericParamDecl != null) ? pGenericParamDecl : (pGenericParamDecl = new GenericParamDeclElements());
	}
	
	public ParserRule getGenericParamDeclRule() {
		return getGenericParamDeclAccess().getRule();
	}

	//// TODO Crossreference Type
	//Arg:
	//	pat=Pat ":" type=Type;
	public ArgElements getArgAccess() {
		return (pArg != null) ? pArg : (pArg = new ArgElements());
	}
	
	public ParserRule getArgRule() {
		return getArgAccess().getRule();
	}

	//// TODO Expand
	//// See line 2869 of libsyntax/parse/parser.rs
	//Pat:
	//	PatWildcard | PatIdent | PatBoxed | PatOwned | PatBorrowed | PatTuple | PatVector | PatLiteral | PatEnum;
	public PatElements getPatAccess() {
		return (pPat != null) ? pPat : (pPat = new PatElements());
	}
	
	public ParserRule getPatRule() {
		return getPatAccess().getRule();
	}

	//PatWildcard:
	//	{PatWildcard} "_";
	public PatWildcardElements getPatWildcardAccess() {
		return (pPatWildcard != null) ? pPatWildcard : (pPatWildcard = new PatWildcardElements());
	}
	
	public ParserRule getPatWildcardRule() {
		return getPatWildcardAccess().getRule();
	}

	//PatIdent:
	//	mutable?=MUT_KEYWORD ident=IDENT;
	public PatIdentElements getPatIdentAccess() {
		return (pPatIdent != null) ? pPatIdent : (pPatIdent = new PatIdentElements());
	}
	
	public ParserRule getPatIdentRule() {
		return getPatIdentAccess().getRule();
	}

	//PatBoxed:
	//	"@" pattern=Pat;
	public PatBoxedElements getPatBoxedAccess() {
		return (pPatBoxed != null) ? pPatBoxed : (pPatBoxed = new PatBoxedElements());
	}
	
	public ParserRule getPatBoxedRule() {
		return getPatBoxedAccess().getRule();
	}

	//PatOwned:
	//	"~" pattern=Pat;
	public PatOwnedElements getPatOwnedAccess() {
		return (pPatOwned != null) ? pPatOwned : (pPatOwned = new PatOwnedElements());
	}
	
	public ParserRule getPatOwnedRule() {
		return getPatOwnedAccess().getRule();
	}

	//PatBorrowed:
	//	"&" pattern=Pat;
	public PatBorrowedElements getPatBorrowedAccess() {
		return (pPatBorrowed != null) ? pPatBorrowed : (pPatBorrowed = new PatBorrowedElements());
	}
	
	public ParserRule getPatBorrowedRule() {
		return getPatBorrowedAccess().getRule();
	}

	//PatTuple:
	//	"(" patterns+=Pat ("," patterns+=Pat)* ")";
	public PatTupleElements getPatTupleAccess() {
		return (pPatTuple != null) ? pPatTuple : (pPatTuple = new PatTupleElements());
	}
	
	public ParserRule getPatTupleRule() {
		return getPatTupleAccess().getRule();
	}

	//PatVector:
	//	"[" patterns+=Pat ("," patterns+=Pat)* "]";
	public PatVectorElements getPatVectorAccess() {
		return (pPatVector != null) ? pPatVector : (pPatVector = new PatVectorElements());
	}
	
	public ParserRule getPatVectorRule() {
		return getPatVectorAccess().getRule();
	}

	//PatLiteral:
	//	literal=Literal;
	public PatLiteralElements getPatLiteralAccess() {
		return (pPatLiteral != null) ? pPatLiteral : (pPatLiteral = new PatLiteralElements());
	}
	
	public ParserRule getPatLiteralRule() {
		return getPatLiteralAccess().getRule();
	}

	//PatEnum:
	//	path=ExprPath ({PatTupleEnum.path=current} "(" ("*" | ".." | patterns+=Pat ("," patterns+=Pat)*) ")" |
	//	{PatStructEnum.path=current} "{" fieldPatterns+=FieldPat ("," fieldPatterns+=FieldPat)* "}");
	public PatEnumElements getPatEnumAccess() {
		return (pPatEnum != null) ? pPatEnum : (pPatEnum = new PatEnumElements());
	}
	
	public ParserRule getPatEnumRule() {
		return getPatEnumAccess().getRule();
	}

	//FieldPat:
	//	ident=IDENT (":" pattern=Pat)?;
	public FieldPatElements getFieldPatAccess() {
		return (pFieldPat != null) ? pFieldPat : (pFieldPat = new FieldPatElements());
	}
	
	public ParserRule getFieldPatRule() {
		return getFieldPatAccess().getRule();
	}

	//TypePath:
	//	segments+=IDENT ("::" segments+=IDENT)* "<" (lifetimes+=LIFETIME | genericTypes+=Type) ("," (lifetimes+=LIFETIME |
	//	genericTypes+=Type))+ ">";
	public TypePathElements getTypePathAccess() {
		return (pTypePath != null) ? pTypePath : (pTypePath = new TypePathElements());
	}
	
	public ParserRule getTypePathRule() {
		return getTypePathAccess().getRule();
	}

	//ExprPath:
	//	segments+=IDENT ("::" segments+=IDENT)* ("::<" (lifetimes+=LIFETIME | genericTypes+=Type) ("," (lifetimes+=LIFETIME |
	//	genericTypes+=Type))* ">")?;
	public ExprPathElements getExprPathAccess() {
		return (pExprPath != null) ? pExprPath : (pExprPath = new ExprPathElements());
	}
	
	public ParserRule getExprPathRule() {
		return getExprPathAccess().getRule();
	}

	//terminal LIFETIME:
	//	"\'" IDENT;
	public TerminalRule getLIFETIMERule() {
		return (tLIFETIME != null) ? tLIFETIME : (tLIFETIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LIFETIME"));
	} 

	//Type:
	//	PrimitiveType | NamedType | BoxedPointer | OwnedPointer | BorrowedPointer;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//PrimitiveType:
	//	{IntType} INT_TYPE | {FloatType} FLOAT_TYPE | {BoolType} BOOLEAN_TYPE | {MachineType} MACHINE_TYPE | {UnitType}
	//	UNIT_TYPE;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return (pPrimitiveType != null) ? pPrimitiveType : (pPrimitiveType = new PrimitiveTypeElements());
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//NamedType:
	//	path=TypePath;
	public NamedTypeElements getNamedTypeAccess() {
		return (pNamedType != null) ? pNamedType : (pNamedType = new NamedTypeElements());
	}
	
	public ParserRule getNamedTypeRule() {
		return getNamedTypeAccess().getRule();
	}

	//BoxedPointer:
	//	"@" type=Type;
	public BoxedPointerElements getBoxedPointerAccess() {
		return (pBoxedPointer != null) ? pBoxedPointer : (pBoxedPointer = new BoxedPointerElements());
	}
	
	public ParserRule getBoxedPointerRule() {
		return getBoxedPointerAccess().getRule();
	}

	//OwnedPointer:
	//	"~" type=Type;
	public OwnedPointerElements getOwnedPointerAccess() {
		return (pOwnedPointer != null) ? pOwnedPointer : (pOwnedPointer = new OwnedPointerElements());
	}
	
	public ParserRule getOwnedPointerRule() {
		return getOwnedPointerAccess().getRule();
	}

	//BorrowedPointer:
	//	"&" type=Type;
	public BorrowedPointerElements getBorrowedPointerAccess() {
		return (pBorrowedPointer != null) ? pBorrowedPointer : (pBorrowedPointer = new BorrowedPointerElements());
	}
	
	public ParserRule getBorrowedPointerRule() {
		return getBorrowedPointerAccess().getRule();
	}

	//StructField:
	//	vis=Visibility? ident=IDENT ":" type=Type;
	public StructFieldElements getStructFieldAccess() {
		return (pStructField != null) ? pStructField : (pStructField = new StructFieldElements());
	}
	
	public ParserRule getStructFieldRule() {
		return getStructFieldAccess().getRule();
	}

	//Variant:
	//	StructVariant | TupleVariant | UnitVariant;
	public VariantElements getVariantAccess() {
		return (pVariant != null) ? pVariant : (pVariant = new VariantElements());
	}
	
	public ParserRule getVariantRule() {
		return getVariantAccess().getRule();
	}

	//StructVariant:
	//	ident=IDENT ("<" params+=GenericParamDecl ("," params+=GenericParamDecl)* ">")? "{" fields+=StructField (","
	//	fields+=StructField)* "}";
	public StructVariantElements getStructVariantAccess() {
		return (pStructVariant != null) ? pStructVariant : (pStructVariant = new StructVariantElements());
	}
	
	public ParserRule getStructVariantRule() {
		return getStructVariantAccess().getRule();
	}

	//TupleVariant:
	//	ident=IDENT "(" types+=Type ("," types+=Type)* ")";
	public TupleVariantElements getTupleVariantAccess() {
		return (pTupleVariant != null) ? pTupleVariant : (pTupleVariant = new TupleVariantElements());
	}
	
	public ParserRule getTupleVariantRule() {
		return getTupleVariantAccess().getRule();
	}

	//UnitVariant:
	//	ident=IDENT;
	public UnitVariantElements getUnitVariantAccess() {
		return (pUnitVariant != null) ? pUnitVariant : (pUnitVariant = new UnitVariantElements());
	}
	
	public ParserRule getUnitVariantRule() {
		return getUnitVariantAccess().getRule();
	}

	//enum Visibility:
	//	PRIVATE="priv" | PUBLIC="pub";
	public VisibilityElements getVisibilityAccess() {
		return (unknownRuleVisibility != null) ? unknownRuleVisibility : (unknownRuleVisibility = new VisibilityElements());
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//terminal INT_TYPE:
	//	INT_SIZE;
	public TerminalRule getINT_TYPERule() {
		return (tINT_TYPE != null) ? tINT_TYPE : (tINT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT_TYPE"));
	} 

	//terminal fragment INT_SIZE:
	//	SIGNED_INT_TYPE | UNSIGNED_INT_TYPE;
	public TerminalRule getINT_SIZERule() {
		return (tINT_SIZE != null) ? tINT_SIZE : (tINT_SIZE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT_SIZE"));
	} 

	//terminal fragment SIGNED_INT_TYPE:
	//	I8 | I16 | I32 | I64;
	public TerminalRule getSIGNED_INT_TYPERule() {
		return (tSIGNED_INT_TYPE != null) ? tSIGNED_INT_TYPE : (tSIGNED_INT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SIGNED_INT_TYPE"));
	} 

	//terminal fragment I8:
	//	"i8";
	public TerminalRule getI8Rule() {
		return (tI8 != null) ? tI8 : (tI8 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "I8"));
	} 

	//terminal fragment I16:
	//	"i16";
	public TerminalRule getI16Rule() {
		return (tI16 != null) ? tI16 : (tI16 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "I16"));
	} 

	//terminal fragment I32:
	//	"i32";
	public TerminalRule getI32Rule() {
		return (tI32 != null) ? tI32 : (tI32 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "I32"));
	} 

	//terminal fragment I64:
	//	"i64";
	public TerminalRule getI64Rule() {
		return (tI64 != null) ? tI64 : (tI64 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "I64"));
	} 

	//terminal fragment UNSIGNED_INT_TYPE:
	//	U8 | U16 | U32 | U64;
	public TerminalRule getUNSIGNED_INT_TYPERule() {
		return (tUNSIGNED_INT_TYPE != null) ? tUNSIGNED_INT_TYPE : (tUNSIGNED_INT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNSIGNED_INT_TYPE"));
	} 

	//terminal fragment U8:
	//	"u8";
	public TerminalRule getU8Rule() {
		return (tU8 != null) ? tU8 : (tU8 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "U8"));
	} 

	//terminal fragment U16:
	//	"u16";
	public TerminalRule getU16Rule() {
		return (tU16 != null) ? tU16 : (tU16 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "U16"));
	} 

	//terminal fragment U32:
	//	"u32";
	public TerminalRule getU32Rule() {
		return (tU32 != null) ? tU32 : (tU32 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "U32"));
	} 

	//terminal fragment U64:
	//	"u64";
	public TerminalRule getU64Rule() {
		return (tU64 != null) ? tU64 : (tU64 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "U64"));
	} 

	//terminal FLOAT_TYPE:
	//	FLOAT_SIZE;
	public TerminalRule getFLOAT_TYPERule() {
		return (tFLOAT_TYPE != null) ? tFLOAT_TYPE : (tFLOAT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT_TYPE"));
	} 

	//terminal fragment FLOAT_SIZE:
	//	F32 | F64;
	public TerminalRule getFLOAT_SIZERule() {
		return (tFLOAT_SIZE != null) ? tFLOAT_SIZE : (tFLOAT_SIZE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT_SIZE"));
	} 

	//terminal fragment F32:
	//	"f32";
	public TerminalRule getF32Rule() {
		return (tF32 != null) ? tF32 : (tF32 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "F32"));
	} 

	//terminal fragment F64:
	//	"f64";
	public TerminalRule getF64Rule() {
		return (tF64 != null) ? tF64 : (tF64 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "F64"));
	} 

	//terminal BOOLEAN_TYPE:
	//	"bool";
	public TerminalRule getBOOLEAN_TYPERule() {
		return (tBOOLEAN_TYPE != null) ? tBOOLEAN_TYPE : (tBOOLEAN_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN_TYPE"));
	} 

	//terminal MACHINE_TYPE:
	//	MACHINE_INT_TYPE | MACHINE_UINT_TYPE;
	public TerminalRule getMACHINE_TYPERule() {
		return (tMACHINE_TYPE != null) ? tMACHINE_TYPE : (tMACHINE_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MACHINE_TYPE"));
	} 

	//terminal fragment MACHINE_INT_TYPE:
	//	"int";
	public TerminalRule getMACHINE_INT_TYPERule() {
		return (tMACHINE_INT_TYPE != null) ? tMACHINE_INT_TYPE : (tMACHINE_INT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MACHINE_INT_TYPE"));
	} 

	//terminal fragment MACHINE_UINT_TYPE:
	//	"uint";
	public TerminalRule getMACHINE_UINT_TYPERule() {
		return (tMACHINE_UINT_TYPE != null) ? tMACHINE_UINT_TYPE : (tMACHINE_UINT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MACHINE_UINT_TYPE"));
	} 

	//terminal UNIT_TYPE:
	//	"()";
	public TerminalRule getUNIT_TYPERule() {
		return (tUNIT_TYPE != null) ? tUNIT_TYPE : (tUNIT_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNIT_TYPE"));
	} 

	//terminal MUT_KEYWORD:
	//	"mut";
	public TerminalRule getMUT_KEYWORDRule() {
		return (tMUT_KEYWORD != null) ? tMUT_KEYWORD : (tMUT_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MUT_KEYWORD"));
	} 

	//// TODO Add all keywords
	//// | {RawStringLit} 'r' '#' body = RawString? '#'
	//StringLit:
	//	value=STRING_LIT;
	public StringLitElements getStringLitAccess() {
		return (pStringLit != null) ? pStringLit : (pStringLit = new StringLitElements());
	}
	
	public ParserRule getStringLitRule() {
		return getStringLitAccess().getRule();
	}

	//// Literal value
	//Literal:
	//	NumberLit | CharLit | StringLit;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//NumberLit:
	//	value=(FLOAT_LIT | INT_LIT);
	public NumberLitElements getNumberLitAccess() {
		return (pNumberLit != null) ? pNumberLit : (pNumberLit = new NumberLitElements());
	}
	
	public ParserRule getNumberLitRule() {
		return getNumberLitAccess().getRule();
	}

	//// Single character literal
	//CharLit:
	//	value=CHAR_LIT;
	public CharLitElements getCharLitAccess() {
		return (pCharLit != null) ? pCharLit : (pCharLit = new CharLitElements());
	}
	
	public ParserRule getCharLitRule() {
		return getCharLitAccess().getRule();
	}

	//terminal CHAR_LIT:
	//	"\'" ("\\" ("\\" | "n" | "r" | "t" | "0") | UNICODE_CHAR | !("\\" | "\'"))* "\'";
	public TerminalRule getCHAR_LITRule() {
		return (tCHAR_LIT != null) ? tCHAR_LIT : (tCHAR_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHAR_LIT"));
	} 

	//terminal STRING_LIT:
	//	"\"" ("\\" ("\\" | "n" | "r" | "t" | "0") | UNICODE_CHAR | !("\\" | "\""))* "\"";
	public TerminalRule getSTRING_LITRule() {
		return (tSTRING_LIT != null) ? tSTRING_LIT : (tSTRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING_LIT"));
	} 

	//terminal fragment UNICODE_CHAR:
	//	UTF8_CHAR | UTF16_CHAR | UTF32_CHAR;
	public TerminalRule getUNICODE_CHARRule() {
		return (tUNICODE_CHAR != null) ? tUNICODE_CHAR : (tUNICODE_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNICODE_CHAR"));
	} 

	//terminal fragment UTF8_CHAR:
	//	"\\x" HEX_DIGIT HEX_DIGIT;
	public TerminalRule getUTF8_CHARRule() {
		return (tUTF8_CHAR != null) ? tUTF8_CHAR : (tUTF8_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UTF8_CHAR"));
	} 

	//terminal fragment UTF16_CHAR:
	//	"\\u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getUTF16_CHARRule() {
		return (tUTF16_CHAR != null) ? tUTF16_CHAR : (tUTF16_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UTF16_CHAR"));
	} 

	//terminal fragment UTF32_CHAR:
	//	"\\U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getUTF32_CHARRule() {
		return (tUTF32_CHAR != null) ? tUTF32_CHAR : (tUTF32_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UTF32_CHAR"));
	} 

	//// Floating point literal
	//terminal FLOAT_LIT:
	//	DEC_DIGIT (DEC_DIGIT | "_")* ("." (DEC_DIGIT | "_")+) (("E" | "e") ("+" | "-")? (DEC_DIGIT | "_")+)? FLOAT_SIZE?;
	public TerminalRule getFLOAT_LITRule() {
		return (tFLOAT_LIT != null) ? tFLOAT_LIT : (tFLOAT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT_LIT"));
	} 

	//// Integer literal
	//terminal INT_LIT:
	//	(DEC_INT_LIT | BIN_INT_LIT | OCT_INT_LIT | HEX_INT_LIT) INT_SIZE?;
	public TerminalRule getINT_LITRule() {
		return (tINT_LIT != null) ? tINT_LIT : (tINT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT_LIT"));
	} 

	//// Decimal (base 10) integer
	//terminal fragment DEC_INT_LIT:
	//	DEC_DIGIT (DEC_DIGIT | "_")*;
	public TerminalRule getDEC_INT_LITRule() {
		return (tDEC_INT_LIT != null) ? tDEC_INT_LIT : (tDEC_INT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DEC_INT_LIT"));
	} 

	//// Binary (base 2) integer
	//terminal fragment BIN_INT_LIT:
	//	"0b" ("0" | "1" | "_")+;
	public TerminalRule getBIN_INT_LITRule() {
		return (tBIN_INT_LIT != null) ? tBIN_INT_LIT : (tBIN_INT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BIN_INT_LIT"));
	} 

	//// Octal (base 8) integer
	//terminal fragment OCT_INT_LIT:
	//	"0o" (OCT_DIGIT | "_")+;
	public TerminalRule getOCT_INT_LITRule() {
		return (tOCT_INT_LIT != null) ? tOCT_INT_LIT : (tOCT_INT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCT_INT_LIT"));
	} 

	//// Hex (base 16) integer
	//terminal fragment HEX_INT_LIT:
	//	"0x" (HEX_DIGIT | "_")+;
	public TerminalRule getHEX_INT_LITRule() {
		return (tHEX_INT_LIT != null) ? tHEX_INT_LIT : (tHEX_INT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_INT_LIT"));
	} 

	//terminal fragment OCT_DIGIT:
	//	"0".."7";
	public TerminalRule getOCT_DIGITRule() {
		return (tOCT_DIGIT != null) ? tOCT_DIGIT : (tOCT_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCT_DIGIT"));
	} 

	//terminal fragment DEC_DIGIT:
	//	"0".."9";
	public TerminalRule getDEC_DIGITRule() {
		return (tDEC_DIGIT != null) ? tDEC_DIGIT : (tDEC_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DEC_DIGIT"));
	} 

	//terminal fragment HEX_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getHEX_DIGITRule() {
		return (tHEX_DIGIT != null) ? tHEX_DIGIT : (tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_DIGIT"));
	} 

	//// terminal fragment NON_SPECIAL_CHAR: !('"' | '\'' | '\\' | 'n' | 'r' | 't' | '0');
	//// TODO Expand
	//terminal fragment XID_START:
	//	"a".."z";
	public TerminalRule getXID_STARTRule() {
		return (tXID_START != null) ? tXID_START : (tXID_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XID_START"));
	} 

	//// TODO Expand
	//terminal fragment XID_CONTINUE:
	//	"a".."z" | "_";
	public TerminalRule getXID_CONTINUERule() {
		return (tXID_CONTINUE != null) ? tXID_CONTINUE : (tXID_CONTINUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XID_CONTINUE"));
	} 

	//terminal IDENT:
	//	XID_START XID_CONTINUE*;
	public TerminalRule getIDENTRule() {
		return (tIDENT != null) ? tIDENT : (tIDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENT"));
	} 
}

/*
* generated by Xtext
*/
grammar InternalRust;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.redoxi.ruste.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.redoxi.ruste.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.redoxi.ruste.services.RustGrammarAccess;

}

@parser::members {

 	private RustGrammarAccess grammarAccess;
 	
    public InternalRustParser(TokenStream input, RustGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Crate";	
   	}
   	
   	@Override
   	protected RustGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleCrate
entryRuleCrate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCrateRule()); }
	 iv_ruleCrate=ruleCrate 
	 { $current=$iv_ruleCrate.current; } 
	 EOF 
;

// Rule Crate
ruleCrate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getCrateAccess().getItemsItemAndAttrsParserRuleCall_0()); 
	    }
		lv_items_0_0=ruleItemAndAttrs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCrateRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_0_0, 
        		"ItemAndAttrs");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleItemAttr
entryRuleItemAttr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItemAttrRule()); }
	 iv_ruleItemAttr=ruleItemAttr 
	 { $current=$iv_ruleItemAttr.current; } 
	 EOF 
;

// Rule ItemAttr
ruleItemAttr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getItemAttrAccess().getNumberSignLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getItemAttrAccess().getAttrsAttrParserRuleCall_1_0()); 
	    }
		lv_attrs_1_0=ruleAttr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItemAttrRule());
	        }
       		add(
       			$current, 
       			"attrs",
        		lv_attrs_1_0, 
        		"Attr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getItemAttrAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getItemAttrAccess().getAttrsAttrParserRuleCall_2_1_0()); 
	    }
		lv_attrs_3_0=ruleAttr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItemAttrRule());
	        }
       		add(
       			$current, 
       			"attrs",
        		lv_attrs_3_0, 
        		"Attr");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getItemAttrAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleAttr
entryRuleAttr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttrRule()); }
	 iv_ruleAttr=ruleAttr 
	 { $current=$iv_ruleAttr.current; } 
	 EOF 
;

// Rule Attr
ruleAttr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAttrAccess().getLiteralAttrParserRuleCall_0()); 
    }
    this_LiteralAttr_0=ruleLiteralAttr
    { 
        $current = $this_LiteralAttr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttrAccess().getAttrWithListParserRuleCall_1()); 
    }
    this_AttrWithList_1=ruleAttrWithList
    { 
        $current = $this_AttrWithList_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAttrWithList
entryRuleAttrWithList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttrWithListRule()); }
	 iv_ruleAttrWithList=ruleAttrWithList 
	 { $current=$iv_ruleAttrWithList.current; } 
	 EOF 
;

// Rule AttrWithList
ruleAttrWithList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_ident_0_0=RULE_IDENT
		{
			newLeafNode(lv_ident_0_0, grammarAccess.getAttrWithListAccess().getIdentIDENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttrWithListRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ident",
        		lv_ident_0_0, 
        		"IDENT");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttrWithListAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrWithListAccess().getAttrsAttrParserRuleCall_2_0()); 
	    }
		lv_attrs_2_0=ruleAttr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrWithListRule());
	        }
       		add(
       			$current, 
       			"attrs",
        		lv_attrs_2_0, 
        		"Attr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAttrWithListAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrWithListAccess().getAttrsAttrParserRuleCall_3_1_0()); 
	    }
		lv_attrs_4_0=ruleAttr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrWithListRule());
	        }
       		add(
       			$current, 
       			"attrs",
        		lv_attrs_4_0, 
        		"Attr");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAttrWithListAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleLiteralAttr
entryRuleLiteralAttr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralAttrRule()); }
	 iv_ruleLiteralAttr=ruleLiteralAttr 
	 { $current=$iv_ruleLiteralAttr.current; } 
	 EOF 
;

// Rule LiteralAttr
ruleLiteralAttr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_ident_0_0=RULE_IDENT
		{
			newLeafNode(lv_ident_0_0, grammarAccess.getLiteralAttrAccess().getIdentIDENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralAttrRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ident",
        		lv_ident_0_0, 
        		"IDENT");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLiteralAttrAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAttrAccess().getValueLiteralParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralAttrRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleItemAndAttrs
entryRuleItemAndAttrs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItemAndAttrsRule()); }
	 iv_ruleItemAndAttrs=ruleItemAndAttrs 
	 { $current=$iv_ruleItemAndAttrs.current; } 
	 EOF 
;

// Rule ItemAndAttrs
ruleItemAndAttrs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getItemAndAttrsAccess().getAttrsItemAttrParserRuleCall_0_0()); 
	    }
		lv_attrs_0_0=ruleItemAttr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItemAndAttrsRule());
	        }
       		add(
       			$current, 
       			"attrs",
        		lv_attrs_0_0, 
        		"ItemAttr");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getItemAndAttrsAccess().getItemItemParserRuleCall_1_0()); 
	    }
		lv_item_1_0=ruleItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItemAndAttrsRule());
	        }
       		set(
       			$current, 
       			"item",
        		lv_item_1_0, 
        		"Item");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleItem
entryRuleItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItemRule()); }
	 iv_ruleItem=ruleItem 
	 { $current=$iv_ruleItem.current; } 
	 EOF 
;

// Rule Item
ruleItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getItemAccess().getModItemParserRuleCall()); 
    }
    this_ModItem_0=ruleModItem
    { 
        $current = $this_ModItem_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleModItem
entryRuleModItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModItemRule()); }
	 iv_ruleModItem=ruleModItem 
	 { $current=$iv_ruleModItem.current; } 
	 EOF 
;

// Rule ModItem
ruleModItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='mod' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModItemAccess().getModKeyword_0());
    }
(
(
		lv_ident_1_0=RULE_IDENT
		{
			newLeafNode(lv_ident_1_0, grammarAccess.getModItemAccess().getIdentIDENTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModItemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ident",
        		lv_ident_1_0, 
        		"IDENT");
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModItemAccess().getSemicolonKeyword_2_0());
    }

    |(	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModItemAccess().getLeftCurlyBracketKeyword_2_1_0());
    }
	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModItemAccess().getRightCurlyBracketKeyword_2_1_1());
    }
)))
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getCharLitParserRuleCall()); 
    }
    this_CharLit_0=ruleCharLit
    { 
        $current = $this_CharLit_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleCharLit
entryRuleCharLit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharLitRule()); }
	 iv_ruleCharLit=ruleCharLit 
	 { $current=$iv_ruleCharLit.current; } 
	 EOF 
;

// Rule CharLit
ruleCharLit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='\'' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCharLitAccess().getApostropheKeyword_0());
    }
((
(
		lv_char_1_0=RULE_NON_SINGLE_QUOTE
		{
			newLeafNode(lv_char_1_0, grammarAccess.getCharLitAccess().getCharNON_SINGLE_QUOTETerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCharLitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"char",
        		lv_char_1_0, 
        		"NON_SINGLE_QUOTE");
	    }

)
)
    |(	otherlv_2='\\' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCharLitAccess().getReverseSolidusKeyword_1_1_0());
    }
((
(
		lv_char_3_0=	'\'' 
    {
        newLeafNode(lv_char_3_0, grammarAccess.getCharLitAccess().getCharApostropheKeyword_1_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCharLitRule());
	        }
       		setWithLastConsumed($current, "char", lv_char_3_0, "\'");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCharLitAccess().getEscapedCharEscapedCharParserRuleCall_1_1_1_1_0()); 
	    }
		lv_escapedChar_4_0=ruleEscapedChar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCharLitRule());
	        }
       		set(
       			$current, 
       			"escapedChar",
        		lv_escapedChar_4_0, 
        		"EscapedChar");
	        afterParserOrEnumRuleCall();
	    }

)
))))	otherlv_5='\'' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCharLitAccess().getApostropheKeyword_2());
    }
)
;





// Entry rule entryRuleEscapedChar
entryRuleEscapedChar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEscapedCharRule()); }
	 iv_ruleEscapedChar=ruleEscapedChar 
	 { $current=$iv_ruleEscapedChar.current; } 
	 EOF 
;

// Rule EscapedChar
ruleEscapedChar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEscapedCharAccess().getEscapedCharAction_0_0(),
            $current);
    }
)(
(
(
		lv_char_1_1=	'\\' 
    {
        newLeafNode(lv_char_1_1, grammarAccess.getEscapedCharAccess().getCharReverseSolidusKeyword_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		setWithLastConsumed($current, "char", lv_char_1_1, null);
	    }

    |		lv_char_1_2=	'n' 
    {
        newLeafNode(lv_char_1_2, grammarAccess.getEscapedCharAccess().getCharNKeyword_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		setWithLastConsumed($current, "char", lv_char_1_2, null);
	    }

    |		lv_char_1_3=	'r' 
    {
        newLeafNode(lv_char_1_3, grammarAccess.getEscapedCharAccess().getCharRKeyword_0_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		setWithLastConsumed($current, "char", lv_char_1_3, null);
	    }

    |		lv_char_1_4=	't' 
    {
        newLeafNode(lv_char_1_4, grammarAccess.getEscapedCharAccess().getCharTKeyword_0_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		setWithLastConsumed($current, "char", lv_char_1_4, null);
	    }

    |		lv_char_1_5=	'0' 
    {
        newLeafNode(lv_char_1_5, grammarAccess.getEscapedCharAccess().getChar0Keyword_0_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		setWithLastConsumed($current, "char", lv_char_1_5, null);
	    }

)

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEscapedCharAccess().getUnicodeCharAction_1_0(),
            $current);
    }
)	otherlv_3='x' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEscapedCharAccess().getXKeyword_1_1());
    }
(
(
		lv_digits_4_0=RULE_HEX_DIGIT
		{
			newLeafNode(lv_digits_4_0, grammarAccess.getEscapedCharAccess().getDigitsHEX_DIGITTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"digits",
        		lv_digits_4_0, 
        		"HEX_DIGIT");
	    }

)
)(
(
		lv_digits_5_0=RULE_HEX_DIGIT
		{
			newLeafNode(lv_digits_5_0, grammarAccess.getEscapedCharAccess().getDigitsHEX_DIGITTerminalRuleCall_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"digits",
        		lv_digits_5_0, 
        		"HEX_DIGIT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEscapedCharAccess().getUnicodeCharAction_2_0(),
            $current);
    }
)	otherlv_7='u' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEscapedCharAccess().getUKeyword_2_1());
    }
(
(
		lv_digits_8_0=RULE_HEX_DIGIT
		{
			newLeafNode(lv_digits_8_0, grammarAccess.getEscapedCharAccess().getDigitsHEX_DIGITTerminalRuleCall_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"digits",
        		lv_digits_8_0, 
        		"HEX_DIGIT");
	    }

)
)(
(
		lv_digits_9_0=RULE_HEX_DIGIT
		{
			newLeafNode(lv_digits_9_0, grammarAccess.getEscapedCharAccess().getDigitsHEX_DIGITTerminalRuleCall_2_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"digits",
        		lv_digits_9_0, 
        		"HEX_DIGIT");
	    }

)
)(
(
		lv_digits_10_0=RULE_HEX_DIGIT
		{
			newLeafNode(lv_digits_10_0, grammarAccess.getEscapedCharAccess().getDigitsHEX_DIGITTerminalRuleCall_2_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"digits",
        		lv_digits_10_0, 
        		"HEX_DIGIT");
	    }

)
)(
(
		lv_digits_11_0=RULE_HEX_DIGIT
		{
			newLeafNode(lv_digits_11_0, grammarAccess.getEscapedCharAccess().getDigitsHEX_DIGITTerminalRuleCall_2_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"digits",
        		lv_digits_11_0, 
        		"HEX_DIGIT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEscapedCharAccess().getUnicodeCharAction_3_0(),
            $current);
    }
)	otherlv_13='U' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getEscapedCharAccess().getUKeyword_3_1());
    }
(
(
		lv_digits_14_0=RULE_HEX_DIGIT
		{
			newLeafNode(lv_digits_14_0, grammarAccess.getEscapedCharAccess().getDigitsHEX_DIGITTerminalRuleCall_3_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"digits",
        		lv_digits_14_0, 
        		"HEX_DIGIT");
	    }

)
)(
(
		lv_digits_15_0=RULE_HEX_DIGIT
		{
			newLeafNode(lv_digits_15_0, grammarAccess.getEscapedCharAccess().getDigitsHEX_DIGITTerminalRuleCall_3_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"digits",
        		lv_digits_15_0, 
        		"HEX_DIGIT");
	    }

)
)(
(
		lv_digits_16_0=RULE_HEX_DIGIT
		{
			newLeafNode(lv_digits_16_0, grammarAccess.getEscapedCharAccess().getDigitsHEX_DIGITTerminalRuleCall_3_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"digits",
        		lv_digits_16_0, 
        		"HEX_DIGIT");
	    }

)
)(
(
		lv_digits_17_0=RULE_HEX_DIGIT
		{
			newLeafNode(lv_digits_17_0, grammarAccess.getEscapedCharAccess().getDigitsHEX_DIGITTerminalRuleCall_3_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"digits",
        		lv_digits_17_0, 
        		"HEX_DIGIT");
	    }

)
)(
(
		lv_digits_18_0=RULE_HEX_DIGIT
		{
			newLeafNode(lv_digits_18_0, grammarAccess.getEscapedCharAccess().getDigitsHEX_DIGITTerminalRuleCall_3_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"digits",
        		lv_digits_18_0, 
        		"HEX_DIGIT");
	    }

)
)(
(
		lv_digits_19_0=RULE_HEX_DIGIT
		{
			newLeafNode(lv_digits_19_0, grammarAccess.getEscapedCharAccess().getDigitsHEX_DIGITTerminalRuleCall_3_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"digits",
        		lv_digits_19_0, 
        		"HEX_DIGIT");
	    }

)
)(
(
		lv_digits_20_0=RULE_HEX_DIGIT
		{
			newLeafNode(lv_digits_20_0, grammarAccess.getEscapedCharAccess().getDigitsHEX_DIGITTerminalRuleCall_3_8_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"digits",
        		lv_digits_20_0, 
        		"HEX_DIGIT");
	    }

)
)(
(
		lv_digits_21_0=RULE_HEX_DIGIT
		{
			newLeafNode(lv_digits_21_0, grammarAccess.getEscapedCharAccess().getDigitsHEX_DIGITTerminalRuleCall_3_9_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEscapedCharRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"digits",
        		lv_digits_21_0, 
        		"HEX_DIGIT");
	    }

)
)))
;





RULE_HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_XID_START : 'a'..'z';

fragment RULE_XID_CONTINUE : ('a'..'z'|'_');

RULE_IDENT : RULE_XID_START RULE_XID_CONTINUE*;

RULE_NON_SINGLE_QUOTE : ~('\'');



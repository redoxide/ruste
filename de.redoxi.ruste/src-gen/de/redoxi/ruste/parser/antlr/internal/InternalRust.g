/*
* generated by Xtext
*/
grammar InternalRust;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.redoxi.ruste.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.redoxi.ruste.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.redoxi.ruste.services.RustGrammarAccess;

}

@parser::members {

 	private RustGrammarAccess grammarAccess;
 	
    public InternalRustParser(TokenStream input, RustGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Crate";	
   	}
   	
   	@Override
   	protected RustGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleCrate
entryRuleCrate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCrateRule()); }
	 iv_ruleCrate=ruleCrate 
	 { $current=$iv_ruleCrate.current; } 
	 EOF 
;

// Rule Crate
ruleCrate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getCrateAccess().getItemsItemAndAttrsParserRuleCall_0()); 
	    }
		lv_items_0_0=ruleItemAndAttrs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCrateRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_0_0, 
        		"ItemAndAttrs");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleItemAttr
entryRuleItemAttr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItemAttrRule()); }
	 iv_ruleItemAttr=ruleItemAttr 
	 { $current=$iv_ruleItemAttr.current; } 
	 EOF 
;

// Rule ItemAttr
ruleItemAttr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getItemAttrAccess().getNumberSignLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getItemAttrAccess().getAttrsAttrParserRuleCall_1_0()); 
	    }
		lv_attrs_1_0=ruleAttr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItemAttrRule());
	        }
       		add(
       			$current, 
       			"attrs",
        		lv_attrs_1_0, 
        		"Attr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getItemAttrAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getItemAttrAccess().getAttrsAttrParserRuleCall_2_1_0()); 
	    }
		lv_attrs_3_0=ruleAttr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItemAttrRule());
	        }
       		add(
       			$current, 
       			"attrs",
        		lv_attrs_3_0, 
        		"Attr");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getItemAttrAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleAttr
entryRuleAttr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttrRule()); }
	 iv_ruleAttr=ruleAttr 
	 { $current=$iv_ruleAttr.current; } 
	 EOF 
;

// Rule Attr
ruleAttr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAttrAccess().getLiteralAttrParserRuleCall_0()); 
    }
    this_LiteralAttr_0=ruleLiteralAttr
    { 
        $current = $this_LiteralAttr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttrAccess().getAttrWithListParserRuleCall_1()); 
    }
    this_AttrWithList_1=ruleAttrWithList
    { 
        $current = $this_AttrWithList_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAttrWithList
entryRuleAttrWithList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttrWithListRule()); }
	 iv_ruleAttrWithList=ruleAttrWithList 
	 { $current=$iv_ruleAttrWithList.current; } 
	 EOF 
;

// Rule AttrWithList
ruleAttrWithList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_ident_0_0=RULE_IDENT
		{
			newLeafNode(lv_ident_0_0, grammarAccess.getAttrWithListAccess().getIdentIDENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttrWithListRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ident",
        		lv_ident_0_0, 
        		"IDENT");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttrWithListAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrWithListAccess().getAttrsAttrParserRuleCall_2_0()); 
	    }
		lv_attrs_2_0=ruleAttr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrWithListRule());
	        }
       		add(
       			$current, 
       			"attrs",
        		lv_attrs_2_0, 
        		"Attr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAttrWithListAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrWithListAccess().getAttrsAttrParserRuleCall_3_1_0()); 
	    }
		lv_attrs_4_0=ruleAttr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrWithListRule());
	        }
       		add(
       			$current, 
       			"attrs",
        		lv_attrs_4_0, 
        		"Attr");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAttrWithListAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleLiteralAttr
entryRuleLiteralAttr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralAttrRule()); }
	 iv_ruleLiteralAttr=ruleLiteralAttr 
	 { $current=$iv_ruleLiteralAttr.current; } 
	 EOF 
;

// Rule LiteralAttr
ruleLiteralAttr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_ident_0_0=RULE_IDENT
		{
			newLeafNode(lv_ident_0_0, grammarAccess.getLiteralAttrAccess().getIdentIDENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralAttrRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ident",
        		lv_ident_0_0, 
        		"IDENT");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLiteralAttrAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAttrAccess().getValueLiteralParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralAttrRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleItemAndAttrs
entryRuleItemAndAttrs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItemAndAttrsRule()); }
	 iv_ruleItemAndAttrs=ruleItemAndAttrs 
	 { $current=$iv_ruleItemAndAttrs.current; } 
	 EOF 
;

// Rule ItemAndAttrs
ruleItemAndAttrs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getItemAndAttrsAccess().getAttrsItemAttrParserRuleCall_0_0()); 
	    }
		lv_attrs_0_0=ruleItemAttr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItemAndAttrsRule());
	        }
       		add(
       			$current, 
       			"attrs",
        		lv_attrs_0_0, 
        		"ItemAttr");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getItemAndAttrsAccess().getItemItemParserRuleCall_1_0()); 
	    }
		lv_item_1_0=ruleItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItemAndAttrsRule());
	        }
       		set(
       			$current, 
       			"item",
        		lv_item_1_0, 
        		"Item");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleItem
entryRuleItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItemRule()); }
	 iv_ruleItem=ruleItem 
	 { $current=$iv_ruleItem.current; } 
	 EOF 
;

// Rule Item
ruleItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getItemAccess().getModItemParserRuleCall_0()); 
    }
    this_ModItem_0=ruleModItem
    { 
        $current = $this_ModItem_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getItemAccess().getFnItemParserRuleCall_1()); 
    }
    this_FnItem_1=ruleFnItem
    { 
        $current = $this_FnItem_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleModItem
entryRuleModItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModItemRule()); }
	 iv_ruleModItem=ruleModItem 
	 { $current=$iv_ruleModItem.current; } 
	 EOF 
;

// Rule ModItem
ruleModItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='mod' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModItemAccess().getModKeyword_0());
    }
(
(
		lv_ident_1_0=RULE_IDENT
		{
			newLeafNode(lv_ident_1_0, grammarAccess.getModItemAccess().getIdentIDENTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModItemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ident",
        		lv_ident_1_0, 
        		"IDENT");
	    }

)
)((
(
		lv_externalBody_2_0=	';' 
    {
        newLeafNode(lv_externalBody_2_0, grammarAccess.getModItemAccess().getExternalBodySemicolonKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModItemRule());
	        }
       		setWithLastConsumed($current, "externalBody", true, ";");
	    }

)
)
    |(	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModItemAccess().getLeftCurlyBracketKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModItemAccess().getItemsItemAndAttrsParserRuleCall_2_1_1_0()); 
	    }
		lv_items_4_0=ruleItemAndAttrs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModItemRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_4_0, 
        		"ItemAndAttrs");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModItemAccess().getRightCurlyBracketKeyword_2_1_2());
    }
)))
;





// Entry rule entryRuleFnItem
entryRuleFnItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFnItemRule()); }
	 iv_ruleFnItem=ruleFnItem 
	 { $current=$iv_ruleFnItem.current; } 
	 EOF 
;

// Rule FnItem
ruleFnItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='fn' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFnItemAccess().getFnKeyword_0());
    }
(
(
		lv_ident_1_0=RULE_IDENT
		{
			newLeafNode(lv_ident_1_0, grammarAccess.getFnItemAccess().getIdentIDENTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnItemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ident",
        		lv_ident_1_0, 
        		"IDENT");
	    }

)
)(	otherlv_2='<' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFnItemAccess().getLessThanSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFnItemAccess().getParamsGenericParamDeclParserRuleCall_2_1_0()); 
	    }
		lv_params_3_0=ruleGenericParamDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnItemRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"GenericParamDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFnItemAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFnItemAccess().getParamsGenericParamDeclParserRuleCall_2_2_1_0()); 
	    }
		lv_params_5_0=ruleGenericParamDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnItemRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"GenericParamDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='>' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFnItemAccess().getGreaterThanSignKeyword_2_3());
    }
)?	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFnItemAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFnItemAccess().getArgsArgParserRuleCall_4_0_0()); 
	    }
		lv_args_8_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnItemRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_8_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFnItemAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFnItemAccess().getArgsArgParserRuleCall_4_1_1_0()); 
	    }
		lv_args_10_0=ruleArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnItemRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_10_0, 
        		"Arg");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getFnItemAccess().getRightParenthesisKeyword_5());
    }
(	otherlv_12='->' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getFnItemAccess().getHyphenMinusGreaterThanSignKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFnItemAccess().getReturnTypeTypeParserRuleCall_6_1_0()); 
	    }
		lv_returnType_13_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnItemRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_13_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getFnItemAccess().getBodyBlockParserRuleCall_7_0()); 
	    }
		lv_body_14_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnItemRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_14_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBlock
entryRuleBlock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); } 
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current.getText(); }  
	 EOF 
;

// Rule Block
ruleBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0()); 
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleGenericParamDecl
entryRuleGenericParamDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGenericParamDeclRule()); }
	 iv_ruleGenericParamDecl=ruleGenericParamDecl 
	 { $current=$iv_ruleGenericParamDecl.current; } 
	 EOF 
;

// Rule GenericParamDecl
ruleGenericParamDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_ident_0_0=RULE_IDENT
		{
			newLeafNode(lv_ident_0_0, grammarAccess.getGenericParamDeclAccess().getIdentIDENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenericParamDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ident",
        		lv_ident_0_0, 
        		"IDENT");
	    }

)
)(	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGenericParamDeclAccess().getColonKeyword_1_0());
    }
(
(
		lv_bounds_2_0=RULE_IDENT
		{
			newLeafNode(lv_bounds_2_0, grammarAccess.getGenericParamDeclAccess().getBoundsIDENTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenericParamDeclRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"bounds",
        		lv_bounds_2_0, 
        		"IDENT");
	    }

)
)(	otherlv_3='+' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGenericParamDeclAccess().getPlusSignKeyword_1_2_0());
    }
(
(
		lv_bounds_4_0=RULE_IDENT
		{
			newLeafNode(lv_bounds_4_0, grammarAccess.getGenericParamDeclAccess().getBoundsIDENTTerminalRuleCall_1_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenericParamDeclRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"bounds",
        		lv_bounds_4_0, 
        		"IDENT");
	    }

)
)))?)
;





// Entry rule entryRuleArg
entryRuleArg returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgRule()); }
	 iv_ruleArg=ruleArg 
	 { $current=$iv_ruleArg.current; } 
	 EOF 
;

// Rule Arg
ruleArg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArgAccess().getPatPatParserRuleCall_0_0()); 
	    }
		lv_pat_0_0=rulePat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgRule());
	        }
       		set(
       			$current, 
       			"pat",
        		lv_pat_0_0, 
        		"Pat");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePat
entryRulePat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPatRule()); }
	 iv_rulePat=rulePat 
	 { $current=$iv_rulePat.current; } 
	 EOF 
;

// Rule Pat
rulePat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_ident_0_0=RULE_IDENT
		{
			newLeafNode(lv_ident_0_0, grammarAccess.getPatAccess().getIdentIDENTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPatRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ident",
        		lv_ident_0_0, 
        		"IDENT");
	    }

)
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall()); 
    }
    this_PrimitiveType_0=rulePrimitiveType
    { 
        $current = $this_PrimitiveType_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeRule()); }
	 iv_rulePrimitiveType=rulePrimitiveType 
	 { $current=$iv_rulePrimitiveType.current; } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimitiveTypeAccess().getIntTypeAction_0_0(),
            $current);
    }
)this_INT_TYPE_1=RULE_INT_TYPE
    { 
    newLeafNode(this_INT_TYPE_1, grammarAccess.getPrimitiveTypeAccess().getINT_TYPETerminalRuleCall_0_1()); 
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimitiveTypeAccess().getFloatTypeAction_1_0(),
            $current);
    }
)this_FLOAT_TYPE_3=RULE_FLOAT_TYPE
    { 
    newLeafNode(this_FLOAT_TYPE_3, grammarAccess.getPrimitiveTypeAccess().getFLOAT_TYPETerminalRuleCall_1_1()); 
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimitiveTypeAccess().getBoolTypeAction_2_0(),
            $current);
    }
)this_BOOLEAN_TYPE_5=RULE_BOOLEAN_TYPE
    { 
    newLeafNode(this_BOOLEAN_TYPE_5, grammarAccess.getPrimitiveTypeAccess().getBOOLEAN_TYPETerminalRuleCall_2_1()); 
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimitiveTypeAccess().getMachineTypeAction_3_0(),
            $current);
    }
)this_MACHINE_TYPE_7=RULE_MACHINE_TYPE
    { 
    newLeafNode(this_MACHINE_TYPE_7, grammarAccess.getPrimitiveTypeAccess().getMACHINE_TYPETerminalRuleCall_3_1()); 
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimitiveTypeAccess().getUnitTypeAction_4_0(),
            $current);
    }
)this_UNIT_TYPE_9=RULE_UNIT_TYPE
    { 
    newLeafNode(this_UNIT_TYPE_9, grammarAccess.getPrimitiveTypeAccess().getUNIT_TYPETerminalRuleCall_4_1()); 
    }
))
;





// Entry rule entryRuleStringLit
entryRuleStringLit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLitRule()); }
	 iv_ruleStringLit=ruleStringLit 
	 { $current=$iv_ruleStringLit.current; } 
	 EOF 
;

// Rule StringLit
ruleStringLit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING_LIT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringLitAccess().getValueSTRING_LITTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING_LIT");
	    }

)
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNumberLitParserRuleCall_0()); 
    }
    this_NumberLit_0=ruleNumberLit
    { 
        $current = $this_NumberLit_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getCharLitParserRuleCall_1()); 
    }
    this_CharLit_1=ruleCharLit
    { 
        $current = $this_CharLit_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLitParserRuleCall_2()); 
    }
    this_StringLit_2=ruleStringLit
    { 
        $current = $this_StringLit_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNumberLit
entryRuleNumberLit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberLitRule()); }
	 iv_ruleNumberLit=ruleNumberLit 
	 { $current=$iv_ruleNumberLit.current; } 
	 EOF 
;

// Rule NumberLit
ruleNumberLit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_value_0_1=RULE_FLOAT_LIT
		{
			newLeafNode(lv_value_0_1, grammarAccess.getNumberLitAccess().getValueFLOAT_LITTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberLitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_1, 
        		"FLOAT_LIT");
	    }

    |		lv_value_0_2=RULE_INT_LIT
		{
			newLeafNode(lv_value_0_2, grammarAccess.getNumberLitAccess().getValueINT_LITTerminalRuleCall_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberLitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_2, 
        		"INT_LIT");
	    }

)

)
)
;





// Entry rule entryRuleCharLit
entryRuleCharLit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharLitRule()); }
	 iv_ruleCharLit=ruleCharLit 
	 { $current=$iv_ruleCharLit.current; } 
	 EOF 
;

// Rule CharLit
ruleCharLit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_CHAR_LIT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getCharLitAccess().getValueCHAR_LITTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCharLitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"CHAR_LIT");
	    }

)
)
;





RULE_INT_TYPE : RULE_INT_SIZE;

fragment RULE_INT_SIZE : (RULE_SIGNED_INT_TYPE|RULE_UNSIGNED_INT_TYPE);

fragment RULE_SIGNED_INT_TYPE : (RULE_I8|RULE_I16|RULE_I32|RULE_I64);

fragment RULE_I8 : 'i8';

fragment RULE_I16 : 'i16';

fragment RULE_I32 : 'i32';

fragment RULE_I64 : 'i64';

fragment RULE_UNSIGNED_INT_TYPE : (RULE_U8|RULE_U16|RULE_U32|RULE_U64);

fragment RULE_U8 : 'u8';

fragment RULE_U16 : 'u16';

fragment RULE_U32 : 'u32';

fragment RULE_U64 : 'u64';

RULE_FLOAT_TYPE : RULE_FLOAT_SIZE;

fragment RULE_FLOAT_SIZE : (RULE_F32|RULE_F64);

fragment RULE_F32 : 'f32';

fragment RULE_F64 : 'f64';

RULE_BOOLEAN_TYPE : 'bool';

RULE_MACHINE_TYPE : (RULE_MACHINE_INT_TYPE|RULE_MACHINE_UINT_TYPE);

fragment RULE_MACHINE_INT_TYPE : 'int';

fragment RULE_MACHINE_UINT_TYPE : 'uint';

RULE_UNIT_TYPE : '()';

RULE_CHAR_LIT : '\'' ('\\' ('\\'|'n'|'r'|'t'|'0')|RULE_UNICODE_CHAR|~(('\\'|'\'')))* '\'';

RULE_STRING_LIT : '"' ('\\' ('\\'|'n'|'r'|'t'|'0')|RULE_UNICODE_CHAR|~(('\\'|'"')))* '"';

fragment RULE_UNICODE_CHAR : (RULE_UTF8_CHAR|RULE_UTF16_CHAR|RULE_UTF32_CHAR);

fragment RULE_UTF8_CHAR : '\\x' RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_UTF16_CHAR : '\\u' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_UTF32_CHAR : '\\U' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

RULE_FLOAT_LIT : RULE_DEC_DIGIT (RULE_DEC_DIGIT|'_')* '.' (RULE_DEC_DIGIT|'_')+ (('E'|'e') ('+'|'-')? (RULE_DEC_DIGIT|'_')+)? RULE_FLOAT_SIZE?;

RULE_INT_LIT : (RULE_DEC_INT_LIT|RULE_BIN_INT_LIT|RULE_OCT_INT_LIT|RULE_HEX_INT_LIT) RULE_INT_SIZE?;

fragment RULE_DEC_INT_LIT : RULE_DEC_DIGIT (RULE_DEC_DIGIT|'_')*;

fragment RULE_BIN_INT_LIT : '0b' ('0'|'1'|'_')+;

fragment RULE_OCT_INT_LIT : '0o' (RULE_OCT_DIGIT|'_')+;

fragment RULE_HEX_INT_LIT : '0x' (RULE_HEX_DIGIT|'_')+;

fragment RULE_OCT_DIGIT : '0'..'7';

fragment RULE_DEC_DIGIT : '0'..'9';

fragment RULE_HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_XID_START : 'a'..'z';

fragment RULE_XID_CONTINUE : ('a'..'z'|'_');

RULE_IDENT : RULE_XID_START RULE_XID_CONTINUE*;



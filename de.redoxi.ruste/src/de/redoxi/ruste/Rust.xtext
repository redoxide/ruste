grammar de.redoxi.ruste.Rust hidden(WS, SL_COMMENT, ML_COMMENT)

generate rust "http://www.redoxi.de/ruste/grammar/Rust" 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// Top level crate and its implicit module
Crate:
	items+=(ViewItem | ItemAndAttrs)*
;

ViewItem:
	UseDecl
;

LinkAttr:
	ident=ID ('=' value=Literal)?
;

// TODO Match rules for internal vs external paths
UseDecl:
	vis=Visibility? "use" name=ID ('=' externPath=TypePath | "::" path=PathGlob) ';'
;

PathGlob:
	head += ID ("::" tail=PathGlob)? |
	head += "*" |
	'{' head+=ID (',' head+=ID)* '}'
;

// Attribute for an item
ItemAttr hidden ():
	'#[' WS? attrs+=Attr WS? (',' WS? attrs+=Attr WS?)* ']' WS? ';'?
;

// Individual attribute within an item
Attr: 
	name=ID ('=' value=Literal | '(' attrs+=Attr (',' attrs+=Attr)* ')')?
;

// An item and any associated attributes
ItemAndAttrs:
	attrs+=ItemAttr* item=Item
;

Item:
	ModItem | FnItem | TypeItem | StructItem | EnumItem | TraitItem | ImplItem | ExternItem | StaticItem
;

// A module declaration item
ModItem:
	vis=Visibility? "mod" name=ID (externalBody?=';' | '{' items+=(ViewItem | ItemAndAttrs)* '}')
;

// Function item
FnItem:
	vis=Visibility? "fn" name=ID ('<' params += GenericParamDecl (',' params += GenericParamDecl)* '>')? ('(' (args+=Arg (','  args+=Arg)*)? ')' | '()') ("->" returnType=Type)? '{' body=Block '}'
;

// TODO Reference Type?
TypeItem:
	vis=Visibility? "type" name=ID ('<' params+=GenericParamDecl (',' params+=GenericParamDecl)* '>')? '=' type=Type ';'
;

StructItem:
	vis=Visibility? "struct" name=ID ('<' params+=GenericParamDecl (',' params+=GenericParamDecl)* '>')? '{' fields+=StructField (',' fields+=StructField)* '}'
;

EnumItem:
	vis=Visibility? "enum" name=ID ('<' params+=GenericParamDecl (',' params+=GenericParamDecl)* '>')? "{" variants+=EnumVariant ("," variants+=EnumVariant)* ','? "}"
;

EnumVariant:
	name=ID ('<' params+=ID (',' params+=ID)* '>')? ("(" types+=Type ("," types+=Type)* ")" | "{" fields+=StructField ("," fields+=StructField)* /* TODO Wildcard pattern? */ "}")?
;

TraitItem:
	vis=Visibility? "trait" name=ID ('<' params+=GenericParamDecl (',' params+=GenericParamDecl)* '>')? "{" (methods+=TraitMethod)* "}"
;

TraitMethod:
	(unsafe?="unsafe" | extern?="extern")? vis=Visibility? "fn" name=ID ('<' params+=GenericParamDecl (',' params+=GenericParamDecl)* '>')? ('(' (args+=Arg (',' args+=Arg)*)? ')' | '()') ("->" returnType=Type)? ('{' body=Block '}' | ';')
;

// TODO Crossreference struct and trait
ImplItem:
	"impl" (trait=ID "for")? struct=ID "{" (methods+=ImplMethod)* "}"
;

ImplMethod:
	(unsafe?="unsafe" | extern?="extern")? "fn" name=ID ('<' params+=GenericParamDecl (',' params+=GenericParamDecl)* '>')? ('(' (args+=Arg (',' args+=Arg)*)? ')' | '()') ("->" returnType=Type)? '{' body=Block '}'
;

ExternItem:
	"extern" ({ExternModDecl} "mod" name=ID ('(' attrs += LinkAttr (',' attrs += LinkAttr)* ')')? ('=' externalIdent=StringLit)? ';'| {ExternBlock} abi=STRING_LIT? "{" (functions += ForeignFn)* "}")
;

ForeignFn:
	"fn" name=ID ("(" (args+=Arg ("," args+=Arg)*)? ")" | '()') ("->" returnType=Type)? ";"
;

StaticItem:
	vis=Visibility? "static" mutable?=MUT_KEYWORD? name=ID (":" type=Type)? "=" expr=Expr ";"
;

Expr:
	ExprBinary |
	ExprLambda |
	ExprWhile |
	ExprLoop |
	ExprBreak |
	ExprContinue |
	ExprDo |
	ExprFor |
	ExprIf |
	ExprMatch |
	ExprReturn
;

ExprLValue:
	expr=ExprLeaf ({ExprField.expr=current} =>'.' field=ID | {ExprIndex.expr=current} =>'[' indexExpr=Expr ']')
;

ExprLeaf hidden():
	ExprPrimary ({ExprCall.expr=current} '()' | '(' WS? args+=Expr WS? (',' WS? args+=Expr WS?)* ')')?
;

ExprFnCallArgs hidden():
	{ExprFnCallArgs} ('()' | '(' WS? args+=Expr WS? (',' WS? args+=Expr WS?)* ')') tail=ExprFnCallArgs?
;

ExprPrimary:
	ExprLiteral |
	ExprGroup |
	ExprStruct |
	ExprVec |
	ExprPath
;

ExprLiteral:
	literal=Literal
;

ExprGroup:
	'(' expr=Expr ({ExprTuple.exprs+=current} ',' (exprs+=Expr (',' exprs+=Expr)* ','?)?)? ')'
;

ExprStruct:
	"{" fields+=StructField ("," fields+=StructField)* (".." baseExpr = Expr)? "}"
;

ExprVec:
	'[' mutable?=MUT_KEYWORD (exprs+=Expr ',' (('..' lenExpr=Expr) | exprs+=Expr (',' exprs+=Expr)+))? ']'
;

ExprUnary:
	NumericNegation |
	Dereference |
	LogicalNegation |
	ManagedBox |
	OwnedBox |
	Borrow |
	ExprFields
;

NumericNegation hidden(SL_COMMENT, ML_COMMENT):
	"-" expr=ExprPrimary
;

Dereference hidden(SL_COMMENT, ML_COMMENT):
	"*" expr=ExprPrimary
;

LogicalNegation hidden(SL_COMMENT, ML_COMMENT):
	"!" expr=ExprPrimary
;

ManagedBox hidden(SL_COMMENT, ML_COMMENT):
	"@" expr=ExprPrimary
;

OwnedBox hidden(SL_COMMENT, ML_COMMENT):
	"~" expr=ExprPrimary
;

Borrow hidden(SL_COMMENT, ML_COMMENT):
	"&" expr=ExprPrimary
;

ExprFields:
	ExprLeaf ({ExprFields.exprs+=current} '.' exprs+=ExprFieldOrMethodCall)*
;

ExprFieldOrMethodCall:
	name=ID (args=ExprFnCallArgs)?
;

ExprBinary:
	Assign
;

enum MultiplicativeOp:
	DIV="/" | MUL="*" | MOD="%"
;

enum AdditiveOp:
	ADD="+" | SUB="-"
;

enum ShiftOp:
	LSHIFT="<<" | RSHIFT=">>"
;

enum ComparisonOp:
	LESS_THAN="<" | GREATER_THAN=">" | LESS_THAN_OR_EQUAL="<=" | GREATER_THAN_OR_EQUAL=">="
;

enum EqualityOp:
	EQUAL="==" | NOT_EQUAL="!="
;

DivisionMultiplicationOrModulo:
	ExprUnary ({ExprMultiplicative.exprs+=current} ops+=MultiplicativeOp exprs+=ExprUnary (ops+=MultiplicativeOp exprs+=ExprUnary)*)?
;

As:
	DivisionMultiplicationOrModulo ({ExprCast.expr=current} 'as' type=Type)?
;

AdditionOrSubtraction:
	As ({ExprAdditive.exprs+=current} ops+=AdditiveOp exprs+=As ( ops+=AdditiveOp exprs+=As)*)?
;

ShiftOperator:
	AdditionOrSubtraction ({ExprShift.exprs+=current} ops+=ShiftOp exprs+=AdditionOrSubtraction (ops+=ShiftOp exprs+=AdditionOrSubtraction)*)?
;

BitwiseAnd:
	ShiftOperator ({ExprBitwiseAnd.exprs+=current} "&" exprs+=ShiftOperator ("&" exprs+=ShiftOperator)*)?
;

BitwiseXor:
	BitwiseAnd ({ExprBitwiseXor.exprs+=current} "^" exprs+=BitwiseAnd ("^" exprs+=BitwiseAnd)*)?
;

BitwiseOr:
	BitwiseXor ({ExprBitwiseOr.exprs+=current} "|" exprs+=BitwiseXor ("|" exprs+=BitwiseXor)*)?
;

ComparisonOperators:
	BitwiseOr ({ExprComparision.exprs+=current} ops+=ComparisonOp exprs+=BitwiseOr (ops+=ComparisonOp exprs+=BitwiseOr)*)?
;

EqualityOperator:
	ComparisonOperators ({ExprEqual.exprs+=current} ops+=EqualityOp exprs+=ComparisonOperators (ops+=EqualityOp exprs+=ComparisonOperators)*)?
;

BooleanAnd:
	EqualityOperator ({ExprBooleanAnd.exprs+=current} "&&" exprs+=EqualityOperator ("&&" exprs+=EqualityOperator)*)?
;

BooleanOr:
	BooleanAnd ({ExprBooleanOr.exprs+=current} "||" exprs+=BooleanAnd ("||" exprs+=BooleanAnd)*)?
;

// TODO Divide expressions into lvalues and rvalues
Assign:
	BooleanOr ({ExprAssign.exprs+=current} "=" exprs+=BooleanOr ("=" exprs+=BooleanOr)*)?
;

ExprLambda:
	'|' (args+=ID (',' args+=ID)*)? '|' expr=Expr
;

ExprWhile:
	"while" expr=Expr '{' block=Block '}'
;

ExprLoop:
	(lifetime=[Lifetime] ':')? 'loop' '{' block=Block '}'
;

ExprBreak:
	{ExprBreak} 'break' lifetime=[Lifetime]?
;

ExprContinue:
	{ExprContinue} 'continue' lifetime=[Lifetime]?
;

ExprDo:
	'do' expr=Expr '|' (args+=ID (',' args+=ID)*)? '|' '{' block=Block '}'
;

ExprFor:
	'for' pat=Pat 'in' expr=Expr '{' block=Block '}'
;

ExprIf:
	'if' expr=Expr '{' block=Block '}' else=ElseTail?
;

ElseTail:
	'else' (ExprIf | '{' block=Block '}')
;

ExprMatch:
	'match' expr=Expr '{' arms+=MatchArm ('|' arms+=MatchArm)* '}'
;

MatchArm:
	matchPat=(MatchPat | PatEnum) '=>' (expr=Expr ',' | '{' block=Block '}')
;

MatchPat:
	pat=Pat ('..' endPat=Pat)? ('if' expr=Expr)
;

// TODO Expression is optional
ExprReturn:
	{ExprReturn} 'return' expr=Expr?
;

// Left-factored. Bit messy
Block:
	{Block} stmts+=Stmt (';' stmts+=Stmt)* ';'?
;

Stmt:
	SlotDeclStmt |
	ExprStmt
;

SlotDeclStmt:
	'let' pat=Pat (':' type=Type)? '=' expr=Expr ';'
;

ExprStmt:
	expr=Expr
;

// TODO Crossreference Trait?
GenericParamDecl:
	name=ID (':' bounds+=ID ('+' bounds+=ID)* )?
;

// TODO Crossreference Type
Arg:
	pat=Pat ':' type=Type
;

// TODO Expand
// See line 2869 of libsyntax/parse/parser.rs
Pat:
	PatWildcard |														
	PatIdent |
	PatBoxed |
	PatOwned |
	PatBorrowed |
	PatTuple |
	PatVector |
	PatLiteral
;

PatWildcard:
	{PatWildcard} '_'
;

PatIdent:
	(mutable?=MUT_KEYWORD)? name=ID
;

PatBoxed hidden(SL_COMMENT, ML_COMMENT):
	"@" pattern=Pat
;

PatOwned hidden(SL_COMMENT, ML_COMMENT):
	"~" pattern=Pat
;

PatBorrowed hidden(SL_COMMENT, ML_COMMENT):
	"&" pattern=Pat
;

PatTuple:
	'(' patterns+=Pat (',' patterns+=Pat)* ')'
;

PatVector:
	'[' patterns+=Pat (',' patterns+=Pat)* ']'
;

PatLiteral:
	literal=Literal
;

PatEnum:
	path=ExprPath ({PatTupleEnum.path=current} '(' ('*' | '..' | patterns+=Pat (',' patterns+=Pat)*) ')' | {PatStructEnum.path=current} '{' fieldPatterns+=FieldPat (',' fieldPatterns+=FieldPat)* '}')
;

FieldPat:
	name=ID (':' pattern=Pat)?
;

TypePath hidden(ML_COMMENT):
	segments+=ID ('::' segments+=ID)* (=>'<' genericParams+=[GenericParam] (',' genericParams+=[GenericParam])+ '>')?
;

ExprPath hidden(ML_COMMENT):
	segments+=ID ('::' segments+=ID)* ('::<' genericParams+=[GenericParam] (',' genericParams+=[GenericParam])* '>')?
;

GenericParam:
	Type | {Lifetime} name=LIFETIME
;

terminal LIFETIME:
	"'" ID
;

Type:
	UnitType |
	NamedType |
	BoxedPointer |
	OwnedPointer |
	BorrowedPointer |
	TypeItem
;

UnitType:
	{UnitType} '()'
;

NamedType:
	name=ID ('::' path=TypePath)?
;

BoxedPointer hidden(SL_COMMENT, ML_COMMENT):
	"@" type=Type
;

OwnedPointer hidden(SL_COMMENT, ML_COMMENT):
	"~" type=Type
;

BorrowedPointer hidden(SL_COMMENT, ML_COMMENT):
	"&"(lifetime=LIFETIME WS)? type=Type
;

StructField:
	vis=Visibility? name=ID ':' type=Type
;

Variant:
	StructVariant | TupleVariant | UnitVariant
;

StructVariant:
	name=ID ('<' params += GenericParamDecl (',' params += GenericParamDecl)* '>')? '{' fields+=StructField (',' fields+=StructField)* '}'
;

TupleVariant:
	name=ID '(' types+=Type (',' types+=Type)* ')'
;

UnitVariant:
	name=ID
;

enum Visibility:
	PRIVATE="priv" | PUBLIC="pub"	
;

terminal MUT_KEYWORD: 'mut';
// TODO Add all keywords

// terminal INT_TYPE: INT_SIZE;
terminal fragment INT_SIZE: SIGNED_INT_TYPE | UNSIGNED_INT_TYPE;
terminal fragment SIGNED_INT_TYPE: I8 | I16 | I32 | I64;
terminal fragment I8: "i8";
terminal fragment I16: "i16";
terminal fragment I32: "i32";
terminal fragment I64: "i64";
terminal fragment UNSIGNED_INT_TYPE: U8 | U16 | U32 | U64;
terminal fragment U8: "u8";
terminal fragment U16: "u16";
terminal fragment U32: "u32";
terminal fragment U64: "u64";
// terminal FLOAT_TYPE: FLOAT_SIZE;
terminal fragment FLOAT_SIZE: F32 | F64;
terminal fragment F32: "f32";
terminal fragment F64: "f64";
terminal BOOLEAN_TYPE: "bool";
// terminal MACHINE_TYPE: MACHINE_INT_TYPE | MACHINE_UINT_TYPE;
terminal fragment MACHINE_INT_TYPE: "int";
terminal fragment MACHINE_UINT_TYPE: "uint";

StringLit: 
	value = STRING_LIT
	// | {RawStringLit} 'r' '#' body = RawString? '#'
;

// Literal value
Literal:
	NumberLit | CharLit | StringLit
;

NumberLit:
	value = (FLOAT_LIT | INT_LIT)
;

// Single character literal
CharLit:
	value = CHAR_LIT
;

terminal CHAR_LIT: "'" (('\\' ('\\' | 'n' | 'r' | 't' | '0')) | UNICODE_CHAR | !('\\' | "'")) "'";
terminal STRING_LIT: '"' (('\\' ('\\' | 'n' | 'r' | 't' | '0')) | UNICODE_CHAR | !('\\' | '"'))* '"';

terminal fragment UNICODE_CHAR: UTF8_CHAR | UTF16_CHAR | UTF32_CHAR;
terminal fragment UTF8_CHAR: '\\x' HEX_DIGIT HEX_DIGIT;
terminal fragment UTF16_CHAR: '\\u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
terminal fragment UTF32_CHAR: '\\U' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;

// Floating point literal
terminal FLOAT_LIT: DEC_DIGIT (DEC_DIGIT | '_')* ('.' (DEC_DIGIT | '_')+) (('E' | 'e') ('+' | '-')? (DEC_DIGIT | '_')+)? FLOAT_SIZE?;

// Integer literal
terminal INT_LIT: (DEC_INT_LIT | BIN_INT_LIT | OCT_INT_LIT | HEX_INT_LIT) INT_SIZE?;

// Decimal (base 10) integer
terminal fragment DEC_INT_LIT: DEC_DIGIT (DEC_DIGIT | '_')*;

// Binary (base 2) integer
terminal fragment BIN_INT_LIT: "0b" ('0' | '1' | '_')+;

// Octal (base 8) integer
terminal fragment OCT_INT_LIT: "0o" (OCT_DIGIT | '_')+;

// Hex (base 16) integer
terminal fragment HEX_INT_LIT: "0x" (HEX_DIGIT | '_')+;

terminal fragment OCT_DIGIT: '0'..'7';
terminal fragment DEC_DIGIT: '0'..'9';
terminal fragment HEX_DIGIT: '0'..'9' | 'a'..'f' | 'A'..'F';

// terminal fragment NON_SPECIAL_CHAR: !('"' | '\'' | '\\' | 'n' | 'r' | 't' | '0');

terminal ID: ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal WS:
	(' ' | '\t' | '\n' | '\r')+
;

terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

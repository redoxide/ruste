/*
 * Copyright 2013 Hayden Smith
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under 
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
 * either express or implied. See the License for the specific language governing permissions and 
 * limitations under the License.
 */

package de.redoxi.ruste.core.model.ast;

import org.eclipse.core.resources.IResource;

/**
 * Base class for all nodes in the abstract syntax tree generated by the
 * {@link RustParser} class
 * 
 * @author Hayden Smith
 * @since 0.0.1
 */
abstract public class ASTNode {

    protected int startLine, startPos, endLine, endPos;
    protected IResource resource;
    protected Scope scope;
    protected ASTNode parent;

    public ASTNode(ASTNode parent) {
	this.parent = parent;
    }

    public ASTNode getParent() {
	return parent;
    }

    public Scope getScope() {
	return scope;
    }

    public void setScope(Scope scope) {
	this.scope = scope;
    }

    public int getStartLine() {
	return startLine;
    }

    public void setStartLine(int startLine) {
	this.startLine = startLine;
    }

    public int getStartPos() {
	return startPos;
    }

    public void setStartPos(int startPos) {
	this.startPos = startPos;
    }

    public int getEndLine() {
	return endLine;
    }

    public void setEndLine(int endLine) {
	this.endLine = endLine;
    }

    public int getEndPos() {
	return endPos;
    }

    public void setEndPos(int endPos) {
	this.endPos = endPos;
    }

    /**
     * @return <code>true</code> if this node has descendants that should appear as separate
     * nodes in the content outline.
     * 
     * TODO This should really return true if it has ANY child nodes.
     */
    public boolean hasChildren() {
	return false;
    }
    
    /**
     * @return The {@link IResource} in which this construct is declared
     */
    public IResource getResource() {
	return resource;
    }

    public void accept(Visitor visitor) {
	if (visitor == null) {
	    throw new IllegalArgumentException(
		    "Cannot pass null ASTNode.Visitor to ASTNode.accept");
	}

	visitor.visit(this);
    }

    /**
     * Interface for classes that can be used to visit the nodes in the abstract
     * syntax tree
     * 
     * @author Hayden Smith
     * @since 0.0.1
     */
    public interface Visitor {

	/**
	 * Called when visiting each node
	 * 
	 * @param node
	 *            The AST node visited
	 */
	public void visit(final ASTNode node);
    }
}
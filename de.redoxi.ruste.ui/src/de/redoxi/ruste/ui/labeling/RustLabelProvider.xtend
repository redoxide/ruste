/*
* generated by Xtext
*/
package de.redoxi.ruste.ui.labeling

import com.google.inject.Inject
import de.redoxi.ruste.rust.Item
import de.redoxi.ruste.rust.ItemEnum
import de.redoxi.ruste.rust.ItemMod
import de.redoxi.ruste.rust.ViewItemUse
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
class RustLabelProvider extends DefaultEObjectLabelProvider {

	

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}
		
		def image(ViewItemUse useDecl) {
			'use_obj.png'
		}

		/*def image(StructItem structItem) {
			'struct_obj.png'
		}*/

		def image(ItemEnum enumItem) {
			'enum_obj.png'
		}
		
		/*def image(TraitItem traitItem) {
			'trait_obj.png'
		}*/
		
		def image(ItemMod modItem) {
			if (modItem.module.items.empty) 
				'empty_module_obj.png'
			else
				'module_obj.png'
		}
		
		def image(Item item) {
			if (item.vis.public) {
				return 'methpub_obj.png'
			} else {
					return 'methpri_obj.png'
			}
		}
		
		/*def image(ItemStatic staticItem) {
			if (staticItem.public) {
				return 'static_field_public_obj.png'
			} else {
				return 'static_field_private_obj.png'
			}
		}
		
		def image(StructDeclField structField) {
			switch (structField.vis) {
				case Visibility.PUBLIC:
					return 'static_field_public_obj.png'
				default:
					return 'static_field_private_obj.png'
			}
		}*/
}

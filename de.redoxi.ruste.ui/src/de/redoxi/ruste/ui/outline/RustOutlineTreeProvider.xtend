/*
* generated by Xtext
*/
package de.redoxi.ruste.ui.outline

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider

/**
 * Customization of the default outline structure.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
class RustOutlineTreeProvider extends DefaultOutlineTreeProvider {
	
	override void createChildren(IOutlineNode parentNode, EObject modelElement) {
		for (EObject childElement : modelElement.eContents()) {
			var EObject child = childElement
			
			/*if (childElement instanceof ItemAndAttrs) {
				child = (childElement as ItemAndAttrs).item
			} else if (childElement instanceof CrateItem) {
				child = (childElement as CrateItem).item
			}*/
			
			createNode(parentNode, child)
		}
	}
	
	override void createNode(IOutlineNode parentNode, EObject modelElement) {
		createEObjectNode(parentNode, modelElement, imageDispatcher.invoke(modelElement), modelElement.eContainingFeature.name + "=" + textDispatcher.invoke(modelElement) + "(" + modelElement.class.simpleName + ")", isLeafDispatcher.invoke(modelElement));
	}
	
	/*
	def _isLeaf(UseDecl useDecl) {
		true
	}
	
	def _isLeaf(StaticItem staticItem) {
		true
	}
	
	def _isLeaf(StructField structField) {
		true
	}
	
	def _isLeaf(FnItem fnItem) {
		true
	}
	*/
}

/*
* generated by Xtext
*/
package de.redoxi.ruste.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.redoxi.ruste.services.RustGrammarAccess;

public class RustParser extends AbstractContentAssistParser {
	
	@Inject
	private RustGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.redoxi.ruste.ui.contentassist.antlr.internal.InternalRustParser createParser() {
		de.redoxi.ruste.ui.contentassist.antlr.internal.InternalRustParser result = new de.redoxi.ruste.ui.contentassist.antlr.internal.InternalRustParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAttrAccess().getAlternatives(), "rule__Attr__Alternatives");
					put(grammarAccess.getItemAccess().getAlternatives(), "rule__Item__Alternatives");
					put(grammarAccess.getModItemAccess().getAlternatives_2(), "rule__ModItem__Alternatives_2");
					put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
					put(grammarAccess.getItemAttrAccess().getGroup(), "rule__ItemAttr__Group__0");
					put(grammarAccess.getItemAttrAccess().getGroup_2(), "rule__ItemAttr__Group_2__0");
					put(grammarAccess.getAttrWithListAccess().getGroup(), "rule__AttrWithList__Group__0");
					put(grammarAccess.getAttrWithListAccess().getGroup_3(), "rule__AttrWithList__Group_3__0");
					put(grammarAccess.getLiteralAttrAccess().getGroup(), "rule__LiteralAttr__Group__0");
					put(grammarAccess.getItemAndAttrsAccess().getGroup(), "rule__ItemAndAttrs__Group__0");
					put(grammarAccess.getModItemAccess().getGroup(), "rule__ModItem__Group__0");
					put(grammarAccess.getModItemAccess().getGroup_2_1(), "rule__ModItem__Group_2_1__0");
					put(grammarAccess.getFnItemAccess().getGroup(), "rule__FnItem__Group__0");
					put(grammarAccess.getFnItemAccess().getGroup_2(), "rule__FnItem__Group_2__0");
					put(grammarAccess.getFnItemAccess().getGroup_2_2(), "rule__FnItem__Group_2_2__0");
					put(grammarAccess.getFnItemAccess().getGroup_4(), "rule__FnItem__Group_4__0");
					put(grammarAccess.getFnItemAccess().getGroup_4_1(), "rule__FnItem__Group_4_1__0");
					put(grammarAccess.getFnItemAccess().getGroup_6(), "rule__FnItem__Group_6__0");
					put(grammarAccess.getGenericParamDeclAccess().getGroup(), "rule__GenericParamDecl__Group__0");
					put(grammarAccess.getGenericParamDeclAccess().getGroup_1(), "rule__GenericParamDecl__Group_1__0");
					put(grammarAccess.getGenericParamDeclAccess().getGroup_1_2(), "rule__GenericParamDecl__Group_1_2__0");
					put(grammarAccess.getArgAccess().getGroup(), "rule__Arg__Group__0");
					put(grammarAccess.getPrimitiveTypeAccess().getGroup_0(), "rule__PrimitiveType__Group_0__0");
					put(grammarAccess.getPrimitiveTypeAccess().getGroup_1(), "rule__PrimitiveType__Group_1__0");
					put(grammarAccess.getPrimitiveTypeAccess().getGroup_2(), "rule__PrimitiveType__Group_2__0");
					put(grammarAccess.getPrimitiveTypeAccess().getGroup_3(), "rule__PrimitiveType__Group_3__0");
					put(grammarAccess.getPrimitiveTypeAccess().getGroup_4(), "rule__PrimitiveType__Group_4__0");
					put(grammarAccess.getCrateAccess().getItemsAssignment(), "rule__Crate__ItemsAssignment");
					put(grammarAccess.getItemAttrAccess().getAttrsAssignment_1(), "rule__ItemAttr__AttrsAssignment_1");
					put(grammarAccess.getItemAttrAccess().getAttrsAssignment_2_1(), "rule__ItemAttr__AttrsAssignment_2_1");
					put(grammarAccess.getAttrWithListAccess().getIdentAssignment_0(), "rule__AttrWithList__IdentAssignment_0");
					put(grammarAccess.getAttrWithListAccess().getAttrsAssignment_2(), "rule__AttrWithList__AttrsAssignment_2");
					put(grammarAccess.getAttrWithListAccess().getAttrsAssignment_3_1(), "rule__AttrWithList__AttrsAssignment_3_1");
					put(grammarAccess.getLiteralAttrAccess().getIdentAssignment_0(), "rule__LiteralAttr__IdentAssignment_0");
					put(grammarAccess.getLiteralAttrAccess().getValueAssignment_2(), "rule__LiteralAttr__ValueAssignment_2");
					put(grammarAccess.getItemAndAttrsAccess().getAttrsAssignment_0(), "rule__ItemAndAttrs__AttrsAssignment_0");
					put(grammarAccess.getItemAndAttrsAccess().getItemAssignment_1(), "rule__ItemAndAttrs__ItemAssignment_1");
					put(grammarAccess.getModItemAccess().getIdentAssignment_1(), "rule__ModItem__IdentAssignment_1");
					put(grammarAccess.getModItemAccess().getExternalBodyAssignment_2_0(), "rule__ModItem__ExternalBodyAssignment_2_0");
					put(grammarAccess.getModItemAccess().getItemsAssignment_2_1_1(), "rule__ModItem__ItemsAssignment_2_1_1");
					put(grammarAccess.getFnItemAccess().getIdentAssignment_1(), "rule__FnItem__IdentAssignment_1");
					put(grammarAccess.getFnItemAccess().getParamsAssignment_2_1(), "rule__FnItem__ParamsAssignment_2_1");
					put(grammarAccess.getFnItemAccess().getParamsAssignment_2_2_1(), "rule__FnItem__ParamsAssignment_2_2_1");
					put(grammarAccess.getFnItemAccess().getArgsAssignment_4_0(), "rule__FnItem__ArgsAssignment_4_0");
					put(grammarAccess.getFnItemAccess().getArgsAssignment_4_1_1(), "rule__FnItem__ArgsAssignment_4_1_1");
					put(grammarAccess.getFnItemAccess().getReturnTypeAssignment_6_1(), "rule__FnItem__ReturnTypeAssignment_6_1");
					put(grammarAccess.getGenericParamDeclAccess().getIdentAssignment_0(), "rule__GenericParamDecl__IdentAssignment_0");
					put(grammarAccess.getGenericParamDeclAccess().getBoundsAssignment_1_1(), "rule__GenericParamDecl__BoundsAssignment_1_1");
					put(grammarAccess.getGenericParamDeclAccess().getBoundsAssignment_1_2_1(), "rule__GenericParamDecl__BoundsAssignment_1_2_1");
					put(grammarAccess.getArgAccess().getPatAssignment_0(), "rule__Arg__PatAssignment_0");
					put(grammarAccess.getArgAccess().getTypeAssignment_2(), "rule__Arg__TypeAssignment_2");
					put(grammarAccess.getPatAccess().getIdentAssignment(), "rule__Pat__IdentAssignment");
					put(grammarAccess.getNumberLitAccess().getValueAssignment(), "rule__NumberLit__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.redoxi.ruste.ui.contentassist.antlr.internal.InternalRustParser typedParser = (de.redoxi.ruste.ui.contentassist.antlr.internal.InternalRustParser) parser;
			typedParser.entryRuleCrate();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}
	
	public RustGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RustGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
